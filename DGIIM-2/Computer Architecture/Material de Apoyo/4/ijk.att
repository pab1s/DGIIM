
ijk:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 c9 9f 00 00 	mov    0x9fc9(%rip),%rax        # bfd8 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000002020 <.plt>:
    2020:	ff 35 2a 9e 00 00    	pushq  0x9e2a(%rip)        # be50 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 2b 9e 00 00 	bnd jmpq *0x9e2b(%rip)        # be58 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000002240 <__cxa_finalize@plt>:
    2240:	f3 0f 1e fa          	endbr64 
    2244:	f2 ff 25 25 9d 00 00 	bnd jmpq *0x9d25(%rip)        # bf70 <__cxa_finalize@GLIBC_2.2.5>
    224b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

0000000000002250 <std::chrono::_V2::system_clock::now()@plt>:
    2250:	f3 0f 1e fa          	endbr64 
    2254:	f2 ff 25 05 9c 00 00 	bnd jmpq *0x9c05(%rip)        # be60 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    225b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>:
    2260:	f3 0f 1e fa          	endbr64 
    2264:	f2 ff 25 fd 9b 00 00 	bnd jmpq *0x9bfd(%rip)        # be68 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@GLIBCXX_3.4>
    226b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002270 <std::runtime_error::runtime_error(char const*)@plt>:
    2270:	f3 0f 1e fa          	endbr64 
    2274:	f2 ff 25 f5 9b 00 00 	bnd jmpq *0x9bf5(%rip)        # be70 <std::runtime_error::runtime_error(char const*)@GLIBCXX_3.4.21>
    227b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002280 <strlen@plt>:
    2280:	f3 0f 1e fa          	endbr64 
    2284:	f2 ff 25 ed 9b 00 00 	bnd jmpq *0x9bed(%rip)        # be78 <strlen@GLIBC_2.2.5>
    228b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002290 <__cxa_allocate_exception@plt>:
    2290:	f3 0f 1e fa          	endbr64 
    2294:	f2 ff 25 e5 9b 00 00 	bnd jmpq *0x9be5(%rip)        # be80 <__cxa_allocate_exception@CXXABI_1.3>
    229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022a0 <memset@plt>:
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	f2 ff 25 dd 9b 00 00 	bnd jmpq *0x9bdd(%rip)        # be88 <memset@GLIBC_2.2.5>
    22ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	f2 ff 25 d5 9b 00 00 	bnd jmpq *0x9bd5(%rip)        # be90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    22bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022c0 <__assert_fail@plt>:
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	f2 ff 25 cd 9b 00 00 	bnd jmpq *0x9bcd(%rip)        # be98 <__assert_fail@GLIBC_2.2.5>
    22cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022d0 <__multf3@plt>:
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	f2 ff 25 c5 9b 00 00 	bnd jmpq *0x9bc5(%rip)        # bea0 <__multf3@GCC_4.3.0>
    22db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	f2 ff 25 bd 9b 00 00 	bnd jmpq *0x9bbd(%rip)        # bea8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    22eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022f0 <std::__throw_logic_error(char const*)@plt>:
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	f2 ff 25 b5 9b 00 00 	bnd jmpq *0x9bb5(%rip)        # beb0 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    22fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002300 <__cxa_free_exception@plt>:
    2300:	f3 0f 1e fa          	endbr64 
    2304:	f2 ff 25 ad 9b 00 00 	bnd jmpq *0x9bad(%rip)        # beb8 <__cxa_free_exception@CXXABI_1.3>
    230b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    2310:	f3 0f 1e fa          	endbr64 
    2314:	f2 ff 25 a5 9b 00 00 	bnd jmpq *0x9ba5(%rip)        # bec0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    231b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002320 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    2320:	f3 0f 1e fa          	endbr64 
    2324:	f2 ff 25 9d 9b 00 00 	bnd jmpq *0x9b9d(%rip)        # bec8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    232b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002330 <__cxa_demangle@plt>:
    2330:	f3 0f 1e fa          	endbr64 
    2334:	f2 ff 25 95 9b 00 00 	bnd jmpq *0x9b95(%rip)        # bed0 <__cxa_demangle@CXXABI_1.3>
    233b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002340 <__cxa_atexit@plt>:
    2340:	f3 0f 1e fa          	endbr64 
    2344:	f2 ff 25 8d 9b 00 00 	bnd jmpq *0x9b8d(%rip)        # bed8 <__cxa_atexit@GLIBC_2.2.5>
    234b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
    2350:	f3 0f 1e fa          	endbr64 
    2354:	f2 ff 25 85 9b 00 00 	bnd jmpq *0x9b85(%rip)        # bee0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
    235b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	f2 ff 25 7d 9b 00 00 	bnd jmpq *0x9b7d(%rip)        # bee8 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    2370:	f3 0f 1e fa          	endbr64 
    2374:	f2 ff 25 75 9b 00 00 	bnd jmpq *0x9b75(%rip)        # bef0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 6d 9b 00 00 	bnd jmpq *0x9b6d(%rip)        # bef8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 65 9b 00 00 	bnd jmpq *0x9b65(%rip)        # bf00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <__stack_chk_fail@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 5d 9b 00 00 	bnd jmpq *0x9b5d(%rip)        # bf08 <__stack_chk_fail@GLIBC_2.4>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 55 9b 00 00 	bnd jmpq *0x9b55(%rip)        # bf10 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@GLIBCXX_3.4>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <__addtf3@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 4d 9b 00 00 	bnd jmpq *0x9b4d(%rip)        # bf18 <__addtf3@GCC_4.3.0>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <std::ios_base::Init::Init()@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 45 9b 00 00 	bnd jmpq *0x9b45(%rip)        # bf20 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 3d 9b 00 00 	bnd jmpq *0x9b3d(%rip)        # bf28 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@GLIBCXX_3.4>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <memmove@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 35 9b 00 00 	bnd jmpq *0x9b35(%rip)        # bf30 <memmove@GLIBC_2.2.5>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__eqtf2@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 2d 9b 00 00 	bnd jmpq *0x9b2d(%rip)        # bf38 <__eqtf2@GCC_4.3.0>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <__cxa_throw@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 25 9b 00 00 	bnd jmpq *0x9b25(%rip)        # bf40 <__cxa_throw@CXXABI_1.3>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <_Unwind_Resume@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 1d 9b 00 00 	bnd jmpq *0x9b1d(%rip)        # bf48 <_Unwind_Resume@GCC_3.0>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 15 9b 00 00 	bnd jmpq *0x9b15(%rip)        # bf50 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <std::ostream::operator<<(double)@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 0d 9b 00 00 	bnd jmpq *0x9b0d(%rip)        # bf58 <std::ostream::operator<<(double)@GLIBCXX_3.4>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 05 9b 00 00 	bnd jmpq *0x9b05(%rip)        # bf60 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

0000000000002460 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
    2460:	c3                   	retq   

0000000000002461 <ec::demangle[abi:cxx11](char const*) [clone .cold]>:
    2461:	bf 10 00 00 00       	mov    $0x10,%edi
    2466:	e8 25 fe ff ff       	callq  2290 <__cxa_allocate_exception@plt>
    246b:	48 89 c7             	mov    %rax,%rdi
    246e:	48 8d 35 73 5f 00 00 	lea    0x5f73(%rip),%rsi        # 83e8 <_IO_stdin_used+0x3e8>
    2475:	49 89 c4             	mov    %rax,%r12
    2478:	e8 f3 fd ff ff       	callq  2270 <std::runtime_error::runtime_error(char const*)@plt>
    247d:	48 8b 15 04 9b 00 00 	mov    0x9b04(%rip),%rdx        # bf88 <std::runtime_error::~runtime_error()@GLIBCXX_3.4>
    2484:	48 8b 35 65 9b 00 00 	mov    0x9b65(%rip),%rsi        # bff0 <typeinfo for std::runtime_error@GLIBCXX_3.4>
    248b:	4c 89 e7             	mov    %r12,%rdi
    248e:	e8 7d ff ff ff       	callq  2410 <__cxa_throw@plt>
    2493:	f3 0f 1e fa          	endbr64 
    2497:	48 89 c5             	mov    %rax,%rbp
    249a:	c5 f8 77             	vzeroupper 
    249d:	eb 12                	jmp    24b1 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x50>
    249f:	f3 0f 1e fa          	endbr64 
    24a3:	48 89 c5             	mov    %rax,%rbp
    24a6:	4c 89 e7             	mov    %r12,%rdi
    24a9:	c5 f8 77             	vzeroupper 
    24ac:	e8 4f fe ff ff       	callq  2300 <__cxa_free_exception@plt>
    24b1:	4c 89 ef             	mov    %r13,%rdi
    24b4:	e8 07 2b 00 00       	callq  4fc0 <std::unique_ptr<char, void (*)(void*)>::~unique_ptr()>
    24b9:	48 89 ef             	mov    %rbp,%rdi
    24bc:	e8 5f ff ff ff       	callq  2420 <_Unwind_Resume@plt>

00000000000024c1 <void test_type<short>() [clone .cold]>:
    24c1:	48 89 ef             	mov    %rbp,%rdi
    24c4:	c5 f8 77             	vzeroupper 
    24c7:	e8 e4 fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    24cc:	4c 89 e7             	mov    %r12,%rdi
    24cf:	e8 4c ff ff ff       	callq  2420 <_Unwind_Resume@plt>

00000000000024d4 <void test_type<int>() [clone .cold]>:
    24d4:	48 89 ef             	mov    %rbp,%rdi
    24d7:	c5 f8 77             	vzeroupper 
    24da:	e8 d1 fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    24df:	4c 89 e7             	mov    %r12,%rdi
    24e2:	e8 39 ff ff ff       	callq  2420 <_Unwind_Resume@plt>

00000000000024e7 <void test_type<long>() [clone .cold]>:
    24e7:	48 89 ef             	mov    %rbp,%rdi
    24ea:	c5 f8 77             	vzeroupper 
    24ed:	e8 be fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    24f2:	4c 89 e7             	mov    %r12,%rdi
    24f5:	e8 26 ff ff ff       	callq  2420 <_Unwind_Resume@plt>

00000000000024fa <void test_type<__int128>() [clone .cold]>:
    24fa:	48 89 ef             	mov    %rbp,%rdi
    24fd:	c5 f8 77             	vzeroupper 
    2500:	e8 ab fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    2505:	4c 89 e7             	mov    %r12,%rdi
    2508:	e8 13 ff ff ff       	callq  2420 <_Unwind_Resume@plt>

000000000000250d <void test_type<float>() [clone .cold]>:
    250d:	48 89 ef             	mov    %rbp,%rdi
    2510:	c5 f8 77             	vzeroupper 
    2513:	e8 98 fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    2518:	4c 89 e7             	mov    %r12,%rdi
    251b:	e8 00 ff ff ff       	callq  2420 <_Unwind_Resume@plt>

0000000000002520 <void test_type<double>() [clone .cold]>:
    2520:	48 89 ef             	mov    %rbp,%rdi
    2523:	c5 f8 77             	vzeroupper 
    2526:	e8 85 fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    252b:	4c 89 e7             	mov    %r12,%rdi
    252e:	e8 ed fe ff ff       	callq  2420 <_Unwind_Resume@plt>

0000000000002533 <void test_type<long double>() [clone .cold]>:
    2533:	48 89 ef             	mov    %rbp,%rdi
    2536:	c5 f8 77             	vzeroupper 
    2539:	e8 72 fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    253e:	4c 89 e7             	mov    %r12,%rdi
    2541:	e8 da fe ff ff       	callq  2420 <_Unwind_Resume@plt>

0000000000002546 <void test_type<__float128>() [clone .cold]>:
    2546:	48 89 ef             	mov    %rbp,%rdi
    2549:	c5 f8 77             	vzeroupper 
    254c:	e8 5f fd ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    2551:	4c 89 e7             	mov    %r12,%rdi
    2554:	e8 c7 fe ff ff       	callq  2420 <_Unwind_Resume@plt>
    2559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002560 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
    2560:	48 83 ec 08          	sub    $0x8,%rsp
    2564:	48 8d 3d b6 9a 00 00 	lea    0x9ab6(%rip),%rdi        # c021 <std::__ioinit>
    256b:	e8 60 fe ff ff       	callq  23d0 <std::ios_base::Init::Init()@plt>
    2570:	48 8b 3d 81 9a 00 00 	mov    0x9a81(%rip),%rdi        # bff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    2577:	48 8d 15 8a 9a 00 00 	lea    0x9a8a(%rip),%rdx        # c008 <__dso_handle>
    257e:	48 8d 35 9c 9a 00 00 	lea    0x9a9c(%rip),%rsi        # c021 <std::__ioinit>
    2585:	48 83 c4 08          	add    $0x8,%rsp
    2589:	e9 b2 fd ff ff       	jmpq   2340 <__cxa_atexit@plt>
    258e:	66 90                	xchg   %ax,%ax

0000000000002590 <main>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	48 83 ec 08          	sub    $0x8,%rsp
    2598:	48 8b 3d 01 9a 00 00 	mov    0x9a01(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    259f:	48 8d 35 6a 5e 00 00 	lea    0x5e6a(%rip),%rsi        # 8410 <_IO_stdin_used+0x410>
    25a6:	e8 b5 fd ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    25ab:	48 89 c7             	mov    %rax,%rdi
    25ae:	48 8d 35 a3 5e 00 00 	lea    0x5ea3(%rip),%rsi        # 8458 <_IO_stdin_used+0x458>
    25b5:	e8 a6 fd ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    25ba:	e8 01 4e 00 00       	callq  73c0 <void test_type<short>()>
    25bf:	e8 dc 4e 00 00       	callq  74a0 <void test_type<int>()>
    25c4:	e8 b7 4f 00 00       	callq  7580 <void test_type<long>()>
    25c9:	e8 92 50 00 00       	callq  7660 <void test_type<__int128>()>
    25ce:	e8 6d 51 00 00       	callq  7740 <void test_type<float>()>
    25d3:	e8 48 52 00 00       	callq  7820 <void test_type<double>()>
    25d8:	e8 23 53 00 00       	callq  7900 <void test_type<long double>()>
    25dd:	e8 fe 53 00 00       	callq  79e0 <void test_type<__float128>()>
    25e2:	31 c0                	xor    %eax,%eax
    25e4:	48 83 c4 08          	add    $0x8,%rsp
    25e8:	c3                   	retq   
    25e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000025f0 <_GLOBAL__sub_I__ZN2ec8demangleB5cxx11EPKc>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	e9 67 ff ff ff       	jmpq   2560 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>
    25f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002600 <_start>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	31 ed                	xor    %ebp,%ebp
    2606:	49 89 d1             	mov    %rdx,%r9
    2609:	5e                   	pop    %rsi
    260a:	48 89 e2             	mov    %rsp,%rdx
    260d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2611:	50                   	push   %rax
    2612:	54                   	push   %rsp
    2613:	4c 8d 05 16 55 00 00 	lea    0x5516(%rip),%r8        # 7b30 <__libc_csu_fini>
    261a:	48 8d 0d 9f 54 00 00 	lea    0x549f(%rip),%rcx        # 7ac0 <__libc_csu_init>
    2621:	48 8d 3d 68 ff ff ff 	lea    -0x98(%rip),%rdi        # 2590 <main>
    2628:	ff 15 a2 99 00 00    	callq  *0x99a2(%rip)        # bfd0 <__libc_start_main@GLIBC_2.2.5>
    262e:	f4                   	hlt    
    262f:	90                   	nop

0000000000002630 <deregister_tm_clones>:
    2630:	48 8d 3d e9 99 00 00 	lea    0x99e9(%rip),%rdi        # c020 <__TMC_END__>
    2637:	48 8d 05 e2 99 00 00 	lea    0x99e2(%rip),%rax        # c020 <__TMC_END__>
    263e:	48 39 f8             	cmp    %rdi,%rax
    2641:	74 15                	je     2658 <deregister_tm_clones+0x28>
    2643:	48 8b 05 6e 99 00 00 	mov    0x996e(%rip),%rax        # bfb8 <_ITM_deregisterTMCloneTable>
    264a:	48 85 c0             	test   %rax,%rax
    264d:	74 09                	je     2658 <deregister_tm_clones+0x28>
    264f:	ff e0                	jmpq   *%rax
    2651:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2658:	c3                   	retq   
    2659:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002660 <register_tm_clones>:
    2660:	48 8d 3d b9 99 00 00 	lea    0x99b9(%rip),%rdi        # c020 <__TMC_END__>
    2667:	48 8d 35 b2 99 00 00 	lea    0x99b2(%rip),%rsi        # c020 <__TMC_END__>
    266e:	48 29 fe             	sub    %rdi,%rsi
    2671:	48 89 f0             	mov    %rsi,%rax
    2674:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2678:	48 c1 f8 03          	sar    $0x3,%rax
    267c:	48 01 c6             	add    %rax,%rsi
    267f:	48 d1 fe             	sar    %rsi
    2682:	74 14                	je     2698 <register_tm_clones+0x38>
    2684:	48 8b 05 55 99 00 00 	mov    0x9955(%rip),%rax        # bfe0 <_ITM_registerTMCloneTable>
    268b:	48 85 c0             	test   %rax,%rax
    268e:	74 08                	je     2698 <register_tm_clones+0x38>
    2690:	ff e0                	jmpq   *%rax
    2692:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2698:	c3                   	retq   
    2699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000026a0 <__do_global_dtors_aux>:
    26a0:	f3 0f 1e fa          	endbr64 
    26a4:	80 3d 75 99 00 00 00 	cmpb   $0x0,0x9975(%rip)        # c020 <__TMC_END__>
    26ab:	75 2b                	jne    26d8 <__do_global_dtors_aux+0x38>
    26ad:	55                   	push   %rbp
    26ae:	48 83 3d ba 98 00 00 	cmpq   $0x0,0x98ba(%rip)        # bf70 <__cxa_finalize@GLIBC_2.2.5>
    26b5:	00 
    26b6:	48 89 e5             	mov    %rsp,%rbp
    26b9:	74 0c                	je     26c7 <__do_global_dtors_aux+0x27>
    26bb:	48 8b 3d 46 99 00 00 	mov    0x9946(%rip),%rdi        # c008 <__dso_handle>
    26c2:	e8 79 fb ff ff       	callq  2240 <__cxa_finalize@plt>
    26c7:	e8 64 ff ff ff       	callq  2630 <deregister_tm_clones>
    26cc:	c6 05 4d 99 00 00 01 	movb   $0x1,0x994d(%rip)        # c020 <__TMC_END__>
    26d3:	5d                   	pop    %rbp
    26d4:	c3                   	retq   
    26d5:	0f 1f 00             	nopl   (%rax)
    26d8:	c3                   	retq   
    26d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000026e0 <frame_dummy>:
    26e0:	f3 0f 1e fa          	endbr64 
    26e4:	e9 77 ff ff ff       	jmpq   2660 <register_tm_clones>
    26e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000026f0 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>:
    26f0:	89 f8                	mov    %edi,%eax
    26f2:	21 f0                	and    %esi,%eax
    26f4:	c3                   	retq   
    26f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    26fc:	00 00 00 00 

0000000000002700 <std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>:
    2700:	89 f8                	mov    %edi,%eax
    2702:	09 f0                	or     %esi,%eax
    2704:	c3                   	retq   
    2705:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    270c:	00 00 00 00 

0000000000002710 <std::setw(int)>:
    2710:	89 f8                	mov    %edi,%eax
    2712:	c3                   	retq   
    2713:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    271a:	00 00 00 00 
    271e:	66 90                	xchg   %ax,%ax

0000000000002720 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2720:	f3 0f 1e fa          	endbr64 
    2724:	41 54                	push   %r12
    2726:	49 89 fb             	mov    %rdi,%r11
    2729:	4c 8d a2 00 80 00 00 	lea    0x8000(%rdx),%r12
    2730:	55                   	push   %rbp
    2731:	4c 8d 92 00 81 00 00 	lea    0x8100(%rdx),%r10
    2738:	31 ed                	xor    %ebp,%ebp
    273a:	53                   	push   %rbx
    273b:	48 89 f3             	mov    %rsi,%rbx
    273e:	49 89 e9             	mov    %rbp,%r9
    2741:	49 c1 e1 08          	shl    $0x8,%r9
    2745:	4c 89 e7             	mov    %r12,%rdi
    2748:	49 01 d9             	add    %rbx,%r9
    274b:	4d 89 d8             	mov    %r11,%r8
    274e:	41 0f b7 30          	movzwl (%r8),%esi
    2752:	48 8d 87 00 80 ff ff 	lea    -0x8000(%rdi),%rax
    2759:	4c 89 c9             	mov    %r9,%rcx
    275c:	0f 1f 40 00          	nopl   0x0(%rax)
    2760:	0f b7 11             	movzwl (%rcx),%edx
    2763:	48 05 00 01 00 00    	add    $0x100,%rax
    2769:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    2770:	ff 
    2771:	48 83 c1 02          	add    $0x2,%rcx
    2775:	01 d6                	add    %edx,%esi
    2777:	66 41 89 30          	mov    %si,(%r8)
    277b:	48 39 c7             	cmp    %rax,%rdi
    277e:	75 e0                	jne    2760 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    2780:	48 83 c7 02          	add    $0x2,%rdi
    2784:	49 83 c0 02          	add    $0x2,%r8
    2788:	49 39 fa             	cmp    %rdi,%r10
    278b:	75 c1                	jne    274e <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x2e>
    278d:	48 ff c5             	inc    %rbp
    2790:	49 81 c3 00 01 00 00 	add    $0x100,%r11
    2797:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    279e:	75 9e                	jne    273e <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x1e>
    27a0:	5b                   	pop    %rbx
    27a1:	5d                   	pop    %rbp
    27a2:	41 5c                	pop    %r12
    27a4:	c3                   	retq   
    27a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    27ac:	00 00 00 00 

00000000000027b0 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>:
    27b0:	f3 0f 1e fa          	endbr64 
    27b4:	55                   	push   %rbp
    27b5:	49 89 f3             	mov    %rsi,%r11
    27b8:	48 89 f9             	mov    %rdi,%rcx
    27bb:	48 89 e5             	mov    %rsp,%rbp
    27be:	41 54                	push   %r12
    27c0:	49 81 c3 02 80 00 00 	add    $0x8002,%r11
    27c7:	49 89 d4             	mov    %rdx,%r12
    27ca:	53                   	push   %rbx
    27cb:	4c 8d 92 00 80 00 00 	lea    0x8000(%rdx),%r10
    27d2:	48 8d 5e 02          	lea    0x2(%rsi),%rbx
    27d6:	4c 89 e6             	mov    %r12,%rsi
    27d9:	48 8d 7b fe          	lea    -0x2(%rbx),%rdi
    27dd:	49 89 d8             	mov    %rbx,%r8
    27e0:	4c 8d 89 00 01 00 00 	lea    0x100(%rcx),%r9
    27e7:	e9 c6 00 00 00       	jmpq   28b2 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x102>
    27ec:	48 8d 56 02          	lea    0x2(%rsi),%rdx
    27f0:	48 89 c8             	mov    %rcx,%rax
    27f3:	48 29 d0             	sub    %rdx,%rax
    27f6:	48 83 f8 1c          	cmp    $0x1c,%rax
    27fa:	0f 86 ca 00 00 00    	jbe    28ca <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x11a>
    2800:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    2805:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    2809:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    280d:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    2811:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    2816:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    281b:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    2820:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    2825:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    282a:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    282f:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    2834:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    2839:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    283e:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    2845:	00 
    2846:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    284d:	00 
    284e:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2855:	00 
    2856:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    285d:	00 
    285e:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    2865:	00 
    2866:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    286d:	00 
    286e:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    2875:	00 
    2876:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    287d:	00 
    287e:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    2885:	00 
    2886:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    288d:	00 
    288e:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    2895:	00 
    2896:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    289d:	00 
    289e:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    28a5:	49 83 c0 02          	add    $0x2,%r8
    28a9:	48 83 c7 02          	add    $0x2,%rdi
    28ad:	4c 39 d6             	cmp    %r10,%rsi
    28b0:	74 37                	je     28e9 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x139>
    28b2:	49 8d 40 fe          	lea    -0x2(%r8),%rax
    28b6:	4c 39 c8             	cmp    %r9,%rax
    28b9:	0f 93 c2             	setae  %dl
    28bc:	4c 39 c1             	cmp    %r8,%rcx
    28bf:	0f 93 c0             	setae  %al
    28c2:	08 c2                	or     %al,%dl
    28c4:	0f 85 22 ff ff ff    	jne    27ec <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x3c>
    28ca:	31 c0                	xor    %eax,%eax
    28cc:	0f 1f 40 00          	nopl   0x0(%rax)
    28d0:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    28d4:	66 0f af 17          	imul   (%rdi),%dx
    28d8:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    28dc:	48 ff c0             	inc    %rax
    28df:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    28e5:	75 e9                	jne    28d0 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    28e7:	eb b5                	jmp    289e <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xee>
    28e9:	48 81 c3 00 01 00 00 	add    $0x100,%rbx
    28f0:	4c 39 db             	cmp    %r11,%rbx
    28f3:	74 08                	je     28fd <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x14d>
    28f5:	4c 89 c9             	mov    %r9,%rcx
    28f8:	e9 d9 fe ff ff       	jmpq   27d6 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    28fd:	c5 f8 77             	vzeroupper 
    2900:	5b                   	pop    %rbx
    2901:	41 5c                	pop    %r12
    2903:	5d                   	pop    %rbp
    2904:	c3                   	retq   
    2905:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    290c:	00 00 00 00 

0000000000002910 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2910:	f3 0f 1e fa          	endbr64 
    2914:	41 56                	push   %r14
    2916:	4c 8d 82 00 80 00 00 	lea    0x8000(%rdx),%r8
    291d:	49 89 f6             	mov    %rsi,%r14
    2920:	41 55                	push   %r13
    2922:	4c 8d af 00 80 00 00 	lea    0x8000(%rdi),%r13
    2929:	41 54                	push   %r12
    292b:	49 89 d4             	mov    %rdx,%r12
    292e:	55                   	push   %rbp
    292f:	31 ed                	xor    %ebp,%ebp
    2931:	53                   	push   %rbx
    2932:	48 89 fb             	mov    %rdi,%rbx
    2935:	4c 8d 54 2d 00       	lea    0x0(%rbp,%rbp,1),%r10
    293a:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    293e:	4d 89 f1             	mov    %r14,%r9
    2941:	4d 01 ea             	add    %r13,%r10
    2944:	48 89 df             	mov    %rbx,%rdi
    2947:	0f b7 37             	movzwl (%rdi),%esi
    294a:	4c 89 d8             	mov    %r11,%rax
    294d:	4c 89 c9             	mov    %r9,%rcx
    2950:	0f b7 11             	movzwl (%rcx),%edx
    2953:	48 05 00 01 00 00    	add    $0x100,%rax
    2959:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    2960:	ff 
    2961:	48 83 c1 02          	add    $0x2,%rcx
    2965:	01 d6                	add    %edx,%esi
    2967:	66 89 37             	mov    %si,(%rdi)
    296a:	49 39 c0             	cmp    %rax,%r8
    296d:	75 e1                	jne    2950 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    296f:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2976:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    297d:	49 39 fa             	cmp    %rdi,%r10
    2980:	75 c5                	jne    2947 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x37>
    2982:	48 ff c5             	inc    %rbp
    2985:	48 83 c3 02          	add    $0x2,%rbx
    2989:	49 83 c0 02          	add    $0x2,%r8
    298d:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    2994:	75 9f                	jne    2935 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x25>
    2996:	5b                   	pop    %rbx
    2997:	5d                   	pop    %rbp
    2998:	41 5c                	pop    %r12
    299a:	41 5d                	pop    %r13
    299c:	41 5e                	pop    %r14
    299e:	c3                   	retq   
    299f:	90                   	nop

00000000000029a0 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>:
    29a0:	f3 0f 1e fa          	endbr64 
    29a4:	55                   	push   %rbp
    29a5:	48 89 f8             	mov    %rdi,%rax
    29a8:	48 89 f5             	mov    %rsi,%rbp
    29ab:	53                   	push   %rbx
    29ac:	48 8d bf 00 80 00 00 	lea    0x8000(%rdi),%rdi
    29b3:	48 89 d3             	mov    %rdx,%rbx
    29b6:	4c 8d 98 00 81 00 00 	lea    0x8100(%rax),%r11
    29bd:	4c 8d 8e 00 01 00 00 	lea    0x100(%rsi),%r9
    29c4:	49 89 e8             	mov    %rbp,%r8
    29c7:	48 89 de             	mov    %rbx,%rsi
    29ca:	4c 8d 97 00 80 ff ff 	lea    -0x8000(%rdi),%r10
    29d1:	4c 89 d0             	mov    %r10,%rax
    29d4:	4c 89 c1             	mov    %r8,%rcx
    29d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    29de:	00 00 
    29e0:	0f b7 11             	movzwl (%rcx),%edx
    29e3:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    29ea:	66 0f af 16          	imul   (%rsi),%dx
    29ee:	66 01 10             	add    %dx,(%rax)
    29f1:	48 05 00 01 00 00    	add    $0x100,%rax
    29f7:	48 39 c7             	cmp    %rax,%rdi
    29fa:	75 e4                	jne    29e0 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    29fc:	49 83 c0 02          	add    $0x2,%r8
    2a00:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2a07:	4d 39 c1             	cmp    %r8,%r9
    2a0a:	75 c5                	jne    29d1 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x31>
    2a0c:	48 83 c7 02          	add    $0x2,%rdi
    2a10:	48 83 c3 02          	add    $0x2,%rbx
    2a14:	49 39 fb             	cmp    %rdi,%r11
    2a17:	75 ab                	jne    29c4 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x24>
    2a19:	5b                   	pop    %rbx
    2a1a:	5d                   	pop    %rbp
    2a1b:	c3                   	retq   
    2a1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002a20 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2a20:	f3 0f 1e fa          	endbr64 
    2a24:	55                   	push   %rbp
    2a25:	4c 8d 8e 00 80 00 00 	lea    0x8000(%rsi),%r9
    2a2c:	49 89 fa             	mov    %rdi,%r10
    2a2f:	48 89 e5             	mov    %rsp,%rbp
    2a32:	48 89 d6             	mov    %rdx,%rsi
    2a35:	53                   	push   %rbx
    2a36:	31 db                	xor    %ebx,%ebx
    2a38:	4d 89 d0             	mov    %r10,%r8
    2a3b:	49 8d b9 00 80 ff ff 	lea    -0x8000(%r9),%rdi
    2a42:	4c 8d 5e 02          	lea    0x2(%rsi),%r11
    2a46:	e9 ba 00 00 00       	jmpq   2b05 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe5>
    2a4b:	48 89 c8             	mov    %rcx,%rax
    2a4e:	4c 29 d8             	sub    %r11,%rax
    2a51:	48 83 f8 1c          	cmp    $0x1c,%rax
    2a55:	0f 86 cc 00 00 00    	jbe    2b27 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x107>
    2a5b:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    2a60:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2a67:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    2a6b:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    2a6f:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    2a73:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    2a78:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    2a7d:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    2a82:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    2a87:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    2a8c:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    2a91:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    2a96:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    2a9b:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2aa0:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    2aa7:	00 
    2aa8:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    2aaf:	00 
    2ab0:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2ab7:	00 
    2ab8:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    2abf:	00 
    2ac0:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    2ac7:	00 
    2ac8:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    2acf:	00 
    2ad0:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    2ad7:	00 
    2ad8:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    2adf:	00 
    2ae0:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    2ae7:	00 
    2ae8:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    2aef:	00 
    2af0:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    2af7:	00 
    2af8:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    2aff:	00 
    2b00:	49 39 f9             	cmp    %rdi,%r9
    2b03:	74 4e                	je     2b53 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x133>
    2b05:	4c 89 c1             	mov    %r8,%rcx
    2b08:	48 8d 47 02          	lea    0x2(%rdi),%rax
    2b0c:	49 81 c0 00 01 00 00 	add    $0x100,%r8
    2b13:	48 39 c1             	cmp    %rax,%rcx
    2b16:	0f 93 c2             	setae  %dl
    2b19:	4c 39 c7             	cmp    %r8,%rdi
    2b1c:	0f 93 c0             	setae  %al
    2b1f:	08 c2                	or     %al,%dl
    2b21:	0f 85 24 ff ff ff    	jne    2a4b <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x2b>
    2b27:	31 c0                	xor    %eax,%eax
    2b29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2b30:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    2b34:	66 0f af 17          	imul   (%rdi),%dx
    2b38:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    2b3c:	48 ff c0             	inc    %rax
    2b3f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2b45:	75 e9                	jne    2b30 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x110>
    2b47:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    2b4e:	49 39 f9             	cmp    %rdi,%r9
    2b51:	75 b2                	jne    2b05 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe5>
    2b53:	48 ff c3             	inc    %rbx
    2b56:	49 83 c1 02          	add    $0x2,%r9
    2b5a:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2b61:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    2b68:	0f 85 ca fe ff ff    	jne    2a38 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x18>
    2b6e:	c5 f8 77             	vzeroupper 
    2b71:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2b75:	c9                   	leaveq 
    2b76:	c3                   	retq   
    2b77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2b7e:	00 00 

0000000000002b80 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2b80:	f3 0f 1e fa          	endbr64 
    2b84:	55                   	push   %rbp
    2b85:	49 89 d2             	mov    %rdx,%r10
    2b88:	45 31 db             	xor    %r11d,%r11d
    2b8b:	53                   	push   %rbx
    2b8c:	48 8d af 00 80 00 00 	lea    0x8000(%rdi),%rbp
    2b93:	48 89 f3             	mov    %rsi,%rbx
    2b96:	4c 8d 87 00 81 00 00 	lea    0x8100(%rdi),%r8
    2b9d:	48 89 ee             	mov    %rbp,%rsi
    2ba0:	4e 8d 0c 5b          	lea    (%rbx,%r11,2),%r9
    2ba4:	4c 89 d7             	mov    %r10,%rdi
    2ba7:	48 8d 86 00 80 ff ff 	lea    -0x8000(%rsi),%rax
    2bae:	4c 89 c9             	mov    %r9,%rcx
    2bb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2bb8:	0f b7 11             	movzwl (%rcx),%edx
    2bbb:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    2bc2:	66 0f af 17          	imul   (%rdi),%dx
    2bc6:	66 01 10             	add    %dx,(%rax)
    2bc9:	48 05 00 01 00 00    	add    $0x100,%rax
    2bcf:	48 39 c6             	cmp    %rax,%rsi
    2bd2:	75 e4                	jne    2bb8 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x38>
    2bd4:	48 83 c6 02          	add    $0x2,%rsi
    2bd8:	48 83 c7 02          	add    $0x2,%rdi
    2bdc:	49 39 f0             	cmp    %rsi,%r8
    2bdf:	75 c6                	jne    2ba7 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x27>
    2be1:	49 ff c3             	inc    %r11
    2be4:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    2beb:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    2bf2:	75 a9                	jne    2b9d <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x1d>
    2bf4:	5b                   	pop    %rbx
    2bf5:	5d                   	pop    %rbp
    2bf6:	c3                   	retq   
    2bf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2bfe:	00 00 

0000000000002c00 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2c00:	f3 0f 1e fa          	endbr64 
    2c04:	41 54                	push   %r12
    2c06:	49 89 fb             	mov    %rdi,%r11
    2c09:	4c 8d a2 00 00 01 00 	lea    0x10000(%rdx),%r12
    2c10:	55                   	push   %rbp
    2c11:	4c 8d 92 00 02 01 00 	lea    0x10200(%rdx),%r10
    2c18:	31 ed                	xor    %ebp,%ebp
    2c1a:	53                   	push   %rbx
    2c1b:	48 89 f3             	mov    %rsi,%rbx
    2c1e:	49 89 e9             	mov    %rbp,%r9
    2c21:	49 c1 e1 09          	shl    $0x9,%r9
    2c25:	4c 89 e7             	mov    %r12,%rdi
    2c28:	49 01 d9             	add    %rbx,%r9
    2c2b:	4d 89 d8             	mov    %r11,%r8
    2c2e:	41 8b 30             	mov    (%r8),%esi
    2c31:	48 8d 87 00 00 ff ff 	lea    -0x10000(%rdi),%rax
    2c38:	4c 89 c9             	mov    %r9,%rcx
    2c3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2c40:	8b 11                	mov    (%rcx),%edx
    2c42:	48 05 00 02 00 00    	add    $0x200,%rax
    2c48:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    2c4f:	48 83 c1 04          	add    $0x4,%rcx
    2c53:	01 d6                	add    %edx,%esi
    2c55:	41 89 30             	mov    %esi,(%r8)
    2c58:	48 39 c7             	cmp    %rax,%rdi
    2c5b:	75 e3                	jne    2c40 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x40>
    2c5d:	48 83 c7 04          	add    $0x4,%rdi
    2c61:	49 83 c0 04          	add    $0x4,%r8
    2c65:	49 39 fa             	cmp    %rdi,%r10
    2c68:	75 c4                	jne    2c2e <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x2e>
    2c6a:	48 ff c5             	inc    %rbp
    2c6d:	49 81 c3 00 02 00 00 	add    $0x200,%r11
    2c74:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    2c7b:	75 a1                	jne    2c1e <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x1e>
    2c7d:	5b                   	pop    %rbx
    2c7e:	5d                   	pop    %rbp
    2c7f:	41 5c                	pop    %r12
    2c81:	c3                   	retq   
    2c82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c89:	00 00 00 00 
    2c8d:	0f 1f 00             	nopl   (%rax)

0000000000002c90 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2c90:	f3 0f 1e fa          	endbr64 
    2c94:	55                   	push   %rbp
    2c95:	49 89 f3             	mov    %rsi,%r11
    2c98:	48 89 f9             	mov    %rdi,%rcx
    2c9b:	48 89 e5             	mov    %rsp,%rbp
    2c9e:	41 54                	push   %r12
    2ca0:	49 81 c3 04 00 01 00 	add    $0x10004,%r11
    2ca7:	49 89 d4             	mov    %rdx,%r12
    2caa:	53                   	push   %rbx
    2cab:	4c 8d 92 00 00 01 00 	lea    0x10000(%rdx),%r10
    2cb2:	48 8d 5e 04          	lea    0x4(%rsi),%rbx
    2cb6:	4c 89 e6             	mov    %r12,%rsi
    2cb9:	48 8d 7b fc          	lea    -0x4(%rbx),%rdi
    2cbd:	49 89 d8             	mov    %rbx,%r8
    2cc0:	4c 8d 89 00 02 00 00 	lea    0x200(%rcx),%r9
    2cc7:	e9 96 01 00 00       	jmpq   2e62 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1d2>
    2ccc:	48 8d 56 04          	lea    0x4(%rsi),%rdx
    2cd0:	48 89 c8             	mov    %rcx,%rax
    2cd3:	48 29 d0             	sub    %rdx,%rax
    2cd6:	48 83 f8 18          	cmp    $0x18,%rax
    2cda:	0f 86 9a 01 00 00    	jbe    2e7a <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ea>
    2ce0:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    2ce5:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    2cea:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    2cee:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    2cf2:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    2cf8:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    2cfd:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    2d02:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    2d08:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    2d0d:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    2d12:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    2d18:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    2d1d:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    2d22:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    2d29:	00 00 
    2d2b:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    2d32:	00 
    2d33:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    2d3a:	00 
    2d3b:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    2d42:	00 00 
    2d44:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    2d4b:	00 
    2d4c:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    2d53:	00 
    2d54:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    2d5b:	00 00 
    2d5d:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    2d64:	00 
    2d65:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    2d6c:	00 
    2d6d:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    2d74:	00 00 
    2d76:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    2d7d:	00 
    2d7e:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    2d85:	00 
    2d86:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    2d8d:	00 00 
    2d8f:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    2d96:	00 
    2d97:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    2d9e:	00 
    2d9f:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    2da6:	00 00 
    2da8:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    2daf:	00 
    2db0:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    2db7:	00 
    2db8:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    2dbf:	00 00 
    2dc1:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    2dc8:	00 
    2dc9:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    2dd0:	00 
    2dd1:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    2dd8:	00 00 
    2dda:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    2de1:	00 
    2de2:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    2de9:	00 
    2dea:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    2df1:	00 00 
    2df3:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    2dfa:	00 
    2dfb:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    2e02:	00 
    2e03:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    2e0a:	00 00 
    2e0c:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    2e13:	00 
    2e14:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    2e1b:	00 
    2e1c:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    2e23:	00 00 
    2e25:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    2e2c:	00 
    2e2d:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    2e34:	00 
    2e35:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    2e3c:	00 00 
    2e3e:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    2e45:	00 
    2e46:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    2e4d:	00 
    2e4e:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    2e55:	49 83 c0 04          	add    $0x4,%r8
    2e59:	48 83 c7 04          	add    $0x4,%rdi
    2e5d:	49 39 f2             	cmp    %rsi,%r10
    2e60:	74 34                	je     2e96 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x206>
    2e62:	49 8d 40 fc          	lea    -0x4(%r8),%rax
    2e66:	4c 39 c8             	cmp    %r9,%rax
    2e69:	0f 93 c2             	setae  %dl
    2e6c:	4c 39 c1             	cmp    %r8,%rcx
    2e6f:	0f 93 c0             	setae  %al
    2e72:	08 c2                	or     %al,%dl
    2e74:	0f 85 52 fe ff ff    	jne    2ccc <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x3c>
    2e7a:	31 c0                	xor    %eax,%eax
    2e7c:	0f 1f 40 00          	nopl   0x0(%rax)
    2e80:	8b 17                	mov    (%rdi),%edx
    2e82:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    2e86:	01 14 81             	add    %edx,(%rcx,%rax,4)
    2e89:	48 ff c0             	inc    %rax
    2e8c:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2e92:	75 ec                	jne    2e80 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    2e94:	eb b8                	jmp    2e4e <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1be>
    2e96:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    2e9d:	4c 39 db             	cmp    %r11,%rbx
    2ea0:	74 08                	je     2eaa <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x21a>
    2ea2:	4c 89 c9             	mov    %r9,%rcx
    2ea5:	e9 0c fe ff ff       	jmpq   2cb6 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    2eaa:	c5 f8 77             	vzeroupper 
    2ead:	5b                   	pop    %rbx
    2eae:	41 5c                	pop    %r12
    2eb0:	5d                   	pop    %rbp
    2eb1:	c3                   	retq   
    2eb2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2eb9:	00 00 00 00 
    2ebd:	0f 1f 00             	nopl   (%rax)

0000000000002ec0 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2ec0:	f3 0f 1e fa          	endbr64 
    2ec4:	41 56                	push   %r14
    2ec6:	4c 8d 82 00 00 01 00 	lea    0x10000(%rdx),%r8
    2ecd:	49 89 f6             	mov    %rsi,%r14
    2ed0:	41 55                	push   %r13
    2ed2:	4c 8d af 00 00 01 00 	lea    0x10000(%rdi),%r13
    2ed9:	41 54                	push   %r12
    2edb:	49 89 d4             	mov    %rdx,%r12
    2ede:	55                   	push   %rbp
    2edf:	31 ed                	xor    %ebp,%ebp
    2ee1:	53                   	push   %rbx
    2ee2:	48 89 fb             	mov    %rdi,%rbx
    2ee5:	4c 8d 14 ad 00 00 00 	lea    0x0(,%rbp,4),%r10
    2eec:	00 
    2eed:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    2ef1:	4d 89 f1             	mov    %r14,%r9
    2ef4:	4d 01 ea             	add    %r13,%r10
    2ef7:	48 89 df             	mov    %rbx,%rdi
    2efa:	8b 37                	mov    (%rdi),%esi
    2efc:	4c 89 d8             	mov    %r11,%rax
    2eff:	4c 89 c9             	mov    %r9,%rcx
    2f02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2f08:	8b 11                	mov    (%rcx),%edx
    2f0a:	48 05 00 02 00 00    	add    $0x200,%rax
    2f10:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    2f17:	48 83 c1 04          	add    $0x4,%rcx
    2f1b:	01 d6                	add    %edx,%esi
    2f1d:	89 37                	mov    %esi,(%rdi)
    2f1f:	4c 39 c0             	cmp    %r8,%rax
    2f22:	75 e4                	jne    2f08 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x48>
    2f24:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    2f2b:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    2f32:	4c 39 d7             	cmp    %r10,%rdi
    2f35:	75 c3                	jne    2efa <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x3a>
    2f37:	48 ff c5             	inc    %rbp
    2f3a:	48 83 c3 04          	add    $0x4,%rbx
    2f3e:	4c 8d 40 04          	lea    0x4(%rax),%r8
    2f42:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    2f49:	75 9a                	jne    2ee5 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x25>
    2f4b:	5b                   	pop    %rbx
    2f4c:	5d                   	pop    %rbp
    2f4d:	41 5c                	pop    %r12
    2f4f:	41 5d                	pop    %r13
    2f51:	41 5e                	pop    %r14
    2f53:	c3                   	retq   
    2f54:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f5b:	00 00 00 00 
    2f5f:	90                   	nop

0000000000002f60 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2f60:	f3 0f 1e fa          	endbr64 
    2f64:	55                   	push   %rbp
    2f65:	48 89 f8             	mov    %rdi,%rax
    2f68:	48 89 f5             	mov    %rsi,%rbp
    2f6b:	53                   	push   %rbx
    2f6c:	48 8d bf 00 00 01 00 	lea    0x10000(%rdi),%rdi
    2f73:	48 89 d3             	mov    %rdx,%rbx
    2f76:	4c 8d 98 00 02 01 00 	lea    0x10200(%rax),%r11
    2f7d:	4c 8d 8e 00 02 00 00 	lea    0x200(%rsi),%r9
    2f84:	49 89 e8             	mov    %rbp,%r8
    2f87:	48 89 de             	mov    %rbx,%rsi
    2f8a:	4c 8d 97 00 00 ff ff 	lea    -0x10000(%rdi),%r10
    2f91:	4c 89 d0             	mov    %r10,%rax
    2f94:	4c 89 c1             	mov    %r8,%rcx
    2f97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2f9e:	00 00 
    2fa0:	8b 11                	mov    (%rcx),%edx
    2fa2:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    2fa9:	0f af 16             	imul   (%rsi),%edx
    2fac:	01 10                	add    %edx,(%rax)
    2fae:	48 05 00 02 00 00    	add    $0x200,%rax
    2fb4:	48 39 f8             	cmp    %rdi,%rax
    2fb7:	75 e7                	jne    2fa0 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x40>
    2fb9:	49 83 c0 04          	add    $0x4,%r8
    2fbd:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    2fc4:	4d 39 c8             	cmp    %r9,%r8
    2fc7:	75 c8                	jne    2f91 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x31>
    2fc9:	48 8d 78 04          	lea    0x4(%rax),%rdi
    2fcd:	48 83 c3 04          	add    $0x4,%rbx
    2fd1:	4c 39 df             	cmp    %r11,%rdi
    2fd4:	75 ae                	jne    2f84 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x24>
    2fd6:	5b                   	pop    %rbx
    2fd7:	5d                   	pop    %rbp
    2fd8:	c3                   	retq   
    2fd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002fe0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2fe0:	f3 0f 1e fa          	endbr64 
    2fe4:	55                   	push   %rbp
    2fe5:	49 89 f0             	mov    %rsi,%r8
    2fe8:	49 89 fb             	mov    %rdi,%r11
    2feb:	48 89 e5             	mov    %rsp,%rbp
    2fee:	41 54                	push   %r12
    2ff0:	48 89 d6             	mov    %rdx,%rsi
    2ff3:	45 31 e4             	xor    %r12d,%r12d
    2ff6:	53                   	push   %rbx
    2ff7:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    2ffe:	4c 89 c3             	mov    %r8,%rbx
    3001:	4d 89 d8             	mov    %r11,%r8
    3004:	48 89 df             	mov    %rbx,%rdi
    3007:	4c 8d 56 04          	lea    0x4(%rsi),%r10
    300b:	e9 8a 01 00 00       	jmpq   319a <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ba>
    3010:	48 89 c8             	mov    %rcx,%rax
    3013:	4c 29 d0             	sub    %r10,%rax
    3016:	48 83 f8 18          	cmp    $0x18,%rax
    301a:	0f 86 9c 01 00 00    	jbe    31bc <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1dc>
    3020:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    3025:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    302c:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    3031:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    3035:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    3039:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    303f:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    3044:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    3049:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    304f:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    3054:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    3059:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    305f:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    3064:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    3069:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    3070:	00 00 
    3072:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    3079:	00 
    307a:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    3081:	00 
    3082:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    3089:	00 00 
    308b:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    3092:	00 
    3093:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    309a:	00 
    309b:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    30a2:	00 00 
    30a4:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    30ab:	00 
    30ac:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    30b3:	00 
    30b4:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    30bb:	00 00 
    30bd:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    30c4:	00 
    30c5:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    30cc:	00 
    30cd:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    30d4:	00 00 
    30d6:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    30dd:	00 
    30de:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    30e5:	00 
    30e6:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    30ed:	00 00 
    30ef:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    30f6:	00 
    30f7:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    30fe:	00 
    30ff:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    3106:	00 00 
    3108:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    310f:	00 
    3110:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    3117:	00 
    3118:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    311f:	00 00 
    3121:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    3128:	00 
    3129:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    3130:	00 
    3131:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    3138:	00 00 
    313a:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    3141:	00 
    3142:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    3149:	00 
    314a:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    3151:	00 00 
    3153:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    315a:	00 
    315b:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    3162:	00 
    3163:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    316a:	00 00 
    316c:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    3173:	00 
    3174:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    317b:	00 
    317c:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    3183:	00 00 
    3185:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    318c:	00 
    318d:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    3194:	00 
    3195:	4d 39 c1             	cmp    %r8,%r9
    3198:	74 46                	je     31e0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x200>
    319a:	4c 89 c1             	mov    %r8,%rcx
    319d:	48 8d 47 04          	lea    0x4(%rdi),%rax
    31a1:	49 81 c0 00 02 00 00 	add    $0x200,%r8
    31a8:	48 39 c1             	cmp    %rax,%rcx
    31ab:	0f 93 c2             	setae  %dl
    31ae:	4c 39 c7             	cmp    %r8,%rdi
    31b1:	0f 93 c0             	setae  %al
    31b4:	08 c2                	or     %al,%dl
    31b6:	0f 85 54 fe ff ff    	jne    3010 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    31bc:	31 c0                	xor    %eax,%eax
    31be:	66 90                	xchg   %ax,%ax
    31c0:	8b 17                	mov    (%rdi),%edx
    31c2:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    31c6:	01 14 81             	add    %edx,(%rcx,%rax,4)
    31c9:	48 ff c0             	inc    %rax
    31cc:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    31d2:	75 ec                	jne    31c0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1e0>
    31d4:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    31db:	4d 39 c1             	cmp    %r8,%r9
    31de:	75 ba                	jne    319a <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ba>
    31e0:	49 ff c4             	inc    %r12
    31e3:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    31ea:	48 83 c3 04          	add    $0x4,%rbx
    31ee:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    31f5:	0f 85 06 fe ff ff    	jne    3001 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x21>
    31fb:	c5 f8 77             	vzeroupper 
    31fe:	5b                   	pop    %rbx
    31ff:	41 5c                	pop    %r12
    3201:	5d                   	pop    %rbp
    3202:	c3                   	retq   
    3203:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    320a:	00 00 00 00 
    320e:	66 90                	xchg   %ax,%ax

0000000000003210 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3210:	f3 0f 1e fa          	endbr64 
    3214:	55                   	push   %rbp
    3215:	49 89 d2             	mov    %rdx,%r10
    3218:	45 31 db             	xor    %r11d,%r11d
    321b:	53                   	push   %rbx
    321c:	48 8d af 00 00 01 00 	lea    0x10000(%rdi),%rbp
    3223:	48 89 f3             	mov    %rsi,%rbx
    3226:	4c 8d 87 00 02 01 00 	lea    0x10200(%rdi),%r8
    322d:	48 89 ee             	mov    %rbp,%rsi
    3230:	4e 8d 0c 9b          	lea    (%rbx,%r11,4),%r9
    3234:	4c 89 d7             	mov    %r10,%rdi
    3237:	48 8d 86 00 00 ff ff 	lea    -0x10000(%rsi),%rax
    323e:	4c 89 c9             	mov    %r9,%rcx
    3241:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3248:	8b 11                	mov    (%rcx),%edx
    324a:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3251:	0f af 17             	imul   (%rdi),%edx
    3254:	01 10                	add    %edx,(%rax)
    3256:	48 05 00 02 00 00    	add    $0x200,%rax
    325c:	48 39 c6             	cmp    %rax,%rsi
    325f:	75 e7                	jne    3248 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x38>
    3261:	48 83 c6 04          	add    $0x4,%rsi
    3265:	48 83 c7 04          	add    $0x4,%rdi
    3269:	4c 39 c6             	cmp    %r8,%rsi
    326c:	75 c9                	jne    3237 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x27>
    326e:	49 ff c3             	inc    %r11
    3271:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    3278:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    327f:	75 ac                	jne    322d <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x1d>
    3281:	5b                   	pop    %rbx
    3282:	5d                   	pop    %rbp
    3283:	c3                   	retq   
    3284:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    328b:	00 00 00 00 
    328f:	90                   	nop

0000000000003290 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3290:	f3 0f 1e fa          	endbr64 
    3294:	41 54                	push   %r12
    3296:	49 89 fb             	mov    %rdi,%r11
    3299:	4c 8d a2 00 00 02 00 	lea    0x20000(%rdx),%r12
    32a0:	55                   	push   %rbp
    32a1:	4c 8d 92 00 04 02 00 	lea    0x20400(%rdx),%r10
    32a8:	31 ed                	xor    %ebp,%ebp
    32aa:	53                   	push   %rbx
    32ab:	48 89 f3             	mov    %rsi,%rbx
    32ae:	49 89 e9             	mov    %rbp,%r9
    32b1:	49 c1 e1 0a          	shl    $0xa,%r9
    32b5:	4c 89 e7             	mov    %r12,%rdi
    32b8:	49 01 d9             	add    %rbx,%r9
    32bb:	4d 89 d8             	mov    %r11,%r8
    32be:	49 8b 30             	mov    (%r8),%rsi
    32c1:	48 8d 87 00 00 fe ff 	lea    -0x20000(%rdi),%rax
    32c8:	4c 89 c9             	mov    %r9,%rcx
    32cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    32d0:	48 8b 11             	mov    (%rcx),%rdx
    32d3:	48 05 00 04 00 00    	add    $0x400,%rax
    32d9:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    32e0:	ff 
    32e1:	48 83 c1 08          	add    $0x8,%rcx
    32e5:	48 01 d6             	add    %rdx,%rsi
    32e8:	49 89 30             	mov    %rsi,(%r8)
    32eb:	48 39 c7             	cmp    %rax,%rdi
    32ee:	75 e0                	jne    32d0 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x40>
    32f0:	48 83 c7 08          	add    $0x8,%rdi
    32f4:	49 83 c0 08          	add    $0x8,%r8
    32f8:	49 39 fa             	cmp    %rdi,%r10
    32fb:	75 c1                	jne    32be <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    32fd:	48 ff c5             	inc    %rbp
    3300:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    3307:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    330e:	75 9e                	jne    32ae <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x1e>
    3310:	5b                   	pop    %rbx
    3311:	5d                   	pop    %rbp
    3312:	41 5c                	pop    %r12
    3314:	c3                   	retq   
    3315:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    331c:	00 00 00 00 

0000000000003320 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3320:	f3 0f 1e fa          	endbr64 
    3324:	55                   	push   %rbp
    3325:	4c 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%r11
    332c:	48 89 e5             	mov    %rsp,%rbp
    332f:	41 56                	push   %r14
    3331:	45 31 f6             	xor    %r14d,%r14d
    3334:	41 55                	push   %r13
    3336:	49 89 d5             	mov    %rdx,%r13
    3339:	41 54                	push   %r12
    333b:	49 89 fc             	mov    %rdi,%r12
    333e:	53                   	push   %rbx
    333f:	48 8d 5e 08          	lea    0x8(%rsi),%rbx
    3343:	48 89 fe             	mov    %rdi,%rsi
    3346:	4c 89 e9             	mov    %r13,%rcx
    3349:	4c 8d 43 f8          	lea    -0x8(%rbx),%r8
    334d:	4b 8d 3c f4          	lea    (%r12,%r14,8),%rdi
    3351:	49 89 d9             	mov    %rbx,%r9
    3354:	4c 8d 96 00 04 00 00 	lea    0x400(%rsi),%r10
    335b:	49 8d 41 f8          	lea    -0x8(%r9),%rax
    335f:	4c 39 d0             	cmp    %r10,%rax
    3362:	0f 93 c2             	setae  %dl
    3365:	4c 39 ce             	cmp    %r9,%rsi
    3368:	0f 93 c0             	setae  %al
    336b:	08 c2                	or     %al,%dl
    336d:	0f 84 8a 00 00 00    	je     33fd <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xdd>
    3373:	48 8d 51 08          	lea    0x8(%rcx),%rdx
    3377:	48 89 f0             	mov    %rsi,%rax
    337a:	48 29 d0             	sub    %rdx,%rax
    337d:	48 83 f8 10          	cmp    $0x10,%rax
    3381:	76 7a                	jbe    33fd <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xdd>
    3383:	c4 c2 7d 59 18       	vpbroadcastq (%r8),%ymm3
    3388:	31 c0                	xor    %eax,%eax
    338a:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    338f:	90                   	nop
    3390:	c5 fe 6f 14 01       	vmovdqu (%rcx,%rax,1),%ymm2
    3395:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    339a:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    339e:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    33a2:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    33a6:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    33aa:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    33af:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    33b3:	c5 fd d4 04 07       	vpaddq (%rdi,%rax,1),%ymm0,%ymm0
    33b8:	c5 fe 7f 04 07       	vmovdqu %ymm0,(%rdi,%rax,1)
    33bd:	48 83 c0 20          	add    $0x20,%rax
    33c1:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    33c7:	75 c7                	jne    3390 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x70>
    33c9:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    33d0:	49 83 c1 08          	add    $0x8,%r9
    33d4:	49 83 c0 08          	add    $0x8,%r8
    33d8:	4c 39 d9             	cmp    %r11,%rcx
    33db:	0f 85 7a ff ff ff    	jne    335b <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x3b>
    33e1:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
    33e5:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    33ec:	49 81 fe 00 40 00 00 	cmp    $0x4000,%r14
    33f3:	74 24                	je     3419 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xf9>
    33f5:	4c 89 d6             	mov    %r10,%rsi
    33f8:	e9 49 ff ff ff       	jmpq   3346 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    33fd:	31 c0                	xor    %eax,%eax
    33ff:	90                   	nop
    3400:	49 8b 10             	mov    (%r8),%rdx
    3403:	48 0f af 14 c1       	imul   (%rcx,%rax,8),%rdx
    3408:	48 01 14 c6          	add    %rdx,(%rsi,%rax,8)
    340c:	48 ff c0             	inc    %rax
    340f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3415:	75 e9                	jne    3400 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xe0>
    3417:	eb b0                	jmp    33c9 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xa9>
    3419:	c5 f8 77             	vzeroupper 
    341c:	5b                   	pop    %rbx
    341d:	41 5c                	pop    %r12
    341f:	41 5d                	pop    %r13
    3421:	41 5e                	pop    %r14
    3423:	5d                   	pop    %rbp
    3424:	c3                   	retq   
    3425:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    342c:	00 00 00 00 

0000000000003430 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3430:	f3 0f 1e fa          	endbr64 
    3434:	41 56                	push   %r14
    3436:	4c 8d 82 00 00 02 00 	lea    0x20000(%rdx),%r8
    343d:	49 89 f6             	mov    %rsi,%r14
    3440:	41 55                	push   %r13
    3442:	4c 8d af 00 00 02 00 	lea    0x20000(%rdi),%r13
    3449:	41 54                	push   %r12
    344b:	49 89 d4             	mov    %rdx,%r12
    344e:	55                   	push   %rbp
    344f:	31 ed                	xor    %ebp,%ebp
    3451:	53                   	push   %rbx
    3452:	48 89 fb             	mov    %rdi,%rbx
    3455:	4c 8d 14 ed 00 00 00 	lea    0x0(,%rbp,8),%r10
    345c:	00 
    345d:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    3461:	4d 89 f1             	mov    %r14,%r9
    3464:	4d 01 ea             	add    %r13,%r10
    3467:	48 89 df             	mov    %rbx,%rdi
    346a:	48 8b 37             	mov    (%rdi),%rsi
    346d:	4c 89 d8             	mov    %r11,%rax
    3470:	4c 89 c9             	mov    %r9,%rcx
    3473:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3478:	48 8b 11             	mov    (%rcx),%rdx
    347b:	48 05 00 04 00 00    	add    $0x400,%rax
    3481:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    3488:	ff 
    3489:	48 83 c1 08          	add    $0x8,%rcx
    348d:	48 01 d6             	add    %rdx,%rsi
    3490:	48 89 37             	mov    %rsi,(%rdi)
    3493:	4c 39 c0             	cmp    %r8,%rax
    3496:	75 e0                	jne    3478 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x48>
    3498:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    349f:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    34a6:	4c 39 d7             	cmp    %r10,%rdi
    34a9:	75 bf                	jne    346a <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x3a>
    34ab:	48 ff c5             	inc    %rbp
    34ae:	48 83 c3 08          	add    $0x8,%rbx
    34b2:	4c 8d 40 08          	lea    0x8(%rax),%r8
    34b6:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    34bd:	75 96                	jne    3455 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x25>
    34bf:	5b                   	pop    %rbx
    34c0:	5d                   	pop    %rbp
    34c1:	41 5c                	pop    %r12
    34c3:	41 5d                	pop    %r13
    34c5:	41 5e                	pop    %r14
    34c7:	c3                   	retq   
    34c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    34cf:	00 

00000000000034d0 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>:
    34d0:	f3 0f 1e fa          	endbr64 
    34d4:	55                   	push   %rbp
    34d5:	48 89 f8             	mov    %rdi,%rax
    34d8:	48 89 f5             	mov    %rsi,%rbp
    34db:	53                   	push   %rbx
    34dc:	48 8d bf 00 00 02 00 	lea    0x20000(%rdi),%rdi
    34e3:	48 89 d3             	mov    %rdx,%rbx
    34e6:	4c 8d 98 00 04 02 00 	lea    0x20400(%rax),%r11
    34ed:	4c 8d 8e 00 04 00 00 	lea    0x400(%rsi),%r9
    34f4:	49 89 e8             	mov    %rbp,%r8
    34f7:	48 89 de             	mov    %rbx,%rsi
    34fa:	4c 8d 97 00 00 fe ff 	lea    -0x20000(%rdi),%r10
    3501:	4c 89 d0             	mov    %r10,%rax
    3504:	4c 89 c1             	mov    %r8,%rcx
    3507:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    350e:	00 00 
    3510:	48 8b 11             	mov    (%rcx),%rdx
    3513:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    351a:	48 0f af 16          	imul   (%rsi),%rdx
    351e:	48 01 10             	add    %rdx,(%rax)
    3521:	48 05 00 04 00 00    	add    $0x400,%rax
    3527:	48 39 f8             	cmp    %rdi,%rax
    352a:	75 e4                	jne    3510 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x40>
    352c:	49 83 c0 08          	add    $0x8,%r8
    3530:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3537:	4d 39 c8             	cmp    %r9,%r8
    353a:	75 c5                	jne    3501 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x31>
    353c:	48 8d 78 08          	lea    0x8(%rax),%rdi
    3540:	48 83 c3 08          	add    $0x8,%rbx
    3544:	4c 39 df             	cmp    %r11,%rdi
    3547:	75 ab                	jne    34f4 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x24>
    3549:	5b                   	pop    %rbx
    354a:	5d                   	pop    %rbp
    354b:	c3                   	retq   
    354c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003550 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3550:	f3 0f 1e fa          	endbr64 
    3554:	55                   	push   %rbp
    3555:	48 89 f0             	mov    %rsi,%rax
    3558:	4c 8d 8e 00 00 02 00 	lea    0x20000(%rsi),%r9
    355f:	48 89 e5             	mov    %rsp,%rbp
    3562:	49 89 fa             	mov    %rdi,%r10
    3565:	53                   	push   %rbx
    3566:	48 89 d6             	mov    %rdx,%rsi
    3569:	48 8d 98 00 04 02 00 	lea    0x20400(%rax),%rbx
    3570:	4d 89 d0             	mov    %r10,%r8
    3573:	49 8d b9 00 00 fe ff 	lea    -0x20000(%r9),%rdi
    357a:	4c 8d 5e 08          	lea    0x8(%rsi),%r11
    357e:	4c 89 c2             	mov    %r8,%rdx
    3581:	48 8d 47 08          	lea    0x8(%rdi),%rax
    3585:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    358c:	48 39 c2             	cmp    %rax,%rdx
    358f:	0f 93 c1             	setae  %cl
    3592:	4c 39 c7             	cmp    %r8,%rdi
    3595:	0f 93 c0             	setae  %al
    3598:	08 c1                	or     %al,%cl
    359a:	74 7e                	je     361a <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xca>
    359c:	48 89 d0             	mov    %rdx,%rax
    359f:	4c 29 d8             	sub    %r11,%rax
    35a2:	48 83 f8 10          	cmp    $0x10,%rax
    35a6:	76 72                	jbe    361a <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xca>
    35a8:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    35ad:	31 c0                	xor    %eax,%eax
    35af:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    35b4:	0f 1f 40 00          	nopl   0x0(%rax)
    35b8:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    35bd:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    35c2:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    35c6:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    35ca:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    35ce:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    35d2:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    35d7:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    35db:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    35e0:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    35e5:	48 83 c0 20          	add    $0x20,%rax
    35e9:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    35ef:	75 c7                	jne    35b8 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x68>
    35f1:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    35f8:	4c 39 cf             	cmp    %r9,%rdi
    35fb:	75 81                	jne    357e <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    35fd:	4c 8d 4f 08          	lea    0x8(%rdi),%r9
    3601:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3608:	49 39 d9             	cmp    %rbx,%r9
    360b:	0f 85 5f ff ff ff    	jne    3570 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x20>
    3611:	c5 f8 77             	vzeroupper 
    3614:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    3618:	c9                   	leaveq 
    3619:	c3                   	retq   
    361a:	31 c0                	xor    %eax,%eax
    361c:	0f 1f 40 00          	nopl   0x0(%rax)
    3620:	48 8b 0f             	mov    (%rdi),%rcx
    3623:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    3628:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    362c:	48 ff c0             	inc    %rax
    362f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3635:	75 e9                	jne    3620 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xd0>
    3637:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    363e:	4c 39 cf             	cmp    %r9,%rdi
    3641:	0f 85 37 ff ff ff    	jne    357e <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    3647:	eb b4                	jmp    35fd <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xad>
    3649:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003650 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3650:	f3 0f 1e fa          	endbr64 
    3654:	55                   	push   %rbp
    3655:	49 89 d2             	mov    %rdx,%r10
    3658:	45 31 db             	xor    %r11d,%r11d
    365b:	53                   	push   %rbx
    365c:	48 8d af 00 00 02 00 	lea    0x20000(%rdi),%rbp
    3663:	48 89 f3             	mov    %rsi,%rbx
    3666:	4c 8d 87 00 04 02 00 	lea    0x20400(%rdi),%r8
    366d:	48 89 ee             	mov    %rbp,%rsi
    3670:	4e 8d 0c db          	lea    (%rbx,%r11,8),%r9
    3674:	4c 89 d7             	mov    %r10,%rdi
    3677:	48 8d 86 00 00 fe ff 	lea    -0x20000(%rsi),%rax
    367e:	4c 89 c9             	mov    %r9,%rcx
    3681:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3688:	48 8b 11             	mov    (%rcx),%rdx
    368b:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3692:	48 0f af 17          	imul   (%rdi),%rdx
    3696:	48 01 10             	add    %rdx,(%rax)
    3699:	48 05 00 04 00 00    	add    $0x400,%rax
    369f:	48 39 c6             	cmp    %rax,%rsi
    36a2:	75 e4                	jne    3688 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x38>
    36a4:	48 83 c6 08          	add    $0x8,%rsi
    36a8:	48 83 c7 08          	add    $0x8,%rdi
    36ac:	4c 39 c6             	cmp    %r8,%rsi
    36af:	75 c6                	jne    3677 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x27>
    36b1:	49 ff c3             	inc    %r11
    36b4:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    36bb:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    36c2:	75 a9                	jne    366d <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x1d>
    36c4:	5b                   	pop    %rbx
    36c5:	5d                   	pop    %rbp
    36c6:	c3                   	retq   
    36c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    36ce:	00 00 

00000000000036d0 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    36d0:	f3 0f 1e fa          	endbr64 
    36d4:	41 57                	push   %r15
    36d6:	45 31 ff             	xor    %r15d,%r15d
    36d9:	41 56                	push   %r14
    36db:	49 89 f6             	mov    %rsi,%r14
    36de:	41 55                	push   %r13
    36e0:	49 89 fd             	mov    %rdi,%r13
    36e3:	41 54                	push   %r12
    36e5:	4c 8d a2 00 08 04 00 	lea    0x40800(%rdx),%r12
    36ec:	55                   	push   %rbp
    36ed:	53                   	push   %rbx
    36ee:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    36f5:	48 89 5c 24 f0       	mov    %rbx,-0x10(%rsp)
    36fa:	4c 89 fd             	mov    %r15,%rbp
    36fd:	48 c1 e5 0b          	shl    $0xb,%rbp
    3701:	48 8b 7c 24 f0       	mov    -0x10(%rsp),%rdi
    3706:	4c 01 f5             	add    %r14,%rbp
    3709:	4c 89 eb             	mov    %r13,%rbx
    370c:	4c 8b 13             	mov    (%rbx),%r10
    370f:	4c 8b 5b 08          	mov    0x8(%rbx),%r11
    3713:	48 8d 87 00 00 fc ff 	lea    -0x40000(%rdi),%rax
    371a:	48 89 ee             	mov    %rbp,%rsi
    371d:	0f 1f 00             	nopl   (%rax)
    3720:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    3724:	48 8b 16             	mov    (%rsi),%rdx
    3727:	48 0f af 08          	imul   (%rax),%rcx
    372b:	49 89 c8             	mov    %rcx,%r8
    372e:	48 8b 48 08          	mov    0x8(%rax),%rcx
    3732:	48 0f af d1          	imul   %rcx,%rdx
    3736:	49 8d 0c 10          	lea    (%r8,%rdx,1),%rcx
    373a:	48 8b 10             	mov    (%rax),%rdx
    373d:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    3742:	49 01 c9             	add    %rcx,%r9
    3745:	4d 01 c2             	add    %r8,%r10
    3748:	4d 11 cb             	adc    %r9,%r11
    374b:	48 05 00 08 00 00    	add    $0x800,%rax
    3751:	4c 89 13             	mov    %r10,(%rbx)
    3754:	4c 89 5b 08          	mov    %r11,0x8(%rbx)
    3758:	48 83 c6 10          	add    $0x10,%rsi
    375c:	48 39 c7             	cmp    %rax,%rdi
    375f:	75 bf                	jne    3720 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x50>
    3761:	48 83 c7 10          	add    $0x10,%rdi
    3765:	48 83 c3 10          	add    $0x10,%rbx
    3769:	49 39 fc             	cmp    %rdi,%r12
    376c:	75 9e                	jne    370c <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x3c>
    376e:	49 ff c7             	inc    %r15
    3771:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    3778:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    377f:	0f 85 75 ff ff ff    	jne    36fa <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2a>
    3785:	5b                   	pop    %rbx
    3786:	5d                   	pop    %rbp
    3787:	41 5c                	pop    %r12
    3789:	41 5d                	pop    %r13
    378b:	41 5e                	pop    %r14
    378d:	41 5f                	pop    %r15
    378f:	c3                   	retq   

0000000000003790 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3790:	f3 0f 1e fa          	endbr64 
    3794:	55                   	push   %rbp
    3795:	49 89 d3             	mov    %rdx,%r11
    3798:	49 89 f0             	mov    %rsi,%r8
    379b:	53                   	push   %rbx
    379c:	49 89 fa             	mov    %rdi,%r10
    379f:	48 8d 9e 00 00 04 00 	lea    0x40000(%rsi),%rbx
    37a6:	4d 89 d9             	mov    %r11,%r9
    37a9:	49 8d a8 00 08 00 00 	lea    0x800(%r8),%rbp
    37b0:	31 c0                	xor    %eax,%eax
    37b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    37b8:	49 8b 48 08          	mov    0x8(%r8),%rcx
    37bc:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    37c0:	48 0f af d1          	imul   %rcx,%rdx
    37c4:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    37c9:	49 0f af 08          	imul   (%r8),%rcx
    37cd:	48 01 d1             	add    %rdx,%rcx
    37d0:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    37d4:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    37d9:	48 01 cf             	add    %rcx,%rdi
    37dc:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    37e0:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    37e5:	48 83 c0 10          	add    $0x10,%rax
    37e9:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    37ef:	75 c7                	jne    37b8 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x28>
    37f1:	49 83 c0 10          	add    $0x10,%r8
    37f5:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    37fc:	4c 39 c5             	cmp    %r8,%rbp
    37ff:	75 af                	jne    37b0 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x20>
    3801:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3808:	48 39 dd             	cmp    %rbx,%rbp
    380b:	74 05                	je     3812 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x82>
    380d:	49 89 e8             	mov    %rbp,%r8
    3810:	eb 94                	jmp    37a6 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x16>
    3812:	5b                   	pop    %rbx
    3813:	5d                   	pop    %rbp
    3814:	c3                   	retq   
    3815:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    381c:	00 00 00 00 

0000000000003820 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3820:	f3 0f 1e fa          	endbr64 
    3824:	41 57                	push   %r15
    3826:	48 8d 87 00 00 04 00 	lea    0x40000(%rdi),%rax
    382d:	45 31 ff             	xor    %r15d,%r15d
    3830:	41 56                	push   %r14
    3832:	49 89 fe             	mov    %rdi,%r14
    3835:	41 55                	push   %r13
    3837:	41 54                	push   %r12
    3839:	55                   	push   %rbp
    383a:	53                   	push   %rbx
    383b:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    3842:	48 89 74 24 e0       	mov    %rsi,-0x20(%rsp)
    3847:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
    384c:	48 89 44 24 f0       	mov    %rax,-0x10(%rsp)
    3851:	48 8b 44 24 e8       	mov    -0x18(%rsp),%rax
    3856:	4d 89 fc             	mov    %r15,%r12
    3859:	49 c1 e4 04          	shl    $0x4,%r12
    385d:	48 8b 6c 24 e0       	mov    -0x20(%rsp),%rbp
    3862:	4e 8d 2c 20          	lea    (%rax,%r12,1),%r13
    3866:	4c 89 f7             	mov    %r14,%rdi
    3869:	4c 03 64 24 f0       	add    -0x10(%rsp),%r12
    386e:	4c 8b 17             	mov    (%rdi),%r10
    3871:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
    3875:	4c 89 e8             	mov    %r13,%rax
    3878:	48 89 ee             	mov    %rbp,%rsi
    387b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3880:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    3884:	48 8b 10             	mov    (%rax),%rdx
    3887:	48 0f af d1          	imul   %rcx,%rdx
    388b:	48 8b 48 08          	mov    0x8(%rax),%rcx
    388f:	48 0f af 0e          	imul   (%rsi),%rcx
    3893:	48 01 d1             	add    %rdx,%rcx
    3896:	48 8b 10             	mov    (%rax),%rdx
    3899:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    389e:	49 01 c9             	add    %rcx,%r9
    38a1:	4d 01 c2             	add    %r8,%r10
    38a4:	4d 11 cb             	adc    %r9,%r11
    38a7:	48 05 00 08 00 00    	add    $0x800,%rax
    38ad:	4c 89 17             	mov    %r10,(%rdi)
    38b0:	4c 89 5f 08          	mov    %r11,0x8(%rdi)
    38b4:	48 83 c6 10          	add    $0x10,%rsi
    38b8:	48 39 d8             	cmp    %rbx,%rax
    38bb:	75 c3                	jne    3880 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x60>
    38bd:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    38c4:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    38cb:	4c 39 e7             	cmp    %r12,%rdi
    38ce:	75 9e                	jne    386e <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x4e>
    38d0:	49 ff c7             	inc    %r15
    38d3:	49 83 c6 10          	add    $0x10,%r14
    38d7:	48 8d 58 10          	lea    0x10(%rax),%rbx
    38db:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    38e2:	0f 85 69 ff ff ff    	jne    3851 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x31>
    38e8:	5b                   	pop    %rbx
    38e9:	5d                   	pop    %rbp
    38ea:	41 5c                	pop    %r12
    38ec:	41 5d                	pop    %r13
    38ee:	41 5e                	pop    %r14
    38f0:	41 5f                	pop    %r15
    38f2:	c3                   	retq   
    38f3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    38fa:	00 00 00 00 
    38fe:	66 90                	xchg   %ax,%ax

0000000000003900 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3900:	f3 0f 1e fa          	endbr64 
    3904:	41 57                	push   %r15
    3906:	4c 8d 97 00 00 04 00 	lea    0x40000(%rdi),%r10
    390d:	41 56                	push   %r14
    390f:	4c 8d b7 00 08 04 00 	lea    0x40800(%rdi),%r14
    3916:	41 55                	push   %r13
    3918:	49 89 d5             	mov    %rdx,%r13
    391b:	41 54                	push   %r12
    391d:	49 89 f4             	mov    %rsi,%r12
    3920:	55                   	push   %rbp
    3921:	53                   	push   %rbx
    3922:	48 8d 9e 00 08 00 00 	lea    0x800(%rsi),%rbx
    3929:	4d 89 e3             	mov    %r12,%r11
    392c:	4c 89 ef             	mov    %r13,%rdi
    392f:	49 8d aa 00 00 fc ff 	lea    -0x40000(%r10),%rbp
    3936:	48 89 e9             	mov    %rbp,%rcx
    3939:	4c 89 de             	mov    %r11,%rsi
    393c:	0f 1f 40 00          	nopl   0x0(%rax)
    3940:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    3944:	48 8b 07             	mov    (%rdi),%rax
    3947:	48 0f af c2          	imul   %rdx,%rax
    394b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    394f:	48 0f af 16          	imul   (%rsi),%rdx
    3953:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    3957:	48 8b 07             	mov    (%rdi),%rax
    395a:	48 89 c2             	mov    %rax,%rdx
    395d:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    3962:	4d 01 f9             	add    %r15,%r9
    3965:	4c 01 01             	add    %r8,(%rcx)
    3968:	4c 11 49 08          	adc    %r9,0x8(%rcx)
    396c:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3973:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    397a:	4c 39 d1             	cmp    %r10,%rcx
    397d:	75 c1                	jne    3940 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    397f:	49 83 c3 10          	add    $0x10,%r11
    3983:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    398a:	49 39 db             	cmp    %rbx,%r11
    398d:	75 a7                	jne    3936 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x36>
    398f:	4c 8d 51 10          	lea    0x10(%rcx),%r10
    3993:	49 83 c5 10          	add    $0x10,%r13
    3997:	4d 39 f2             	cmp    %r14,%r10
    399a:	75 8d                	jne    3929 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x29>
    399c:	5b                   	pop    %rbx
    399d:	5d                   	pop    %rbp
    399e:	41 5c                	pop    %r12
    39a0:	41 5d                	pop    %r13
    39a2:	41 5e                	pop    %r14
    39a4:	41 5f                	pop    %r15
    39a6:	c3                   	retq   
    39a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    39ae:	00 00 

00000000000039b0 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    39b0:	f3 0f 1e fa          	endbr64 
    39b4:	41 54                	push   %r12
    39b6:	49 89 d1             	mov    %rdx,%r9
    39b9:	49 89 fc             	mov    %rdi,%r12
    39bc:	55                   	push   %rbp
    39bd:	48 8d ae 00 08 00 00 	lea    0x800(%rsi),%rbp
    39c4:	53                   	push   %rbx
    39c5:	48 89 f3             	mov    %rsi,%rbx
    39c8:	4d 89 e2             	mov    %r12,%r10
    39cb:	49 89 d8             	mov    %rbx,%r8
    39ce:	4c 8d 9b 00 00 04 00 	lea    0x40000(%rbx),%r11
    39d5:	31 c0                	xor    %eax,%eax
    39d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    39de:	00 00 
    39e0:	49 8b 48 08          	mov    0x8(%r8),%rcx
    39e4:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    39e8:	48 0f af d1          	imul   %rcx,%rdx
    39ec:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    39f1:	49 0f af 08          	imul   (%r8),%rcx
    39f5:	48 01 d1             	add    %rdx,%rcx
    39f8:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    39fc:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    3a01:	48 01 cf             	add    %rcx,%rdi
    3a04:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    3a08:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    3a0d:	48 83 c0 10          	add    $0x10,%rax
    3a11:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3a17:	75 c7                	jne    39e0 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    3a19:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    3a20:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3a27:	4d 39 d8             	cmp    %r11,%r8
    3a2a:	75 a9                	jne    39d5 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    3a2c:	48 83 c3 10          	add    $0x10,%rbx
    3a30:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3a37:	48 39 dd             	cmp    %rbx,%rbp
    3a3a:	75 8c                	jne    39c8 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x18>
    3a3c:	5b                   	pop    %rbx
    3a3d:	5d                   	pop    %rbp
    3a3e:	41 5c                	pop    %r12
    3a40:	c3                   	retq   
    3a41:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3a48:	00 00 00 00 
    3a4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003a50 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3a50:	f3 0f 1e fa          	endbr64 
    3a54:	41 57                	push   %r15
    3a56:	41 56                	push   %r14
    3a58:	4c 8d b7 00 00 04 00 	lea    0x40000(%rdi),%r14
    3a5f:	41 55                	push   %r13
    3a61:	49 89 f5             	mov    %rsi,%r13
    3a64:	41 54                	push   %r12
    3a66:	45 31 e4             	xor    %r12d,%r12d
    3a69:	55                   	push   %rbp
    3a6a:	48 89 d5             	mov    %rdx,%rbp
    3a6d:	53                   	push   %rbx
    3a6e:	48 8d 9f 00 08 04 00 	lea    0x40800(%rdi),%rbx
    3a75:	4d 89 e3             	mov    %r12,%r11
    3a78:	49 c1 e3 04          	shl    $0x4,%r11
    3a7c:	4d 89 f2             	mov    %r14,%r10
    3a7f:	4d 01 eb             	add    %r13,%r11
    3a82:	48 89 ef             	mov    %rbp,%rdi
    3a85:	49 8d b2 00 00 fc ff 	lea    -0x40000(%r10),%rsi
    3a8c:	4c 89 d9             	mov    %r11,%rcx
    3a8f:	90                   	nop
    3a90:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    3a94:	48 8b 07             	mov    (%rdi),%rax
    3a97:	48 0f af c2          	imul   %rdx,%rax
    3a9b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    3a9f:	48 0f af 11          	imul   (%rcx),%rdx
    3aa3:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    3aa7:	48 8b 07             	mov    (%rdi),%rax
    3aaa:	48 89 c2             	mov    %rax,%rdx
    3aad:	c4 62 bb f6 09       	mulx   (%rcx),%r8,%r9
    3ab2:	4d 01 f9             	add    %r15,%r9
    3ab5:	4c 01 06             	add    %r8,(%rsi)
    3ab8:	4c 11 4e 08          	adc    %r9,0x8(%rsi)
    3abc:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3ac3:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3aca:	49 39 f2             	cmp    %rsi,%r10
    3acd:	75 c1                	jne    3a90 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3acf:	49 83 c2 10          	add    $0x10,%r10
    3ad3:	48 83 c7 10          	add    $0x10,%rdi
    3ad7:	49 39 da             	cmp    %rbx,%r10
    3ada:	75 a9                	jne    3a85 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x35>
    3adc:	49 ff c4             	inc    %r12
    3adf:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3ae6:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    3aed:	75 86                	jne    3a75 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    3aef:	5b                   	pop    %rbx
    3af0:	5d                   	pop    %rbp
    3af1:	41 5c                	pop    %r12
    3af3:	41 5d                	pop    %r13
    3af5:	41 5e                	pop    %r14
    3af7:	41 5f                	pop    %r15
    3af9:	c3                   	retq   
    3afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003b00 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3b00:	f3 0f 1e fa          	endbr64 
    3b04:	53                   	push   %rbx
    3b05:	49 89 f3             	mov    %rsi,%r11
    3b08:	49 89 f9             	mov    %rdi,%r9
    3b0b:	45 31 d2             	xor    %r10d,%r10d
    3b0e:	48 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%rbx
    3b15:	4c 8d 82 00 02 01 00 	lea    0x10200(%rdx),%r8
    3b1c:	4c 89 d7             	mov    %r10,%rdi
    3b1f:	48 c1 e7 09          	shl    $0x9,%rdi
    3b23:	48 89 d9             	mov    %rbx,%rcx
    3b26:	4c 01 df             	add    %r11,%rdi
    3b29:	4c 89 ce             	mov    %r9,%rsi
    3b2c:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    3b30:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    3b37:	48 89 fa             	mov    %rdi,%rdx
    3b3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3b40:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    3b44:	48 05 00 02 00 00    	add    $0x200,%rax
    3b4a:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    3b51:	ff ff 
    3b53:	48 83 c2 04          	add    $0x4,%rdx
    3b57:	c5 fa 11 06          	vmovss %xmm0,(%rsi)
    3b5b:	48 39 c1             	cmp    %rax,%rcx
    3b5e:	75 e0                	jne    3b40 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x40>
    3b60:	48 83 c1 04          	add    $0x4,%rcx
    3b64:	48 83 c6 04          	add    $0x4,%rsi
    3b68:	49 39 c8             	cmp    %rcx,%r8
    3b6b:	75 bf                	jne    3b2c <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x2c>
    3b6d:	49 ff c2             	inc    %r10
    3b70:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3b77:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    3b7e:	75 9c                	jne    3b1c <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c>
    3b80:	5b                   	pop    %rbx
    3b81:	c3                   	retq   
    3b82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3b89:	00 00 00 00 
    3b8d:	0f 1f 00             	nopl   (%rax)

0000000000003b90 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3b90:	f3 0f 1e fa          	endbr64 
    3b94:	55                   	push   %rbp
    3b95:	49 89 f3             	mov    %rsi,%r11
    3b98:	49 81 c3 04 00 01 00 	add    $0x10004,%r11
    3b9f:	48 89 e5             	mov    %rsp,%rbp
    3ba2:	41 54                	push   %r12
    3ba4:	49 89 d4             	mov    %rdx,%r12
    3ba7:	4d 8d 94 24 00 00 01 	lea    0x10000(%r12),%r10
    3bae:	00 
    3baf:	53                   	push   %rbx
    3bb0:	48 89 fa             	mov    %rdi,%rdx
    3bb3:	48 8d 5e 04          	lea    0x4(%rsi),%rbx
    3bb7:	4c 89 e1             	mov    %r12,%rcx
    3bba:	48 8d 73 fc          	lea    -0x4(%rbx),%rsi
    3bbe:	48 89 df             	mov    %rbx,%rdi
    3bc1:	4c 8d 8a 00 02 00 00 	lea    0x200(%rdx),%r9
    3bc8:	e9 96 01 00 00       	jmpq   3d63 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1d3>
    3bcd:	4c 8d 41 04          	lea    0x4(%rcx),%r8
    3bd1:	48 89 d0             	mov    %rdx,%rax
    3bd4:	4c 29 c0             	sub    %r8,%rax
    3bd7:	48 83 f8 18          	cmp    $0x18,%rax
    3bdb:	0f 86 9c 01 00 00    	jbe    3d7d <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1ed>
    3be1:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    3be6:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    3bea:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    3bef:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    3bf3:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    3bf8:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    3bfe:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    3c03:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    3c08:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    3c0e:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    3c13:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    3c18:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    3c1e:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    3c23:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    3c2a:	00 
    3c2b:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    3c32:	00 00 
    3c34:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    3c3b:	00 
    3c3c:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    3c43:	00 
    3c44:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    3c4b:	00 00 
    3c4d:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    3c54:	00 
    3c55:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    3c5c:	00 
    3c5d:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    3c64:	00 00 
    3c66:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    3c6d:	00 
    3c6e:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    3c75:	00 
    3c76:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    3c7d:	00 00 
    3c7f:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    3c86:	00 
    3c87:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    3c8e:	00 
    3c8f:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    3c96:	00 00 
    3c98:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    3c9f:	00 
    3ca0:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    3ca7:	00 
    3ca8:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    3caf:	00 00 
    3cb1:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    3cb8:	00 
    3cb9:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    3cc0:	00 
    3cc1:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    3cc8:	00 00 
    3cca:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    3cd1:	00 
    3cd2:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    3cd9:	00 
    3cda:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    3ce1:	00 
    3ce2:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    3ce9:	00 00 
    3ceb:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    3cf2:	00 
    3cf3:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    3cfa:	00 
    3cfb:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    3d02:	00 00 
    3d04:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    3d0b:	00 
    3d0c:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    3d13:	00 
    3d14:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    3d1b:	00 00 
    3d1d:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    3d24:	00 
    3d25:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    3d2c:	00 
    3d2d:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    3d34:	00 00 
    3d36:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    3d3d:	00 
    3d3e:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    3d45:	00 00 
    3d47:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    3d4e:	00 
    3d4f:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3d56:	48 83 c7 04          	add    $0x4,%rdi
    3d5a:	48 83 c6 04          	add    $0x4,%rsi
    3d5e:	49 39 ca             	cmp    %rcx,%r10
    3d61:	74 3e                	je     3da1 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x211>
    3d63:	48 8d 47 fc          	lea    -0x4(%rdi),%rax
    3d67:	4c 39 c8             	cmp    %r9,%rax
    3d6a:	41 0f 93 c0          	setae  %r8b
    3d6e:	48 39 fa             	cmp    %rdi,%rdx
    3d71:	0f 93 c0             	setae  %al
    3d74:	41 08 c0             	or     %al,%r8b
    3d77:	0f 85 50 fe ff ff    	jne    3bcd <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x3d>
    3d7d:	31 c0                	xor    %eax,%eax
    3d7f:	90                   	nop
    3d80:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    3d85:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    3d89:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    3d8f:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    3d94:	48 ff c0             	inc    %rax
    3d97:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3d9d:	75 e1                	jne    3d80 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    3d9f:	eb ae                	jmp    3d4f <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1bf>
    3da1:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    3da8:	4c 39 db             	cmp    %r11,%rbx
    3dab:	74 08                	je     3db5 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x225>
    3dad:	4c 89 ca             	mov    %r9,%rdx
    3db0:	e9 02 fe ff ff       	jmpq   3bb7 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x27>
    3db5:	c5 f8 77             	vzeroupper 
    3db8:	5b                   	pop    %rbx
    3db9:	41 5c                	pop    %r12
    3dbb:	5d                   	pop    %rbp
    3dbc:	c3                   	retq   
    3dbd:	0f 1f 00             	nopl   (%rax)

0000000000003dc0 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3dc0:	f3 0f 1e fa          	endbr64 
    3dc4:	41 54                	push   %r12
    3dc6:	49 89 fa             	mov    %rdi,%r10
    3dc9:	49 89 f4             	mov    %rsi,%r12
    3dcc:	55                   	push   %rbp
    3dcd:	48 8d b2 00 00 01 00 	lea    0x10000(%rdx),%rsi
    3dd4:	45 31 db             	xor    %r11d,%r11d
    3dd7:	53                   	push   %rbx
    3dd8:	48 8d af 00 00 01 00 	lea    0x10000(%rdi),%rbp
    3ddf:	48 89 d3             	mov    %rdx,%rbx
    3de2:	4e 8d 04 9d 00 00 00 	lea    0x0(,%r11,4),%r8
    3de9:	00 
    3dea:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    3dee:	4c 89 e7             	mov    %r12,%rdi
    3df1:	49 01 e8             	add    %rbp,%r8
    3df4:	4c 89 d1             	mov    %r10,%rcx
    3df7:	c5 fa 10 01          	vmovss (%rcx),%xmm0
    3dfb:	4c 89 c8             	mov    %r9,%rax
    3dfe:	48 89 fa             	mov    %rdi,%rdx
    3e01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3e08:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    3e0c:	48 05 00 02 00 00    	add    $0x200,%rax
    3e12:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    3e19:	ff ff 
    3e1b:	48 83 c2 04          	add    $0x4,%rdx
    3e1f:	c5 fa 11 01          	vmovss %xmm0,(%rcx)
    3e23:	48 39 f0             	cmp    %rsi,%rax
    3e26:	75 e0                	jne    3e08 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x48>
    3e28:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3e2f:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3e36:	4c 39 c1             	cmp    %r8,%rcx
    3e39:	75 bc                	jne    3df7 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x37>
    3e3b:	49 ff c3             	inc    %r11
    3e3e:	49 83 c2 04          	add    $0x4,%r10
    3e42:	48 8d 70 04          	lea    0x4(%rax),%rsi
    3e46:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    3e4d:	75 93                	jne    3de2 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x22>
    3e4f:	5b                   	pop    %rbx
    3e50:	5d                   	pop    %rbp
    3e51:	41 5c                	pop    %r12
    3e53:	c3                   	retq   
    3e54:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e5b:	00 00 00 00 
    3e5f:	90                   	nop

0000000000003e60 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3e60:	f3 0f 1e fa          	endbr64 
    3e64:	53                   	push   %rbx
    3e65:	48 89 f3             	mov    %rsi,%rbx
    3e68:	49 89 d3             	mov    %rdx,%r11
    3e6b:	48 8d b7 00 00 01 00 	lea    0x10000(%rdi),%rsi
    3e72:	4c 8d 97 00 02 01 00 	lea    0x10200(%rdi),%r10
    3e79:	4c 8d 83 00 02 00 00 	lea    0x200(%rbx),%r8
    3e80:	48 89 df             	mov    %rbx,%rdi
    3e83:	4c 89 d9             	mov    %r11,%rcx
    3e86:	4c 8d 8e 00 00 ff ff 	lea    -0x10000(%rsi),%r9
    3e8d:	4c 89 c8             	mov    %r9,%rax
    3e90:	48 89 fa             	mov    %rdi,%rdx
    3e93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3e98:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    3e9c:	c5 fa 10 08          	vmovss (%rax),%xmm1
    3ea0:	48 05 00 02 00 00    	add    $0x200,%rax
    3ea6:	c4 e2 71 99 01       	vfmadd132ss (%rcx),%xmm1,%xmm0
    3eab:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    3eb2:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    3eb9:	ff 
    3eba:	48 39 f0             	cmp    %rsi,%rax
    3ebd:	75 d9                	jne    3e98 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x38>
    3ebf:	48 83 c7 04          	add    $0x4,%rdi
    3ec3:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3eca:	4c 39 c7             	cmp    %r8,%rdi
    3ecd:	75 be                	jne    3e8d <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x2d>
    3ecf:	48 8d 70 04          	lea    0x4(%rax),%rsi
    3ed3:	49 83 c3 04          	add    $0x4,%r11
    3ed7:	4c 39 d6             	cmp    %r10,%rsi
    3eda:	75 a4                	jne    3e80 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x20>
    3edc:	5b                   	pop    %rbx
    3edd:	c3                   	retq   
    3ede:	66 90                	xchg   %ax,%ax

0000000000003ee0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3ee0:	f3 0f 1e fa          	endbr64 
    3ee4:	55                   	push   %rbp
    3ee5:	49 89 fb             	mov    %rdi,%r11
    3ee8:	48 89 d1             	mov    %rdx,%rcx
    3eeb:	48 89 e5             	mov    %rsp,%rbp
    3eee:	41 54                	push   %r12
    3ef0:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    3ef7:	45 31 e4             	xor    %r12d,%r12d
    3efa:	53                   	push   %rbx
    3efb:	48 89 f3             	mov    %rsi,%rbx
    3efe:	4c 89 df             	mov    %r11,%rdi
    3f01:	48 89 de             	mov    %rbx,%rsi
    3f04:	4c 8d 51 04          	lea    0x4(%rcx),%r10
    3f08:	e9 8a 01 00 00       	jmpq   4097 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b7>
    3f0d:	48 89 d0             	mov    %rdx,%rax
    3f10:	4c 29 d0             	sub    %r10,%rax
    3f13:	48 83 f8 18          	cmp    $0x18,%rax
    3f17:	0f 86 9e 01 00 00    	jbe    40bb <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1db>
    3f1d:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    3f22:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    3f26:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    3f2d:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    3f32:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    3f36:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    3f3b:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    3f41:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    3f46:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    3f4b:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    3f51:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    3f56:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    3f5b:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    3f61:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    3f66:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    3f6d:	00 
    3f6e:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    3f75:	00 00 
    3f77:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    3f7e:	00 
    3f7f:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    3f86:	00 
    3f87:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    3f8e:	00 00 
    3f90:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    3f97:	00 
    3f98:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    3f9f:	00 
    3fa0:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    3fa7:	00 00 
    3fa9:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    3fb0:	00 
    3fb1:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    3fb8:	00 
    3fb9:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    3fc0:	00 00 
    3fc2:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    3fc9:	00 
    3fca:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    3fd1:	00 
    3fd2:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    3fd9:	00 00 
    3fdb:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    3fe2:	00 
    3fe3:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    3fea:	00 
    3feb:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    3ff2:	00 00 
    3ff4:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    3ffb:	00 
    3ffc:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    4003:	00 
    4004:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    400b:	00 00 
    400d:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    4014:	00 
    4015:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    401c:	00 
    401d:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    4024:	00 
    4025:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    402c:	00 00 
    402e:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    4035:	00 
    4036:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    403d:	00 
    403e:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    4045:	00 00 
    4047:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    404e:	00 
    404f:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    4056:	00 
    4057:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    405e:	00 00 
    4060:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    4067:	00 
    4068:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    406f:	00 
    4070:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    4077:	00 00 
    4079:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    4080:	00 
    4081:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    4088:	00 00 
    408a:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    4091:	00 
    4092:	49 39 f9             	cmp    %rdi,%r9
    4095:	74 54                	je     40eb <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x20b>
    4097:	48 89 fa             	mov    %rdi,%rdx
    409a:	48 8d 46 04          	lea    0x4(%rsi),%rax
    409e:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    40a5:	48 39 c2             	cmp    %rax,%rdx
    40a8:	41 0f 93 c0          	setae  %r8b
    40ac:	48 39 fe             	cmp    %rdi,%rsi
    40af:	0f 93 c0             	setae  %al
    40b2:	41 08 c0             	or     %al,%r8b
    40b5:	0f 85 52 fe ff ff    	jne    3f0d <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x2d>
    40bb:	31 c0                	xor    %eax,%eax
    40bd:	0f 1f 00             	nopl   (%rax)
    40c0:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    40c5:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    40c9:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    40cf:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    40d4:	48 ff c0             	inc    %rax
    40d7:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    40dd:	75 e1                	jne    40c0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1e0>
    40df:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    40e6:	49 39 f9             	cmp    %rdi,%r9
    40e9:	75 ac                	jne    4097 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b7>
    40eb:	49 ff c4             	inc    %r12
    40ee:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    40f5:	48 83 c3 04          	add    $0x4,%rbx
    40f9:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    4100:	0f 85 f8 fd ff ff    	jne    3efe <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1e>
    4106:	c5 f8 77             	vzeroupper 
    4109:	5b                   	pop    %rbx
    410a:	41 5c                	pop    %r12
    410c:	5d                   	pop    %rbp
    410d:	c3                   	retq   
    410e:	66 90                	xchg   %ax,%ax

0000000000004110 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>:
    4110:	f3 0f 1e fa          	endbr64 
    4114:	53                   	push   %rbx
    4115:	49 89 f3             	mov    %rsi,%r11
    4118:	48 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%rbx
    411f:	49 89 d1             	mov    %rdx,%r9
    4122:	45 31 d2             	xor    %r10d,%r10d
    4125:	48 8d bf 00 02 01 00 	lea    0x10200(%rdi),%rdi
    412c:	48 89 d9             	mov    %rbx,%rcx
    412f:	4f 8d 04 93          	lea    (%r11,%r10,4),%r8
    4133:	4c 89 ce             	mov    %r9,%rsi
    4136:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    413d:	4c 89 c2             	mov    %r8,%rdx
    4140:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    4144:	c5 fa 10 08          	vmovss (%rax),%xmm1
    4148:	48 05 00 02 00 00    	add    $0x200,%rax
    414e:	c4 e2 71 99 06       	vfmadd132ss (%rsi),%xmm1,%xmm0
    4153:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    415a:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    4161:	ff 
    4162:	48 39 c1             	cmp    %rax,%rcx
    4165:	75 d9                	jne    4140 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    4167:	48 83 c1 04          	add    $0x4,%rcx
    416b:	48 83 c6 04          	add    $0x4,%rsi
    416f:	48 39 f9             	cmp    %rdi,%rcx
    4172:	75 c2                	jne    4136 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x26>
    4174:	49 ff c2             	inc    %r10
    4177:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    417e:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    4185:	75 a5                	jne    412c <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c>
    4187:	5b                   	pop    %rbx
    4188:	c3                   	retq   
    4189:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004190 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4190:	f3 0f 1e fa          	endbr64 
    4194:	53                   	push   %rbx
    4195:	49 89 f3             	mov    %rsi,%r11
    4198:	49 89 f9             	mov    %rdi,%r9
    419b:	45 31 d2             	xor    %r10d,%r10d
    419e:	48 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%rbx
    41a5:	4c 8d 82 00 04 02 00 	lea    0x20400(%rdx),%r8
    41ac:	4c 89 d7             	mov    %r10,%rdi
    41af:	48 c1 e7 0a          	shl    $0xa,%rdi
    41b3:	48 89 d9             	mov    %rbx,%rcx
    41b6:	4c 01 df             	add    %r11,%rdi
    41b9:	4c 89 ce             	mov    %r9,%rsi
    41bc:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    41c0:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    41c7:	48 89 fa             	mov    %rdi,%rdx
    41ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    41d0:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    41d4:	48 05 00 04 00 00    	add    $0x400,%rax
    41da:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    41e1:	ff ff 
    41e3:	48 83 c2 08          	add    $0x8,%rdx
    41e7:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    41eb:	48 39 c1             	cmp    %rax,%rcx
    41ee:	75 e0                	jne    41d0 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x40>
    41f0:	48 83 c1 08          	add    $0x8,%rcx
    41f4:	48 83 c6 08          	add    $0x8,%rsi
    41f8:	49 39 c8             	cmp    %rcx,%r8
    41fb:	75 bf                	jne    41bc <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x2c>
    41fd:	49 ff c2             	inc    %r10
    4200:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    4207:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    420e:	75 9c                	jne    41ac <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x1c>
    4210:	5b                   	pop    %rbx
    4211:	c3                   	retq   
    4212:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4219:	00 00 00 00 
    421d:	0f 1f 00             	nopl   (%rax)

0000000000004220 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4220:	f3 0f 1e fa          	endbr64 
    4224:	55                   	push   %rbp
    4225:	4c 8d 5e 08          	lea    0x8(%rsi),%r11
    4229:	48 89 f9             	mov    %rdi,%rcx
    422c:	48 89 e5             	mov    %rsp,%rbp
    422f:	41 56                	push   %r14
    4231:	4c 8d 92 00 00 02 00 	lea    0x20000(%rdx),%r10
    4238:	41 55                	push   %r13
    423a:	45 31 ed             	xor    %r13d,%r13d
    423d:	41 54                	push   %r12
    423f:	49 89 d4             	mov    %rdx,%r12
    4242:	53                   	push   %rbx
    4243:	48 89 fb             	mov    %rdi,%rbx
    4246:	4c 89 e2             	mov    %r12,%rdx
    4249:	49 8d 7b f8          	lea    -0x8(%r11),%rdi
    424d:	4a 8d 34 eb          	lea    (%rbx,%r13,8),%rsi
    4251:	4d 89 d8             	mov    %r11,%r8
    4254:	4c 8d 89 00 04 00 00 	lea    0x400(%rcx),%r9
    425b:	49 8d 40 f8          	lea    -0x8(%r8),%rax
    425f:	4c 39 c8             	cmp    %r9,%rax
    4262:	41 0f 93 c6          	setae  %r14b
    4266:	4c 39 c1             	cmp    %r8,%rcx
    4269:	0f 93 c0             	setae  %al
    426c:	41 08 c6             	or     %al,%r14b
    426f:	74 6b                	je     42dc <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xbc>
    4271:	4c 8d 72 08          	lea    0x8(%rdx),%r14
    4275:	48 89 c8             	mov    %rcx,%rax
    4278:	4c 29 f0             	sub    %r14,%rax
    427b:	48 83 f8 10          	cmp    $0x10,%rax
    427f:	76 5b                	jbe    42dc <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xbc>
    4281:	c4 e2 7d 19 0f       	vbroadcastsd (%rdi),%ymm1
    4286:	31 c0                	xor    %eax,%eax
    4288:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    428f:	00 
    4290:	c5 fd 10 04 02       	vmovupd (%rdx,%rax,1),%ymm0
    4295:	c4 e2 f5 a8 04 06    	vfmadd213pd (%rsi,%rax,1),%ymm1,%ymm0
    429b:	c5 fd 11 04 06       	vmovupd %ymm0,(%rsi,%rax,1)
    42a0:	48 83 c0 20          	add    $0x20,%rax
    42a4:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    42aa:	75 e4                	jne    4290 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    42ac:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    42b3:	49 83 c0 08          	add    $0x8,%r8
    42b7:	48 83 c7 08          	add    $0x8,%rdi
    42bb:	4c 39 d2             	cmp    %r10,%rdx
    42be:	75 9b                	jne    425b <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x3b>
    42c0:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    42c4:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    42cb:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    42d2:	74 2d                	je     4301 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xe1>
    42d4:	4c 89 c9             	mov    %r9,%rcx
    42d7:	e9 6a ff ff ff       	jmpq   4246 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x26>
    42dc:	31 c0                	xor    %eax,%eax
    42de:	66 90                	xchg   %ax,%ax
    42e0:	c5 fb 10 14 c1       	vmovsd (%rcx,%rax,8),%xmm2
    42e5:	c5 fb 10 07          	vmovsd (%rdi),%xmm0
    42e9:	c4 e2 e9 99 04 c2    	vfmadd132sd (%rdx,%rax,8),%xmm2,%xmm0
    42ef:	c5 fb 11 04 c1       	vmovsd %xmm0,(%rcx,%rax,8)
    42f4:	48 ff c0             	inc    %rax
    42f7:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    42fd:	75 e1                	jne    42e0 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xc0>
    42ff:	eb ab                	jmp    42ac <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x8c>
    4301:	c5 f8 77             	vzeroupper 
    4304:	5b                   	pop    %rbx
    4305:	41 5c                	pop    %r12
    4307:	41 5d                	pop    %r13
    4309:	41 5e                	pop    %r14
    430b:	5d                   	pop    %rbp
    430c:	c3                   	retq   
    430d:	0f 1f 00             	nopl   (%rax)

0000000000004310 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4310:	f3 0f 1e fa          	endbr64 
    4314:	41 54                	push   %r12
    4316:	49 89 fa             	mov    %rdi,%r10
    4319:	49 89 f4             	mov    %rsi,%r12
    431c:	55                   	push   %rbp
    431d:	48 8d b2 00 00 02 00 	lea    0x20000(%rdx),%rsi
    4324:	45 31 db             	xor    %r11d,%r11d
    4327:	53                   	push   %rbx
    4328:	48 8d af 00 00 02 00 	lea    0x20000(%rdi),%rbp
    432f:	48 89 d3             	mov    %rdx,%rbx
    4332:	4e 8d 04 dd 00 00 00 	lea    0x0(,%r11,8),%r8
    4339:	00 
    433a:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    433e:	4c 89 e7             	mov    %r12,%rdi
    4341:	49 01 e8             	add    %rbp,%r8
    4344:	4c 89 d1             	mov    %r10,%rcx
    4347:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    434b:	4c 89 c8             	mov    %r9,%rax
    434e:	48 89 fa             	mov    %rdi,%rdx
    4351:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4358:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    435c:	48 05 00 04 00 00    	add    $0x400,%rax
    4362:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    4369:	ff ff 
    436b:	48 83 c2 08          	add    $0x8,%rdx
    436f:	c5 fb 11 01          	vmovsd %xmm0,(%rcx)
    4373:	48 39 f0             	cmp    %rsi,%rax
    4376:	75 e0                	jne    4358 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x48>
    4378:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    437f:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    4386:	4c 39 c1             	cmp    %r8,%rcx
    4389:	75 bc                	jne    4347 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    438b:	49 ff c3             	inc    %r11
    438e:	49 83 c2 08          	add    $0x8,%r10
    4392:	48 8d 70 08          	lea    0x8(%rax),%rsi
    4396:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    439d:	75 93                	jne    4332 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x22>
    439f:	5b                   	pop    %rbx
    43a0:	5d                   	pop    %rbp
    43a1:	41 5c                	pop    %r12
    43a3:	c3                   	retq   
    43a4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    43ab:	00 00 00 00 
    43af:	90                   	nop

00000000000043b0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>:
    43b0:	f3 0f 1e fa          	endbr64 
    43b4:	53                   	push   %rbx
    43b5:	48 89 f3             	mov    %rsi,%rbx
    43b8:	49 89 d3             	mov    %rdx,%r11
    43bb:	48 8d b7 00 00 02 00 	lea    0x20000(%rdi),%rsi
    43c2:	4c 8d 97 00 04 02 00 	lea    0x20400(%rdi),%r10
    43c9:	4c 8d 83 00 04 00 00 	lea    0x400(%rbx),%r8
    43d0:	48 89 df             	mov    %rbx,%rdi
    43d3:	4c 89 d9             	mov    %r11,%rcx
    43d6:	4c 8d 8e 00 00 fe ff 	lea    -0x20000(%rsi),%r9
    43dd:	4c 89 c8             	mov    %r9,%rax
    43e0:	48 89 fa             	mov    %rdi,%rdx
    43e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    43e8:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    43ec:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    43f0:	48 05 00 04 00 00    	add    $0x400,%rax
    43f6:	c4 e2 f1 99 01       	vfmadd132sd (%rcx),%xmm1,%xmm0
    43fb:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    4402:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    4409:	ff 
    440a:	48 39 f0             	cmp    %rsi,%rax
    440d:	75 d9                	jne    43e8 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x38>
    440f:	48 83 c7 08          	add    $0x8,%rdi
    4413:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    441a:	4c 39 c7             	cmp    %r8,%rdi
    441d:	75 be                	jne    43dd <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x2d>
    441f:	48 8d 70 08          	lea    0x8(%rax),%rsi
    4423:	49 83 c3 08          	add    $0x8,%r11
    4427:	4c 39 d6             	cmp    %r10,%rsi
    442a:	75 a4                	jne    43d0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x20>
    442c:	5b                   	pop    %rbx
    442d:	c3                   	retq   
    442e:	66 90                	xchg   %ax,%ax

0000000000004430 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4430:	f3 0f 1e fa          	endbr64 
    4434:	55                   	push   %rbp
    4435:	49 89 fa             	mov    %rdi,%r10
    4438:	4c 8d 8e 00 00 02 00 	lea    0x20000(%rsi),%r9
    443f:	48 89 e5             	mov    %rsp,%rbp
    4442:	48 89 d1             	mov    %rdx,%rcx
    4445:	53                   	push   %rbx
    4446:	48 8d 9e 00 04 02 00 	lea    0x20400(%rsi),%rbx
    444d:	4c 89 d7             	mov    %r10,%rdi
    4450:	49 8d b1 00 00 fe ff 	lea    -0x20000(%r9),%rsi
    4457:	4c 8d 59 08          	lea    0x8(%rcx),%r11
    445b:	48 89 fa             	mov    %rdi,%rdx
    445e:	48 8d 46 08          	lea    0x8(%rsi),%rax
    4462:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    4469:	48 39 c2             	cmp    %rax,%rdx
    446c:	41 0f 93 c0          	setae  %r8b
    4470:	48 39 fe             	cmp    %rdi,%rsi
    4473:	0f 93 c0             	setae  %al
    4476:	41 08 c0             	or     %al,%r8b
    4479:	74 56                	je     44d1 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa1>
    447b:	48 89 d0             	mov    %rdx,%rax
    447e:	4c 29 d8             	sub    %r11,%rax
    4481:	48 83 f8 10          	cmp    $0x10,%rax
    4485:	76 4a                	jbe    44d1 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa1>
    4487:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    448c:	31 c0                	xor    %eax,%eax
    448e:	66 90                	xchg   %ax,%ax
    4490:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    4495:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    449b:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    44a0:	48 83 c0 20          	add    $0x20,%rax
    44a4:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    44aa:	75 e4                	jne    4490 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x60>
    44ac:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    44b3:	4c 39 ce             	cmp    %r9,%rsi
    44b6:	75 a3                	jne    445b <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2b>
    44b8:	4c 8d 4e 08          	lea    0x8(%rsi),%r9
    44bc:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    44c3:	49 39 d9             	cmp    %rbx,%r9
    44c6:	75 85                	jne    444d <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x1d>
    44c8:	c5 f8 77             	vzeroupper 
    44cb:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    44cf:	c9                   	leaveq 
    44d0:	c3                   	retq   
    44d1:	31 c0                	xor    %eax,%eax
    44d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    44d8:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    44dd:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    44e1:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    44e7:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    44ec:	48 ff c0             	inc    %rax
    44ef:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    44f5:	75 e1                	jne    44d8 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa8>
    44f7:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    44fe:	4c 39 ce             	cmp    %r9,%rsi
    4501:	0f 85 54 ff ff ff    	jne    445b <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2b>
    4507:	eb af                	jmp    44b8 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x88>
    4509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004510 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>:
    4510:	f3 0f 1e fa          	endbr64 
    4514:	53                   	push   %rbx
    4515:	49 89 f3             	mov    %rsi,%r11
    4518:	48 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%rbx
    451f:	49 89 d1             	mov    %rdx,%r9
    4522:	45 31 d2             	xor    %r10d,%r10d
    4525:	48 8d bf 00 04 02 00 	lea    0x20400(%rdi),%rdi
    452c:	48 89 d9             	mov    %rbx,%rcx
    452f:	4f 8d 04 d3          	lea    (%r11,%r10,8),%r8
    4533:	4c 89 ce             	mov    %r9,%rsi
    4536:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    453d:	4c 89 c2             	mov    %r8,%rdx
    4540:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    4544:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    4548:	48 05 00 04 00 00    	add    $0x400,%rax
    454e:	c4 e2 f1 99 06       	vfmadd132sd (%rsi),%xmm1,%xmm0
    4553:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    455a:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    4561:	ff 
    4562:	48 39 c1             	cmp    %rax,%rcx
    4565:	75 d9                	jne    4540 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    4567:	48 83 c1 08          	add    $0x8,%rcx
    456b:	48 83 c6 08          	add    $0x8,%rsi
    456f:	48 39 f9             	cmp    %rdi,%rcx
    4572:	75 c2                	jne    4536 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x26>
    4574:	49 ff c2             	inc    %r10
    4577:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    457e:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    4585:	75 a5                	jne    452c <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x1c>
    4587:	5b                   	pop    %rbx
    4588:	c3                   	retq   
    4589:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004590 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4590:	f3 0f 1e fa          	endbr64 
    4594:	53                   	push   %rbx
    4595:	49 89 f3             	mov    %rsi,%r11
    4598:	49 89 f9             	mov    %rdi,%r9
    459b:	45 31 d2             	xor    %r10d,%r10d
    459e:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    45a5:	4c 8d 82 00 08 04 00 	lea    0x40800(%rdx),%r8
    45ac:	4c 89 d7             	mov    %r10,%rdi
    45af:	48 c1 e7 0b          	shl    $0xb,%rdi
    45b3:	48 89 d9             	mov    %rbx,%rcx
    45b6:	4c 01 df             	add    %r11,%rdi
    45b9:	4c 89 ce             	mov    %r9,%rsi
    45bc:	db 2e                	fldt   (%rsi)
    45be:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    45c5:	48 89 fa             	mov    %rdi,%rdx
    45c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    45cf:	00 
    45d0:	db 2a                	fldt   (%rdx)
    45d2:	48 05 00 08 00 00    	add    $0x800,%rax
    45d8:	48 83 c2 10          	add    $0x10,%rdx
    45dc:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    45e2:	de c9                	fmulp  %st,%st(1)
    45e4:	de c1                	faddp  %st,%st(1)
    45e6:	d9 c0                	fld    %st(0)
    45e8:	db 3e                	fstpt  (%rsi)
    45ea:	48 39 c1             	cmp    %rax,%rcx
    45ed:	75 e1                	jne    45d0 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    45ef:	dd d8                	fstp   %st(0)
    45f1:	48 83 c1 10          	add    $0x10,%rcx
    45f5:	48 83 c6 10          	add    $0x10,%rsi
    45f9:	49 39 c8             	cmp    %rcx,%r8
    45fc:	75 be                	jne    45bc <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2c>
    45fe:	49 ff c2             	inc    %r10
    4601:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    4608:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    460f:	75 9b                	jne    45ac <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1c>
    4611:	5b                   	pop    %rbx
    4612:	c3                   	retq   
    4613:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    461a:	00 00 00 00 
    461e:	66 90                	xchg   %ax,%ax

0000000000004620 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4620:	f3 0f 1e fa          	endbr64 
    4624:	49 89 d0             	mov    %rdx,%r8
    4627:	48 89 f1             	mov    %rsi,%rcx
    462a:	48 89 fa             	mov    %rdi,%rdx
    462d:	4c 8d 8e 00 00 04 00 	lea    0x40000(%rsi),%r9
    4634:	4c 89 c6             	mov    %r8,%rsi
    4637:	48 8d b9 00 08 00 00 	lea    0x800(%rcx),%rdi
    463e:	31 c0                	xor    %eax,%eax
    4640:	db 29                	fldt   (%rcx)
    4642:	db 2c 06             	fldt   (%rsi,%rax,1)
    4645:	de c9                	fmulp  %st,%st(1)
    4647:	db 2c 02             	fldt   (%rdx,%rax,1)
    464a:	de c1                	faddp  %st,%st(1)
    464c:	db 3c 02             	fstpt  (%rdx,%rax,1)
    464f:	48 83 c0 10          	add    $0x10,%rax
    4653:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    4659:	75 e5                	jne    4640 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x20>
    465b:	48 83 c1 10          	add    $0x10,%rcx
    465f:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    4666:	48 39 cf             	cmp    %rcx,%rdi
    4669:	75 d3                	jne    463e <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1e>
    466b:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4672:	4c 39 cf             	cmp    %r9,%rdi
    4675:	74 05                	je     467c <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x5c>
    4677:	48 89 f9             	mov    %rdi,%rcx
    467a:	eb b8                	jmp    4634 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x14>
    467c:	c3                   	retq   
    467d:	0f 1f 00             	nopl   (%rax)

0000000000004680 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4680:	f3 0f 1e fa          	endbr64 
    4684:	41 54                	push   %r12
    4686:	49 89 fa             	mov    %rdi,%r10
    4689:	49 89 f4             	mov    %rsi,%r12
    468c:	55                   	push   %rbp
    468d:	48 8d b2 00 00 04 00 	lea    0x40000(%rdx),%rsi
    4694:	45 31 db             	xor    %r11d,%r11d
    4697:	53                   	push   %rbx
    4698:	48 8d af 00 00 04 00 	lea    0x40000(%rdi),%rbp
    469f:	48 89 d3             	mov    %rdx,%rbx
    46a2:	4d 89 d8             	mov    %r11,%r8
    46a5:	49 c1 e0 04          	shl    $0x4,%r8
    46a9:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    46ad:	4c 89 e7             	mov    %r12,%rdi
    46b0:	49 01 e8             	add    %rbp,%r8
    46b3:	4c 89 d1             	mov    %r10,%rcx
    46b6:	db 29                	fldt   (%rcx)
    46b8:	4c 89 c8             	mov    %r9,%rax
    46bb:	48 89 fa             	mov    %rdi,%rdx
    46be:	66 90                	xchg   %ax,%ax
    46c0:	db 2a                	fldt   (%rdx)
    46c2:	48 05 00 08 00 00    	add    $0x800,%rax
    46c8:	48 83 c2 10          	add    $0x10,%rdx
    46cc:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    46d2:	de c9                	fmulp  %st,%st(1)
    46d4:	de c1                	faddp  %st,%st(1)
    46d6:	d9 c0                	fld    %st(0)
    46d8:	db 39                	fstpt  (%rcx)
    46da:	48 39 f0             	cmp    %rsi,%rax
    46dd:	75 e1                	jne    46c0 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    46df:	dd d8                	fstp   %st(0)
    46e1:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    46e8:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    46ef:	4c 39 c1             	cmp    %r8,%rcx
    46f2:	75 c2                	jne    46b6 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x36>
    46f4:	49 ff c3             	inc    %r11
    46f7:	49 83 c2 10          	add    $0x10,%r10
    46fb:	48 8d 70 10          	lea    0x10(%rax),%rsi
    46ff:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    4706:	75 9a                	jne    46a2 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    4708:	5b                   	pop    %rbx
    4709:	5d                   	pop    %rbp
    470a:	41 5c                	pop    %r12
    470c:	c3                   	retq   
    470d:	0f 1f 00             	nopl   (%rax)

0000000000004710 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4710:	f3 0f 1e fa          	endbr64 
    4714:	53                   	push   %rbx
    4715:	48 89 f3             	mov    %rsi,%rbx
    4718:	49 89 d3             	mov    %rdx,%r11
    471b:	48 8d b7 00 00 04 00 	lea    0x40000(%rdi),%rsi
    4722:	4c 8d 97 00 08 04 00 	lea    0x40800(%rdi),%r10
    4729:	4c 8d 83 00 08 00 00 	lea    0x800(%rbx),%r8
    4730:	48 89 df             	mov    %rbx,%rdi
    4733:	4c 89 d9             	mov    %r11,%rcx
    4736:	4c 8d 8e 00 00 fc ff 	lea    -0x40000(%rsi),%r9
    473d:	4c 89 c8             	mov    %r9,%rax
    4740:	48 89 fa             	mov    %rdi,%rdx
    4743:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4748:	db 2a                	fldt   (%rdx)
    474a:	48 05 00 08 00 00    	add    $0x800,%rax
    4750:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    4757:	db 29                	fldt   (%rcx)
    4759:	de c9                	fmulp  %st,%st(1)
    475b:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4761:	de c1                	faddp  %st,%st(1)
    4763:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    4769:	48 39 f0             	cmp    %rsi,%rax
    476c:	75 da                	jne    4748 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x38>
    476e:	48 83 c7 10          	add    $0x10,%rdi
    4772:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    4779:	4c 39 c7             	cmp    %r8,%rdi
    477c:	75 bf                	jne    473d <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2d>
    477e:	48 8d 70 10          	lea    0x10(%rax),%rsi
    4782:	49 83 c3 10          	add    $0x10,%r11
    4786:	4c 39 d6             	cmp    %r10,%rsi
    4789:	75 a5                	jne    4730 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x20>
    478b:	5b                   	pop    %rbx
    478c:	c3                   	retq   
    478d:	0f 1f 00             	nopl   (%rax)

0000000000004790 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4790:	f3 0f 1e fa          	endbr64 
    4794:	49 89 f0             	mov    %rsi,%r8
    4797:	49 89 f9             	mov    %rdi,%r9
    479a:	48 89 d6             	mov    %rdx,%rsi
    479d:	4d 8d 90 00 08 00 00 	lea    0x800(%r8),%r10
    47a4:	4c 89 ca             	mov    %r9,%rdx
    47a7:	4c 89 c1             	mov    %r8,%rcx
    47aa:	49 8d b8 00 00 04 00 	lea    0x40000(%r8),%rdi
    47b1:	31 c0                	xor    %eax,%eax
    47b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    47b8:	db 29                	fldt   (%rcx)
    47ba:	db 2c 06             	fldt   (%rsi,%rax,1)
    47bd:	de c9                	fmulp  %st,%st(1)
    47bf:	db 2c 02             	fldt   (%rdx,%rax,1)
    47c2:	de c1                	faddp  %st,%st(1)
    47c4:	db 3c 02             	fstpt  (%rdx,%rax,1)
    47c7:	48 83 c0 10          	add    $0x10,%rax
    47cb:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    47d1:	75 e5                	jne    47b8 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    47d3:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    47da:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    47e1:	48 39 f9             	cmp    %rdi,%rcx
    47e4:	75 cb                	jne    47b1 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x21>
    47e6:	49 83 c0 10          	add    $0x10,%r8
    47ea:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    47f1:	4d 39 c2             	cmp    %r8,%r10
    47f4:	75 ae                	jne    47a4 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x14>
    47f6:	c3                   	retq   
    47f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    47fe:	00 00 

0000000000004800 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    4800:	f3 0f 1e fa          	endbr64 
    4804:	53                   	push   %rbx
    4805:	49 89 f3             	mov    %rsi,%r11
    4808:	49 89 d1             	mov    %rdx,%r9
    480b:	45 31 d2             	xor    %r10d,%r10d
    480e:	48 8d 9f 00 00 04 00 	lea    0x40000(%rdi),%rbx
    4815:	4c 8d 87 00 08 04 00 	lea    0x40800(%rdi),%r8
    481c:	4c 89 d7             	mov    %r10,%rdi
    481f:	48 c1 e7 04          	shl    $0x4,%rdi
    4823:	48 89 d9             	mov    %rbx,%rcx
    4826:	4c 01 df             	add    %r11,%rdi
    4829:	4c 89 ce             	mov    %r9,%rsi
    482c:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    4833:	48 89 fa             	mov    %rdi,%rdx
    4836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    483d:	00 00 00 
    4840:	db 2a                	fldt   (%rdx)
    4842:	48 05 00 08 00 00    	add    $0x800,%rax
    4848:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    484f:	db 2e                	fldt   (%rsi)
    4851:	de c9                	fmulp  %st,%st(1)
    4853:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    4859:	de c1                	faddp  %st,%st(1)
    485b:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    4861:	48 39 c1             	cmp    %rax,%rcx
    4864:	75 da                	jne    4840 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    4866:	48 83 c1 10          	add    $0x10,%rcx
    486a:	48 83 c6 10          	add    $0x10,%rsi
    486e:	4c 39 c1             	cmp    %r8,%rcx
    4871:	75 b9                	jne    482c <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2c>
    4873:	49 ff c2             	inc    %r10
    4876:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    487d:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    4884:	75 96                	jne    481c <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1c>
    4886:	5b                   	pop    %rbx
    4887:	c3                   	retq   
    4888:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    488f:	00 

0000000000004890 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4890:	f3 0f 1e fa          	endbr64 
    4894:	41 57                	push   %r15
    4896:	48 89 d0             	mov    %rdx,%rax
    4899:	48 8d 92 00 00 04 00 	lea    0x40000(%rdx),%rdx
    48a0:	41 56                	push   %r14
    48a2:	41 55                	push   %r13
    48a4:	4c 8d a8 00 08 04 00 	lea    0x40800(%rax),%r13
    48ab:	41 54                	push   %r12
    48ad:	55                   	push   %rbp
    48ae:	53                   	push   %rbx
    48af:	48 83 ec 38          	sub    $0x38,%rsp
    48b3:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    48b8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    48bd:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    48c4:	00 00 
    48c6:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
    48cb:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    48d0:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    48d5:	49 c1 e4 0b          	shl    $0xb,%r12
    48d9:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
    48de:	4c 03 64 24 20       	add    0x20(%rsp),%r12
    48e3:	c5 f9 6f 55 00       	vmovdqa 0x0(%rbp),%xmm2
    48e8:	4c 8d bb 00 00 fc ff 	lea    -0x40000(%rbx),%r15
    48ef:	4d 89 e6             	mov    %r12,%r14
    48f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    48f8:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    48fd:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4902:	c5 f9 7f 14 24       	vmovdqa %xmm2,(%rsp)
    4907:	e8 c4 d9 ff ff       	callq  22d0 <__multf3@plt>
    490c:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    4911:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4915:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    4919:	e8 a2 da ff ff       	callq  23c0 <__addtf3@plt>
    491e:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4925:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    4929:	c5 f9 7f 45 00       	vmovdqa %xmm0,0x0(%rbp)
    492e:	49 83 c6 10          	add    $0x10,%r14
    4932:	4c 39 fb             	cmp    %r15,%rbx
    4935:	75 c1                	jne    48f8 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x68>
    4937:	48 83 c3 10          	add    $0x10,%rbx
    493b:	48 83 c5 10          	add    $0x10,%rbp
    493f:	49 39 dd             	cmp    %rbx,%r13
    4942:	75 9f                	jne    48e3 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x53>
    4944:	48 ff 44 24 10       	incq   0x10(%rsp)
    4949:	48 81 44 24 18 00 08 	addq   $0x800,0x18(%rsp)
    4950:	00 00 
    4952:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    4957:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    495d:	0f 85 68 ff ff ff    	jne    48cb <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3b>
    4963:	48 83 c4 38          	add    $0x38,%rsp
    4967:	5b                   	pop    %rbx
    4968:	5d                   	pop    %rbp
    4969:	41 5c                	pop    %r12
    496b:	41 5d                	pop    %r13
    496d:	41 5e                	pop    %r14
    496f:	41 5f                	pop    %r15
    4971:	c3                   	retq   
    4972:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4979:	00 00 00 00 
    497d:	0f 1f 00             	nopl   (%rax)

0000000000004980 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4980:	f3 0f 1e fa          	endbr64 
    4984:	41 57                	push   %r15
    4986:	41 56                	push   %r14
    4988:	4c 8d b6 00 00 04 00 	lea    0x40000(%rsi),%r14
    498f:	41 55                	push   %r13
    4991:	41 54                	push   %r12
    4993:	55                   	push   %rbp
    4994:	48 89 f5             	mov    %rsi,%rbp
    4997:	53                   	push   %rbx
    4998:	48 89 fb             	mov    %rdi,%rbx
    499b:	48 83 ec 18          	sub    $0x18,%rsp
    499f:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    49a4:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
    49a9:	4c 8d ad 00 08 00 00 	lea    0x800(%rbp),%r13
    49b0:	45 31 ff             	xor    %r15d,%r15d
    49b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    49b8:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    49be:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    49c3:	e8 08 d9 ff ff       	callq  22d0 <__multf3@plt>
    49c8:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    49cc:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    49d2:	e8 e9 d9 ff ff       	callq  23c0 <__addtf3@plt>
    49d7:	c4 a1 79 7f 04 3b    	vmovdqa %xmm0,(%rbx,%r15,1)
    49dd:	49 83 c7 10          	add    $0x10,%r15
    49e1:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    49e8:	75 ce                	jne    49b8 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x38>
    49ea:	48 83 c5 10          	add    $0x10,%rbp
    49ee:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    49f5:	49 39 ed             	cmp    %rbp,%r13
    49f8:	75 b6                	jne    49b0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x30>
    49fa:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4a01:	4d 39 f5             	cmp    %r14,%r13
    4a04:	74 05                	je     4a0b <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x8b>
    4a06:	4c 89 ed             	mov    %r13,%rbp
    4a09:	eb 99                	jmp    49a4 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x24>
    4a0b:	48 83 c4 18          	add    $0x18,%rsp
    4a0f:	5b                   	pop    %rbx
    4a10:	5d                   	pop    %rbp
    4a11:	41 5c                	pop    %r12
    4a13:	41 5d                	pop    %r13
    4a15:	41 5e                	pop    %r14
    4a17:	41 5f                	pop    %r15
    4a19:	c3                   	retq   
    4a1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004a20 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4a20:	f3 0f 1e fa          	endbr64 
    4a24:	41 57                	push   %r15
    4a26:	48 89 f8             	mov    %rdi,%rax
    4a29:	48 05 00 00 04 00    	add    $0x40000,%rax
    4a2f:	41 56                	push   %r14
    4a31:	41 55                	push   %r13
    4a33:	41 54                	push   %r12
    4a35:	55                   	push   %rbp
    4a36:	48 8d aa 00 00 04 00 	lea    0x40000(%rdx),%rbp
    4a3d:	53                   	push   %rbx
    4a3e:	48 83 ec 48          	sub    $0x48,%rsp
    4a42:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    4a47:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    4a4c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    4a51:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    4a58:	00 00 
    4a5a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4a5f:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    4a64:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    4a69:	49 c1 e5 04          	shl    $0x4,%r13
    4a6d:	4c 01 e8             	add    %r13,%rax
    4a70:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    4a75:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
    4a7a:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
    4a7f:	4c 03 6c 24 38       	add    0x38(%rsp),%r13
    4a84:	c5 f9 6f 13          	vmovdqa (%rbx),%xmm2
    4a88:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    4a8d:	4d 89 e6             	mov    %r12,%r14
    4a90:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    4a95:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4a9a:	c5 f9 7f 14 24       	vmovdqa %xmm2,(%rsp)
    4a9f:	e8 2c d8 ff ff       	callq  22d0 <__multf3@plt>
    4aa4:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    4aa9:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4aad:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    4ab1:	e8 0a d9 ff ff       	callq  23c0 <__addtf3@plt>
    4ab6:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4abd:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    4ac1:	c5 f9 7f 03          	vmovdqa %xmm0,(%rbx)
    4ac5:	49 83 c6 10          	add    $0x10,%r14
    4ac9:	49 39 ef             	cmp    %rbp,%r15
    4acc:	75 c2                	jne    4a90 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x70>
    4ace:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4ad5:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4adc:	4c 39 eb             	cmp    %r13,%rbx
    4adf:	75 a3                	jne    4a84 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x64>
    4ae1:	48 ff 44 24 18       	incq   0x18(%rsp)
    4ae6:	48 83 44 24 20 10    	addq   $0x10,0x20(%rsp)
    4aec:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    4af0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    4af5:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    4afb:	0f 85 5e ff ff ff    	jne    4a5f <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3f>
    4b01:	48 83 c4 48          	add    $0x48,%rsp
    4b05:	5b                   	pop    %rbx
    4b06:	5d                   	pop    %rbp
    4b07:	41 5c                	pop    %r12
    4b09:	41 5d                	pop    %r13
    4b0b:	41 5e                	pop    %r14
    4b0d:	41 5f                	pop    %r15
    4b0f:	c3                   	retq   

0000000000004b10 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4b10:	f3 0f 1e fa          	endbr64 
    4b14:	41 57                	push   %r15
    4b16:	48 89 f8             	mov    %rdi,%rax
    4b19:	48 05 00 08 04 00    	add    $0x40800,%rax
    4b1f:	41 56                	push   %r14
    4b21:	41 55                	push   %r13
    4b23:	41 54                	push   %r12
    4b25:	4c 8d a7 00 00 04 00 	lea    0x40000(%rdi),%r12
    4b2c:	55                   	push   %rbp
    4b2d:	53                   	push   %rbx
    4b2e:	48 83 ec 28          	sub    $0x28,%rsp
    4b32:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    4b37:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    4b3e:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    4b43:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    4b48:	48 89 04 24          	mov    %rax,(%rsp)
    4b4c:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    4b51:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    4b56:	4d 8d bc 24 00 00 fc 	lea    -0x40000(%r12),%r15
    4b5d:	ff 
    4b5e:	4c 89 fb             	mov    %r15,%rbx
    4b61:	4d 89 ee             	mov    %r13,%r14
    4b64:	0f 1f 40 00          	nopl   0x0(%rax)
    4b68:	c5 f9 6f 4d 00       	vmovdqa 0x0(%rbp),%xmm1
    4b6d:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    4b72:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4b79:	e8 52 d7 ff ff       	callq  22d0 <__multf3@plt>
    4b7e:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4b82:	c5 f9 6f 83 00 f8 ff 	vmovdqa -0x800(%rbx),%xmm0
    4b89:	ff 
    4b8a:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    4b91:	e8 2a d8 ff ff       	callq  23c0 <__addtf3@plt>
    4b96:	c5 f9 7f 83 00 f8 ff 	vmovdqa %xmm0,-0x800(%rbx)
    4b9d:	ff 
    4b9e:	4c 39 e3             	cmp    %r12,%rbx
    4ba1:	75 c5                	jne    4b68 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x58>
    4ba3:	49 83 c5 10          	add    $0x10,%r13
    4ba7:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    4bae:	4c 3b 2c 24          	cmp    (%rsp),%r13
    4bb2:	75 aa                	jne    4b5e <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x4e>
    4bb4:	4c 8d 63 10          	lea    0x10(%rbx),%r12
    4bb8:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    4bbe:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    4bc3:	75 87                	jne    4b4c <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3c>
    4bc5:	48 83 c4 28          	add    $0x28,%rsp
    4bc9:	5b                   	pop    %rbx
    4bca:	5d                   	pop    %rbp
    4bcb:	41 5c                	pop    %r12
    4bcd:	41 5d                	pop    %r13
    4bcf:	41 5e                	pop    %r14
    4bd1:	41 5f                	pop    %r15
    4bd3:	c3                   	retq   
    4bd4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4bdb:	00 00 00 00 
    4bdf:	90                   	nop

0000000000004be0 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4be0:	f3 0f 1e fa          	endbr64 
    4be4:	41 57                	push   %r15
    4be6:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    4bed:	41 56                	push   %r14
    4bef:	49 89 f6             	mov    %rsi,%r14
    4bf2:	41 55                	push   %r13
    4bf4:	41 54                	push   %r12
    4bf6:	49 89 d4             	mov    %rdx,%r12
    4bf9:	55                   	push   %rbp
    4bfa:	53                   	push   %rbx
    4bfb:	48 83 ec 18          	sub    $0x18,%rsp
    4bff:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    4c04:	48 89 04 24          	mov    %rax,(%rsp)
    4c08:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    4c0d:	4c 89 f5             	mov    %r14,%rbp
    4c10:	4d 8d ae 00 00 04 00 	lea    0x40000(%r14),%r13
    4c17:	45 31 ff             	xor    %r15d,%r15d
    4c1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4c20:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    4c26:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    4c2b:	e8 a0 d6 ff ff       	callq  22d0 <__multf3@plt>
    4c30:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4c34:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    4c3a:	e8 81 d7 ff ff       	callq  23c0 <__addtf3@plt>
    4c3f:	c4 a1 79 7f 04 3b    	vmovdqa %xmm0,(%rbx,%r15,1)
    4c45:	49 83 c7 10          	add    $0x10,%r15
    4c49:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    4c50:	75 ce                	jne    4c20 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    4c52:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    4c59:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4c60:	4c 39 ed             	cmp    %r13,%rbp
    4c63:	75 b2                	jne    4c17 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    4c65:	49 83 c6 10          	add    $0x10,%r14
    4c69:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    4c70:	4c 39 34 24          	cmp    %r14,(%rsp)
    4c74:	75 92                	jne    4c08 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x28>
    4c76:	48 83 c4 18          	add    $0x18,%rsp
    4c7a:	5b                   	pop    %rbx
    4c7b:	5d                   	pop    %rbp
    4c7c:	41 5c                	pop    %r12
    4c7e:	41 5d                	pop    %r13
    4c80:	41 5e                	pop    %r14
    4c82:	41 5f                	pop    %r15
    4c84:	c3                   	retq   
    4c85:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4c8c:	00 00 00 00 

0000000000004c90 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    4c90:	f3 0f 1e fa          	endbr64 
    4c94:	41 57                	push   %r15
    4c96:	41 56                	push   %r14
    4c98:	4c 8d b7 00 08 04 00 	lea    0x40800(%rdi),%r14
    4c9f:	41 55                	push   %r13
    4ca1:	41 54                	push   %r12
    4ca3:	55                   	push   %rbp
    4ca4:	53                   	push   %rbx
    4ca5:	48 83 ec 28          	sub    $0x28,%rsp
    4ca9:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    4cae:	48 8d 97 00 00 04 00 	lea    0x40000(%rdi),%rdx
    4cb5:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    4cba:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    4cc1:	00 
    4cc2:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    4cc7:	4c 8b 2c 24          	mov    (%rsp),%r13
    4ccb:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
    4cd0:	49 c1 e5 04          	shl    $0x4,%r13
    4cd4:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
    4cd9:	4c 03 6c 24 10       	add    0x10(%rsp),%r13
    4cde:	48 8d 9d 00 00 fc ff 	lea    -0x40000(%rbp),%rbx
    4ce5:	4d 89 ef             	mov    %r13,%r15
    4ce8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    4cef:	00 
    4cf0:	c4 c1 79 6f 0c 24    	vmovdqa (%r12),%xmm1
    4cf6:	c4 c1 79 6f 07       	vmovdqa (%r15),%xmm0
    4cfb:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    4d02:	e8 c9 d5 ff ff       	callq  22d0 <__multf3@plt>
    4d07:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    4d0b:	c5 f9 6f 83 00 f8 ff 	vmovdqa -0x800(%rbx),%xmm0
    4d12:	ff 
    4d13:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    4d1a:	e8 a1 d6 ff ff       	callq  23c0 <__addtf3@plt>
    4d1f:	c5 f9 7f 83 00 f8 ff 	vmovdqa %xmm0,-0x800(%rbx)
    4d26:	ff 
    4d27:	48 39 dd             	cmp    %rbx,%rbp
    4d2a:	75 c4                	jne    4cf0 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x60>
    4d2c:	48 83 c5 10          	add    $0x10,%rbp
    4d30:	49 83 c4 10          	add    $0x10,%r12
    4d34:	4c 39 f5             	cmp    %r14,%rbp
    4d37:	75 a5                	jne    4cde <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x4e>
    4d39:	48 ff 04 24          	incq   (%rsp)
    4d3d:	48 81 44 24 08 00 08 	addq   $0x800,0x8(%rsp)
    4d44:	00 00 
    4d46:	48 8b 04 24          	mov    (%rsp),%rax
    4d4a:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    4d50:	0f 85 71 ff ff ff    	jne    4cc7 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    4d56:	48 83 c4 28          	add    $0x28,%rsp
    4d5a:	5b                   	pop    %rbx
    4d5b:	5d                   	pop    %rbp
    4d5c:	41 5c                	pop    %r12
    4d5e:	41 5d                	pop    %r13
    4d60:	41 5e                	pop    %r14
    4d62:	41 5f                	pop    %r15
    4d64:	c3                   	retq   
    4d65:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4d6c:	00 00 00 00 

0000000000004d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>:
    4d70:	48 89 f8             	mov    %rdi,%rax
    4d73:	c3                   	retq   
    4d74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4d7b:	00 00 00 00 
    4d7f:	90                   	nop

0000000000004d80 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:
    4d80:	48 85 ff             	test   %rdi,%rdi
    4d83:	0f 94 c0             	sete   %al
    4d86:	c3                   	retq   
    4d87:	90                   	nop
    4d88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    4d8f:	00 

0000000000004d90 <std::_Head_base<0ul, char*, false>::_Head_base<char*&>(char*&)>:
    4d90:	48 89 fa             	mov    %rdi,%rdx
    4d93:	48 89 f7             	mov    %rsi,%rdi
    4d96:	e8 d5 ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4d9b:	48 8b 00             	mov    (%rax),%rax
    4d9e:	48 89 02             	mov    %rax,(%rdx)
    4da1:	c3                   	retq   
    4da2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4da9:	00 00 00 00 
    4dad:	0f 1f 00             	nopl   (%rax)

0000000000004db0 <std::_Head_base<1ul, void (*)(void*), false>::_Head_base<void (*)(void*)>(void (*&&)(void*))>:
    4db0:	48 89 fa             	mov    %rdi,%rdx
    4db3:	48 89 f7             	mov    %rsi,%rdi
    4db6:	e8 b5 ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4dbb:	48 8b 00             	mov    (%rax),%rax
    4dbe:	48 89 02             	mov    %rax,(%rdx)
    4dc1:	c3                   	retq   
    4dc2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4dc9:	00 00 00 00 
    4dcd:	0f 1f 00             	nopl   (%rax)

0000000000004dd0 <std::_Tuple_impl<1ul, void (*)(void*)>::_Tuple_impl<void (*)(void*)>(void (*&&)(void*))>:
    4dd0:	49 89 f8             	mov    %rdi,%r8
    4dd3:	48 89 f7             	mov    %rsi,%rdi
    4dd6:	e8 95 ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4ddb:	48 89 c6             	mov    %rax,%rsi
    4dde:	4c 89 c7             	mov    %r8,%rdi
    4de1:	eb cd                	jmp    4db0 <std::_Head_base<1ul, void (*)(void*), false>::_Head_base<void (*)(void*)>(void (*&&)(void*))>
    4de3:	90                   	nop
    4de4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4deb:	00 00 00 00 
    4def:	90                   	nop

0000000000004df0 <std::_Tuple_impl<0ul, char*, void (*)(void*)>::_Tuple_impl<char*&, void (*)(void*), void>(char*&, void (*&&)(void*))>:
    4df0:	48 89 f9             	mov    %rdi,%rcx
    4df3:	48 89 d7             	mov    %rdx,%rdi
    4df6:	e8 75 ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4dfb:	49 89 f1             	mov    %rsi,%r9
    4dfe:	48 89 cf             	mov    %rcx,%rdi
    4e01:	48 89 c6             	mov    %rax,%rsi
    4e04:	e8 c7 ff ff ff       	callq  4dd0 <std::_Tuple_impl<1ul, void (*)(void*)>::_Tuple_impl<void (*)(void*)>(void (*&&)(void*))>
    4e09:	4c 89 cf             	mov    %r9,%rdi
    4e0c:	e8 5f ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4e11:	48 89 c6             	mov    %rax,%rsi
    4e14:	48 8d 79 08          	lea    0x8(%rcx),%rdi
    4e18:	e9 73 ff ff ff       	jmpq   4d90 <std::_Head_base<0ul, char*, false>::_Head_base<char*&>(char*&)>
    4e1d:	90                   	nop
    4e1e:	66 90                	xchg   %ax,%ax

0000000000004e20 <std::tuple<char*, void (*)(void*)>::tuple<char*&, void (*)(void*), true>(char*&, void (*&&)(void*))>:
    4e20:	49 89 f8             	mov    %rdi,%r8
    4e23:	48 89 d7             	mov    %rdx,%rdi
    4e26:	e8 45 ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4e2b:	48 89 f7             	mov    %rsi,%rdi
    4e2e:	48 89 c2             	mov    %rax,%rdx
    4e31:	e8 3a ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4e36:	48 89 c6             	mov    %rax,%rsi
    4e39:	4c 89 c7             	mov    %r8,%rdi
    4e3c:	eb b2                	jmp    4df0 <std::_Tuple_impl<0ul, char*, void (*)(void*)>::_Tuple_impl<char*&, void (*)(void*), void>(char*&, void (*&&)(void*))>
    4e3e:	66 90                	xchg   %ax,%ax

0000000000004e40 <std::__uniq_ptr_impl<char, void (*)(void*)>::__uniq_ptr_impl<void (*)(void*)>(char*, void (*&&)(void*))>:
    4e40:	48 83 ec 08          	sub    $0x8,%rsp
    4e44:	49 89 f8             	mov    %rdi,%r8
    4e47:	48 89 d7             	mov    %rdx,%rdi
    4e4a:	48 89 34 24          	mov    %rsi,(%rsp)
    4e4e:	e8 1d ff ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4e53:	48 89 e6             	mov    %rsp,%rsi
    4e56:	48 89 c2             	mov    %rax,%rdx
    4e59:	4c 89 c7             	mov    %r8,%rdi
    4e5c:	e8 bf ff ff ff       	callq  4e20 <std::tuple<char*, void (*)(void*)>::tuple<char*&, void (*)(void*), true>(char*&, void (*&&)(void*))>
    4e61:	48 83 c4 08          	add    $0x8,%rsp
    4e65:	c3                   	retq   
    4e66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4e6d:	00 00 00 

0000000000004e70 <std::__uniq_ptr_data<char, void (*)(void*), true, true>::__uniq_ptr_impl<void (*)(void*)>(char*, void (*&&)(void*))>:
    4e70:	eb ce                	jmp    4e40 <std::__uniq_ptr_impl<char, void (*)(void*)>::__uniq_ptr_impl<void (*)(void*)>(char*, void (*&&)(void*))>
    4e72:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4e79:	00 00 00 00 
    4e7d:	0f 1f 00             	nopl   (%rax)

0000000000004e80 <std::_Head_base<0ul, char*, false>::_M_head(std::_Head_base<0ul, char*, false>&)>:
    4e80:	48 89 f8             	mov    %rdi,%rax
    4e83:	c3                   	retq   
    4e84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4e8b:	00 00 00 00 
    4e8f:	90                   	nop

0000000000004e90 <std::_Tuple_impl<0ul, char*, void (*)(void*)>::_M_head(std::_Tuple_impl<0ul, char*, void (*)(void*)>&)>:
    4e90:	48 83 c7 08          	add    $0x8,%rdi
    4e94:	eb ea                	jmp    4e80 <std::_Head_base<0ul, char*, false>::_M_head(std::_Head_base<0ul, char*, false>&)>
    4e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    4e9d:	00 00 00 

0000000000004ea0 <char*& std::__get_helper<0ul, char*, void (*)(void*)>(std::_Tuple_impl<0ul, char*, void (*)(void*)>&)>:
    4ea0:	eb ee                	jmp    4e90 <std::_Tuple_impl<0ul, char*, void (*)(void*)>::_M_head(std::_Tuple_impl<0ul, char*, void (*)(void*)>&)>
    4ea2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4ea9:	00 00 00 00 
    4ead:	0f 1f 00             	nopl   (%rax)

0000000000004eb0 <std::tuple_element<0ul, std::tuple<char*, void (*)(void*)> >::type const& std::get<0ul, char*, void (*)(void*)>(std::tuple<char*, void (*)(void*)> const&)>:
    4eb0:	eb ee                	jmp    4ea0 <char*& std::__get_helper<0ul, char*, void (*)(void*)>(std::_Tuple_impl<0ul, char*, void (*)(void*)>&)>
    4eb2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4eb9:	00 00 00 00 
    4ebd:	0f 1f 00             	nopl   (%rax)

0000000000004ec0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_ptr() const>:
    4ec0:	e8 eb ff ff ff       	callq  4eb0 <std::tuple_element<0ul, std::tuple<char*, void (*)(void*)> >::type const& std::get<0ul, char*, void (*)(void*)>(std::tuple<char*, void (*)(void*)> const&)>
    4ec5:	48 8b 00             	mov    (%rax),%rax
    4ec8:	c3                   	retq   
    4ec9:	90                   	nop
    4eca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004ed0 <std::unique_ptr<char, void (*)(void*)>::get() const>:
    4ed0:	eb ee                	jmp    4ec0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_ptr() const>
    4ed2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4ed9:	00 00 00 00 
    4edd:	0f 1f 00             	nopl   (%rax)

0000000000004ee0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_ptr()>:
    4ee0:	eb ce                	jmp    4eb0 <std::tuple_element<0ul, std::tuple<char*, void (*)(void*)> >::type const& std::get<0ul, char*, void (*)(void*)>(std::tuple<char*, void (*)(void*)> const&)>
    4ee2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4ee9:	00 00 00 00 
    4eed:	0f 1f 00             	nopl   (%rax)

0000000000004ef0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)>:
    4ef0:	48 83 ec 18          	sub    $0x18,%rsp
    4ef4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4efb:	00 00 
    4efd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4f02:	31 c0                	xor    %eax,%eax
    4f04:	e8 67 fe ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4f09:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4f0d:	48 89 fa             	mov    %rdi,%rdx
    4f10:	48 89 f7             	mov    %rsi,%rdi
    4f13:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    4f18:	e8 53 fe ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4f1d:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4f21:	48 89 e7             	mov    %rsp,%rdi
    4f24:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    4f28:	e8 43 fe ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4f2d:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4f31:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    4f35:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    4f3a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4f41:	00 00 
    4f43:	75 05                	jne    4f4a <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)+0x5a>
    4f45:	48 83 c4 18          	add    $0x18,%rsp
    4f49:	c3                   	retq   
    4f4a:	e8 51 d4 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    4f4f:	90                   	nop

0000000000004f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    4f50:	eb 9e                	jmp    4ef0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4f52:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4f59:	00 00 00 00 
    4f5d:	0f 1f 00             	nopl   (%rax)

0000000000004f60 <std::_Head_base<1ul, void (*)(void*), false>::_M_head(std::_Head_base<1ul, void (*)(void*), false>&)>:
    4f60:	48 89 f8             	mov    %rdi,%rax
    4f63:	c3                   	retq   
    4f64:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4f6b:	00 00 00 00 
    4f6f:	90                   	nop

0000000000004f70 <std::_Tuple_impl<1ul, void (*)(void*)>::_M_head(std::_Tuple_impl<1ul, void (*)(void*)>&)>:
    4f70:	eb ee                	jmp    4f60 <std::_Head_base<1ul, void (*)(void*), false>::_M_head(std::_Head_base<1ul, void (*)(void*), false>&)>
    4f72:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4f79:	00 00 00 00 
    4f7d:	0f 1f 00             	nopl   (%rax)

0000000000004f80 <void (*&std::__get_helper<1ul, void (*)(void*)>(std::_Tuple_impl<1ul, void (*)(void*)>&))(void*)>:
    4f80:	eb ee                	jmp    4f70 <std::_Tuple_impl<1ul, void (*)(void*)>::_M_head(std::_Tuple_impl<1ul, void (*)(void*)>&)>
    4f82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4f89:	00 00 00 00 
    4f8d:	0f 1f 00             	nopl   (%rax)

0000000000004f90 <std::tuple_element<1ul, std::tuple<char*, void (*)(void*)> >::type& std::get<1ul, char*, void (*)(void*)>(std::tuple<char*, void (*)(void*)>&)>:
    4f90:	eb ee                	jmp    4f80 <void (*&std::__get_helper<1ul, void (*)(void*)>(std::_Tuple_impl<1ul, void (*)(void*)>&))(void*)>
    4f92:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4f99:	00 00 00 00 
    4f9d:	0f 1f 00             	nopl   (%rax)

0000000000004fa0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_deleter()>:
    4fa0:	eb ee                	jmp    4f90 <std::tuple_element<1ul, std::tuple<char*, void (*)(void*)> >::type& std::get<1ul, char*, void (*)(void*)>(std::tuple<char*, void (*)(void*)>&)>
    4fa2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4fa9:	00 00 00 00 
    4fad:	0f 1f 00             	nopl   (%rax)

0000000000004fb0 <std::unique_ptr<char, void (*)(void*)>::get_deleter()>:
    4fb0:	eb ee                	jmp    4fa0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_deleter()>
    4fb2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4fb9:	00 00 00 00 
    4fbd:	0f 1f 00             	nopl   (%rax)

0000000000004fc0 <std::unique_ptr<char, void (*)(void*)>::~unique_ptr()>:
    4fc0:	53                   	push   %rbx
    4fc1:	49 89 f8             	mov    %rdi,%r8
    4fc4:	e8 17 ff ff ff       	callq  4ee0 <std::__uniq_ptr_impl<char, void (*)(void*)>::_M_ptr()>
    4fc9:	48 83 38 00          	cmpq   $0x0,(%rax)
    4fcd:	48 89 c3             	mov    %rax,%rbx
    4fd0:	74 18                	je     4fea <std::unique_ptr<char, void (*)(void*)>::~unique_ptr()+0x2a>
    4fd2:	4c 89 c7             	mov    %r8,%rdi
    4fd5:	e8 d6 ff ff ff       	callq  4fb0 <std::unique_ptr<char, void (*)(void*)>::get_deleter()>
    4fda:	48 89 df             	mov    %rbx,%rdi
    4fdd:	48 89 c2             	mov    %rax,%rdx
    4fe0:	e8 8b fd ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4fe5:	48 8b 38             	mov    (%rax),%rdi
    4fe8:	ff 12                	callq  *(%rdx)
    4fea:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    4ff1:	5b                   	pop    %rbx
    4ff2:	c3                   	retq   
    4ff3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4ffa:	00 00 00 00 
    4ffe:	66 90                	xchg   %ax,%ax

0000000000005000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    5000:	48 89 f8             	mov    %rdi,%rax
    5003:	c3                   	retq   
    5004:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    500b:	00 00 00 00 
    500f:	90                   	nop

0000000000005010 <std::unique_ptr<char, void (*)(void*)>::unique_ptr<void (*)(void*), void>(char*, std::enable_if<!std::is_lvalue_reference<void (*)(void*)>::value, void (*&&)(void*)>::type) [clone .constprop.0]>:
    5010:	49 89 f8             	mov    %rdi,%r8
    5013:	48 89 d7             	mov    %rdx,%rdi
    5016:	e8 55 fd ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    501b:	48 89 c2             	mov    %rax,%rdx
    501e:	4c 89 c7             	mov    %r8,%rdi
    5021:	e9 4a fe ff ff       	jmpq   4e70 <std::__uniq_ptr_data<char, void (*)(void*), true, true>::__uniq_ptr_impl<void (*)(void*)>(char*, void (*&&)(void*))>
    5026:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    502d:	00 00 00 

0000000000005030 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>:
    5030:	48 89 f0             	mov    %rsi,%rax
    5033:	48 29 f8             	sub    %rdi,%rax
    5036:	c3                   	retq   
    5037:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    503e:	00 00 

0000000000005040 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
    5040:	eb ee                	jmp    5030 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>
    5042:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5049:	00 00 00 00 
    504d:	0f 1f 00             	nopl   (%rax)

0000000000005050 <std::setprecision(int) [clone .constprop.0]>:
    5050:	b8 02 00 00 00       	mov    $0x2,%eax
    5055:	c3                   	retq   
    5056:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    505d:	00 00 00 

0000000000005060 <std::operator~(std::_Ios_Fmtflags) [clone .constprop.0]>:
    5060:	b8 fb fe ff ff       	mov    $0xfffffefb,%eax
    5065:	c3                   	retq   
    5066:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    506d:	00 00 00 

0000000000005070 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__niter_wrap<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >* const&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .constprop.0] [clone .isra.0]>:
    5070:	c3                   	retq   
    5071:	90                   	nop
    5072:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5079:	00 00 00 00 
    507d:	0f 1f 00             	nopl   (%rax)

0000000000005080 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<double, void>(double const&) [clone .isra.0]>:
    5080:	c5 fb 11 07          	vmovsd %xmm0,(%rdi)
    5084:	c3                   	retq   
    5085:	90                   	nop
    5086:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    508d:	00 00 00 

0000000000005090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>:
    5090:	c3                   	retq   
    5091:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5098:	00 00 00 00 
    509c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000050a0 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>:
    50a0:	e8 eb ff ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    50a5:	c5 fb 10 d0          	vmovsd %xmm0,%xmm0,%xmm2
    50a9:	c5 f3 10 c1          	vmovsd %xmm1,%xmm1,%xmm0
    50ad:	e8 de ff ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    50b2:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    50b6:	0f 97 c0             	seta   %al
    50b9:	c3                   	retq   
    50ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000050c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>:
    50c0:	eb de                	jmp    50a0 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    50c2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    50c9:	00 00 00 00 
    50cd:	0f 1f 00             	nopl   (%rax)

00000000000050d0 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    50d0:	48 83 ec 08          	sub    $0x8,%rsp
    50d4:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    50d8:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    50dc:	e8 df ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    50e1:	84 c0                	test   %al,%al
    50e3:	74 2b                	je     5110 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
    50e5:	c5 f3 10 c1          	vmovsd %xmm1,%xmm1,%xmm0
    50e9:	c5 fb 10 09          	vmovsd (%rcx),%xmm1
    50ed:	e8 ce ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    50f2:	84 c0                	test   %al,%al
    50f4:	75 38                	jne    512e <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5e>
    50f6:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    50fa:	e8 c1 ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    50ff:	84 c0                	test   %al,%al
    5101:	74 3d                	je     5140 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x70>
    5103:	48 89 ce             	mov    %rcx,%rsi
    5106:	48 83 c4 08          	add    $0x8,%rsp
    510a:	e9 41 fe ff ff       	jmpq   4f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    510f:	90                   	nop
    5110:	c5 fb 10 09          	vmovsd (%rcx),%xmm1
    5114:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    5118:	e8 a3 ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    511d:	84 c0                	test   %al,%al
    511f:	75 1f                	jne    5140 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x70>
    5121:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    5125:	e8 96 ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    512a:	84 c0                	test   %al,%al
    512c:	75 d5                	jne    5103 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x33>
    512e:	48 89 d6             	mov    %rdx,%rsi
    5131:	48 83 c4 08          	add    $0x8,%rsp
    5135:	e9 16 fe ff ff       	jmpq   4f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    513a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5140:	48 83 c4 08          	add    $0x8,%rsp
    5144:	e9 07 fe ff ff       	jmpq   4f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5149:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005150 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    5150:	41 54                	push   %r12
    5152:	49 89 fc             	mov    %rdi,%r12
    5155:	55                   	push   %rbp
    5156:	48 89 d5             	mov    %rdx,%rbp
    5159:	53                   	push   %rbx
    515a:	48 89 f3             	mov    %rsi,%rbx
    515d:	eb 05                	jmp    5164 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x14>
    515f:	90                   	nop
    5160:	49 83 c4 08          	add    $0x8,%r12
    5164:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    5169:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    516f:	e8 4c ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    5174:	84 c0                	test   %al,%al
    5176:	75 e8                	jne    5160 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x10>
    5178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    517f:	00 
    5180:	c5 fb 10 45 00       	vmovsd 0x0(%rbp),%xmm0
    5185:	c5 fb 10 4b f8       	vmovsd -0x8(%rbx),%xmm1
    518a:	48 83 eb 08          	sub    $0x8,%rbx
    518e:	e8 2d ff ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    5193:	84 c0                	test   %al,%al
    5195:	75 e9                	jne    5180 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    5197:	49 39 dc             	cmp    %rbx,%r12
    519a:	73 14                	jae    51b0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x60>
    519c:	48 89 de             	mov    %rbx,%rsi
    519f:	4c 89 e7             	mov    %r12,%rdi
    51a2:	e8 a9 fd ff ff       	callq  4f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    51a7:	eb b7                	jmp    5160 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x10>
    51a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    51b0:	5b                   	pop    %rbx
    51b1:	5d                   	pop    %rbp
    51b2:	4c 89 e0             	mov    %r12,%rax
    51b5:	41 5c                	pop    %r12
    51b7:	c3                   	retq   
    51b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    51bf:	00 

00000000000051c0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition_pivot<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>:
    51c0:	41 55                	push   %r13
    51c2:	48 89 f0             	mov    %rsi,%rax
    51c5:	48 29 f8             	sub    %rdi,%rax
    51c8:	41 54                	push   %r12
    51ca:	48 89 c2             	mov    %rax,%rdx
    51cd:	48 c1 fa 03          	sar    $0x3,%rdx
    51d1:	48 c1 e8 3f          	shr    $0x3f,%rax
    51d5:	55                   	push   %rbp
    51d6:	48 01 d0             	add    %rdx,%rax
    51d9:	4c 8d 6f 08          	lea    0x8(%rdi),%r13
    51dd:	48 d1 f8             	sar    %rax
    51e0:	48 89 f5             	mov    %rsi,%rbp
    51e3:	48 8d 14 c7          	lea    (%rdi,%rax,8),%rdx
    51e7:	48 8d 4e f8          	lea    -0x8(%rsi),%rcx
    51eb:	4c 89 ee             	mov    %r13,%rsi
    51ee:	49 89 fc             	mov    %rdi,%r12
    51f1:	e8 da fe ff ff       	callq  50d0 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    51f6:	48 89 ee             	mov    %rbp,%rsi
    51f9:	5d                   	pop    %rbp
    51fa:	4c 89 e2             	mov    %r12,%rdx
    51fd:	41 5c                	pop    %r12
    51ff:	4c 89 ef             	mov    %r13,%rdi
    5202:	41 5d                	pop    %r13
    5204:	e9 47 ff ff ff       	jmpq   5150 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    5209:	90                   	nop
    520a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005210 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>:
    5210:	e9 8b fe ff ff       	jmpq   50a0 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    5215:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    521c:	00 00 00 00 

0000000000005220 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)>:
    5220:	48 83 ec 18          	sub    $0x18,%rsp
    5224:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    522b:	00 00 
    522d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5232:	31 c0                	xor    %eax,%eax
    5234:	e8 37 fb ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5239:	c5 fb 10 18          	vmovsd (%rax),%xmm3
    523d:	48 83 ef 08          	sub    $0x8,%rdi
    5241:	c5 fb 11 1c 24       	vmovsd %xmm3,(%rsp)
    5246:	eb 1a                	jmp    5262 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x42>
    5248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    524f:	00 
    5250:	e8 1b fb ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5255:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    5259:	48 83 ef 08          	sub    $0x8,%rdi
    525d:	c5 fb 11 47 10       	vmovsd %xmm0,0x10(%rdi)
    5262:	c5 fb 10 0f          	vmovsd (%rdi),%xmm1
    5266:	c5 e3 10 c3          	vmovsd %xmm3,%xmm3,%xmm0
    526a:	48 8d 57 08          	lea    0x8(%rdi),%rdx
    526e:	e8 9d ff ff ff       	callq  5210 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    5273:	84 c0                	test   %al,%al
    5275:	75 d9                	jne    5250 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x30>
    5277:	48 89 e7             	mov    %rsp,%rdi
    527a:	e8 f1 fa ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    527f:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    5283:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    5287:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    528c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5293:	00 00 
    5295:	75 05                	jne    529c <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x7c>
    5297:	48 83 c4 18          	add    $0x18,%rsp
    529b:	c3                   	retq   
    529c:	e8 ff d0 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    52a1:	90                   	nop
    52a2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    52a9:	00 00 00 00 
    52ad:	0f 1f 00             	nopl   (%rax)

00000000000052b0 <bool __gnu_cxx::__ops::_Iter_less_val::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >&) const [clone .constprop.0] [clone .isra.0]>:
    52b0:	e9 eb fd ff ff       	jmpq   50a0 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    52b5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    52bc:	00 00 00 00 

00000000000052c0 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]>:
    52c0:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
    52c4:	49 89 d1             	mov    %rdx,%r9
    52c7:	48 89 c2             	mov    %rax,%rdx
    52ca:	48 c1 ea 3f          	shr    $0x3f,%rdx
    52ce:	48 83 ec 08          	sub    $0x8,%rsp
    52d2:	48 01 c2             	add    %rax,%rdx
    52d5:	49 89 f8             	mov    %rdi,%r8
    52d8:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    52dd:	48 d1 fa             	sar    %rdx
    52e0:	c5 fb 10 c8          	vmovsd %xmm0,%xmm0,%xmm1
    52e4:	4c 39 ce             	cmp    %r9,%rsi
    52e7:	7f 33                	jg     531c <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x5c>
    52e9:	eb 6a                	jmp    5355 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x95>
    52eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    52f0:	48 89 cf             	mov    %rcx,%rdi
    52f3:	e8 78 fa ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    52f8:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    52fc:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    5300:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
    5304:	48 89 f0             	mov    %rsi,%rax
    5307:	48 c1 e8 3f          	shr    $0x3f,%rax
    530b:	48 01 f0             	add    %rsi,%rax
    530e:	48 d1 f8             	sar    %rax
    5311:	48 89 d6             	mov    %rdx,%rsi
    5314:	49 39 d1             	cmp    %rdx,%r9
    5317:	7d 37                	jge    5350 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x90>
    5319:	48 89 c2             	mov    %rax,%rdx
    531c:	49 8d 0c d0          	lea    (%r8,%rdx,8),%rcx
    5320:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    5324:	49 8d 34 f0          	lea    (%r8,%rsi,8),%rsi
    5328:	e8 83 ff ff ff       	callq  52b0 <bool __gnu_cxx::__ops::_Iter_less_val::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >&) const [clone .constprop.0] [clone .isra.0]>
    532d:	84 c0                	test   %al,%al
    532f:	75 bf                	jne    52f0 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x30>
    5331:	48 89 e7             	mov    %rsp,%rdi
    5334:	e8 37 fa ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5339:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    533d:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    5341:	48 83 c4 08          	add    $0x8,%rsp
    5345:	c3                   	retq   
    5346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    534d:	00 00 00 
    5350:	48 89 ce             	mov    %rcx,%rsi
    5353:	eb dc                	jmp    5331 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x71>
    5355:	48 8d 34 f7          	lea    (%rdi,%rsi,8),%rsi
    5359:	eb d6                	jmp    5331 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x71>
    535b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005360 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    5360:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    5364:	48 89 c1             	mov    %rax,%rcx
    5367:	48 c1 e9 3f          	shr    $0x3f,%rcx
    536b:	48 01 c1             	add    %rax,%rcx
    536e:	48 83 ec 08          	sub    $0x8,%rsp
    5372:	48 d1 f9             	sar    %rcx
    5375:	49 89 f8             	mov    %rdi,%r8
    5378:	49 89 f1             	mov    %rsi,%r9
    537b:	49 89 d2             	mov    %rdx,%r10
    537e:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    5383:	48 39 ce             	cmp    %rcx,%rsi
    5386:	7d 4a                	jge    53d2 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x72>
    5388:	48 89 f2             	mov    %rsi,%rdx
    538b:	eb 06                	jmp    5393 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x33>
    538d:	0f 1f 00             	nopl   (%rax)
    5390:	48 89 f2             	mov    %rsi,%rdx
    5393:	48 8d 42 01          	lea    0x1(%rdx),%rax
    5397:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    539b:	48 c1 e0 04          	shl    $0x4,%rax
    539f:	49 8d 3c 00          	lea    (%r8,%rax,1),%rdi
    53a3:	c4 c1 7b 10 4c 00 f8 	vmovsd -0x8(%r8,%rax,1),%xmm1
    53aa:	c5 fb 10 07          	vmovsd (%rdi),%xmm0
    53ae:	e8 0d fd ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    53b3:	84 c0                	test   %al,%al
    53b5:	74 07                	je     53be <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x5e>
    53b7:	48 ff ce             	dec    %rsi
    53ba:	49 8d 3c f0          	lea    (%r8,%rsi,8),%rdi
    53be:	e8 ad f9 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    53c3:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    53c7:	c4 c1 7b 11 04 d0    	vmovsd %xmm0,(%r8,%rdx,8)
    53cd:	48 39 ce             	cmp    %rcx,%rsi
    53d0:	7c be                	jl     5390 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    53d2:	41 f6 c2 01          	test   $0x1,%r10b
    53d6:	75 16                	jne    53ee <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x8e>
    53d8:	49 83 ea 02          	sub    $0x2,%r10
    53dc:	4c 89 d0             	mov    %r10,%rax
    53df:	48 c1 e8 3f          	shr    $0x3f,%rax
    53e3:	49 01 c2             	add    %rax,%r10
    53e6:	49 d1 fa             	sar    %r10
    53e9:	49 39 f2             	cmp    %rsi,%r10
    53ec:	74 22                	je     5410 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xb0>
    53ee:	48 89 e7             	mov    %rsp,%rdi
    53f1:	e8 7a f9 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    53f6:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    53fa:	4c 89 ca             	mov    %r9,%rdx
    53fd:	4c 89 c7             	mov    %r8,%rdi
    5400:	e8 bb fe ff ff       	callq  52c0 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]>
    5405:	48 83 c4 08          	add    $0x8,%rsp
    5409:	c3                   	retq   
    540a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5410:	48 8d 46 01          	lea    0x1(%rsi),%rax
    5414:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    5418:	48 c1 e0 04          	shl    $0x4,%rax
    541c:	49 8d 7c 00 f8       	lea    -0x8(%r8,%rax,1),%rdi
    5421:	e8 4a f9 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5426:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    542a:	c4 c1 7b 11 04 f0    	vmovsd %xmm0,(%r8,%rsi,8)
    5430:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
    5434:	eb b8                	jmp    53ee <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x8e>
    5436:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    543d:	00 00 00 

0000000000005440 <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>:
    5440:	48 83 ec 18          	sub    $0x18,%rsp
    5444:	49 89 f8             	mov    %rdi,%r8
    5447:	48 89 d7             	mov    %rdx,%rdi
    544a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5451:	00 00 
    5453:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5458:	31 c0                	xor    %eax,%eax
    545a:	e8 11 f9 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    545f:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    5463:	4c 89 c7             	mov    %r8,%rdi
    5466:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    546b:	e8 00 f9 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5470:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    5474:	48 89 e7             	mov    %rsp,%rdi
    5477:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    547b:	e8 f0 f8 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5480:	4c 29 c6             	sub    %r8,%rsi
    5483:	48 c1 fe 03          	sar    $0x3,%rsi
    5487:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    548b:	48 89 f2             	mov    %rsi,%rdx
    548e:	4c 89 c7             	mov    %r8,%rdi
    5491:	31 f6                	xor    %esi,%esi
    5493:	e8 c8 fe ff ff       	callq  5360 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    5498:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    549d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    54a4:	00 00 
    54a6:	75 05                	jne    54ad <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x6d>
    54a8:	48 83 c4 18          	add    $0x18,%rsp
    54ac:	c3                   	retq   
    54ad:	e8 ee ce ff ff       	callq  23a0 <__stack_chk_fail@plt>
    54b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    54b9:	00 00 00 00 
    54bd:	0f 1f 00             	nopl   (%rax)

00000000000054c0 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>:
    54c0:	41 54                	push   %r12
    54c2:	48 29 fe             	sub    %rdi,%rsi
    54c5:	55                   	push   %rbp
    54c6:	53                   	push   %rbx
    54c7:	48 83 ec 10          	sub    $0x10,%rsp
    54cb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    54d2:	00 00 
    54d4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    54d9:	31 c0                	xor    %eax,%eax
    54db:	48 83 fe 08          	cmp    $0x8,%rsi
    54df:	7e 5d                	jle    553e <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x7e>
    54e1:	48 89 f5             	mov    %rsi,%rbp
    54e4:	48 c1 fd 03          	sar    $0x3,%rbp
    54e8:	48 8d 45 fe          	lea    -0x2(%rbp),%rax
    54ec:	b9 02 00 00 00       	mov    $0x2,%ecx
    54f1:	48 99                	cqto   
    54f3:	48 f7 f9             	idiv   %rcx
    54f6:	48 89 fb             	mov    %rdi,%rbx
    54f9:	48 89 e7             	mov    %rsp,%rdi
    54fc:	49 89 c3             	mov    %rax,%r11
    54ff:	e8 6c f8 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    5504:	49 89 c4             	mov    %rax,%r12
    5507:	eb 0a                	jmp    5513 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x53>
    5509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5510:	49 ff cb             	dec    %r11
    5513:	4a 8d 3c db          	lea    (%rbx,%r11,8),%rdi
    5517:	e8 54 f8 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    551c:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    5520:	48 89 ea             	mov    %rbp,%rdx
    5523:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    5528:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    552e:	4c 89 de             	mov    %r11,%rsi
    5531:	48 89 df             	mov    %rbx,%rdi
    5534:	e8 27 fe ff ff       	callq  5360 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    5539:	4d 85 db             	test   %r11,%r11
    553c:	75 d2                	jne    5510 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x50>
    553e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    5543:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    554a:	00 00 
    554c:	75 09                	jne    5557 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x97>
    554e:	48 83 c4 10          	add    $0x10,%rsp
    5552:	5b                   	pop    %rbx
    5553:	5d                   	pop    %rbp
    5554:	41 5c                	pop    %r12
    5556:	c3                   	retq   
    5557:	e8 44 ce ff ff       	callq  23a0 <__stack_chk_fail@plt>
    555c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005560 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    5560:	41 55                	push   %r13
    5562:	49 89 f5             	mov    %rsi,%r13
    5565:	41 54                	push   %r12
    5567:	49 89 d4             	mov    %rdx,%r12
    556a:	55                   	push   %rbp
    556b:	48 89 fd             	mov    %rdi,%rbp
    556e:	53                   	push   %rbx
    556f:	48 83 ec 08          	sub    $0x8,%rsp
    5573:	e8 48 ff ff ff       	callq  54c0 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>
    5578:	4d 39 e5             	cmp    %r12,%r13
    557b:	73 3d                	jae    55ba <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5a>
    557d:	4c 89 eb             	mov    %r13,%rbx
    5580:	eb 0f                	jmp    5591 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x31>
    5582:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    5588:	48 83 c3 08          	add    $0x8,%rbx
    558c:	49 39 dc             	cmp    %rbx,%r12
    558f:	76 29                	jbe    55ba <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5a>
    5591:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    5596:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    559a:	e8 21 fb ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    559f:	84 c0                	test   %al,%al
    55a1:	74 e5                	je     5588 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x28>
    55a3:	48 89 da             	mov    %rbx,%rdx
    55a6:	4c 89 ee             	mov    %r13,%rsi
    55a9:	48 89 ef             	mov    %rbp,%rdi
    55ac:	48 83 c3 08          	add    $0x8,%rbx
    55b0:	e8 8b fe ff ff       	callq  5440 <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>
    55b5:	49 39 dc             	cmp    %rbx,%r12
    55b8:	77 d7                	ja     5591 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x31>
    55ba:	48 83 c4 08          	add    $0x8,%rsp
    55be:	5b                   	pop    %rbx
    55bf:	5d                   	pop    %rbp
    55c0:	41 5c                	pop    %r12
    55c2:	41 5d                	pop    %r13
    55c4:	c3                   	retq   
    55c5:	90                   	nop
    55c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    55cd:	00 00 00 

00000000000055d0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>:
    55d0:	48 89 f8             	mov    %rdi,%rax
    55d3:	c3                   	retq   
    55d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    55db:	00 00 00 00 
    55df:	90                   	nop

00000000000055e0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
    55e0:	48 89 37             	mov    %rsi,(%rdi)
    55e3:	c3                   	retq   
    55e4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    55eb:	00 00 00 00 
    55ef:	90                   	nop

00000000000055f0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
    55f0:	48 89 f8             	mov    %rdi,%rax
    55f3:	c3                   	retq   
    55f4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    55fb:	00 00 00 00 
    55ff:	90                   	nop

0000000000005600 <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    5600:	48 83 ec 18          	sub    $0x18,%rsp
    5604:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    560b:	00 00 
    560d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5612:	31 c0                	xor    %eax,%eax
    5614:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
    5618:	e8 d3 ff ff ff       	callq  55f0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    561d:	c4 e1 fb 2a c0       	vcvtsi2sd %rax,%xmm0,%xmm0
    5622:	48 89 e7             	mov    %rsp,%rdi
    5625:	c5 fb 5e 05 73 2e 00 	vdivsd 0x2e73(%rip),%xmm0,%xmm0        # 84a0 <_IO_stdin_used+0x4a0>
    562c:	00 
    562d:	e8 4e fa ff ff       	callq  5080 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<double, void>(double const&) [clone .isra.0]>
    5632:	c5 fb 10 04 24       	vmovsd (%rsp),%xmm0
    5637:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    563c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5643:	00 00 
    5645:	75 05                	jne    564c <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x4c>
    5647:	48 83 c4 18          	add    $0x18,%rsp
    564b:	c3                   	retq   
    564c:	e8 4f cd ff ff       	callq  23a0 <__stack_chk_fail@plt>
    5651:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5658:	00 00 00 00 
    565c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005660 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<double, std::ratio<1l, 1000l> > >::value, std::chrono::duration<double, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    5660:	eb 9e                	jmp    5600 <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    5662:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5669:	00 00 00 00 
    566d:	0f 1f 00             	nopl   (%rax)

0000000000005670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>:
    5670:	53                   	push   %rbx
    5671:	48 89 fb             	mov    %rdi,%rbx
    5674:	48 8b 3e             	mov    (%rsi),%rdi
    5677:	e8 e4 ff ff ff       	callq  5660 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<double, std::ratio<1l, 1000l> > >::value, std::chrono::duration<double, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    567c:	e8 0f fa ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5681:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    5685:	5b                   	pop    %rbx
    5686:	c3                   	retq   
    5687:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    568e:	00 00 

0000000000005690 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    5690:	48 83 ec 18          	sub    $0x18,%rsp
    5694:	49 89 f0             	mov    %rsi,%r8
    5697:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    569e:	00 00 
    56a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    56a5:	31 c0                	xor    %eax,%eax
    56a7:	e8 44 ff ff ff       	callq  55f0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    56ac:	4c 89 c7             	mov    %r8,%rdi
    56af:	48 89 c6             	mov    %rax,%rsi
    56b2:	e8 39 ff ff ff       	callq  55f0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    56b7:	48 29 c6             	sub    %rax,%rsi
    56ba:	48 89 e7             	mov    %rsp,%rdi
    56bd:	e8 1e ff ff ff       	callq  55e0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
    56c2:	48 8b 04 24          	mov    (%rsp),%rax
    56c6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    56cb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    56d2:	00 00 
    56d4:	75 05                	jne    56db <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x4b>
    56d6:	48 83 c4 18          	add    $0x18,%rsp
    56da:	c3                   	retq   
    56db:	e8 c0 cc ff ff       	callq  23a0 <__stack_chk_fail@plt>

00000000000056e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>:
    56e0:	48 83 ec 08          	sub    $0x8,%rsp
    56e4:	48 89 fa             	mov    %rdi,%rdx
    56e7:	48 89 f7             	mov    %rsi,%rdi
    56ea:	e8 e1 fe ff ff       	callq  55d0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    56ef:	48 8b 3a             	mov    (%rdx),%rdi
    56f2:	48 89 c6             	mov    %rax,%rsi
    56f5:	e8 d6 fe ff ff       	callq  55d0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    56fa:	48 89 c7             	mov    %rax,%rdi
    56fd:	48 83 c4 08          	add    $0x8,%rsp
    5701:	eb 8d                	jmp    5690 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    5703:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    570a:	00 00 00 00 
    570e:	66 90                	xchg   %ax,%ax

0000000000005710 <std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>:
    5710:	48 89 fa             	mov    %rdi,%rdx
    5713:	8b 3f                	mov    (%rdi),%edi
    5715:	e8 d6 cf ff ff       	callq  26f0 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    571a:	89 02                	mov    %eax,(%rdx)
    571c:	c3                   	retq   
    571d:	0f 1f 00             	nopl   (%rax)

0000000000005720 <std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>:
    5720:	48 89 fa             	mov    %rdi,%rdx
    5723:	8b 3f                	mov    (%rdi),%edi
    5725:	e8 d6 cf ff ff       	callq  2700 <std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    572a:	89 02                	mov    %eax,(%rdx)
    572c:	c3                   	retq   
    572d:	90                   	nop
    572e:	66 90                	xchg   %ax,%ax

0000000000005730 <std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) [clone .constprop.0] [clone .isra.0]>:
    5730:	e8 2b f9 ff ff       	callq  5060 <std::operator~(std::_Ios_Fmtflags) [clone .constprop.0]>
    5735:	4c 8d 47 18          	lea    0x18(%rdi),%r8
    5739:	89 c6                	mov    %eax,%esi
    573b:	4c 89 c7             	mov    %r8,%rdi
    573e:	e8 cd ff ff ff       	callq  5710 <std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>
    5743:	be 04 01 00 00       	mov    $0x104,%esi
    5748:	bf 04 00 00 00       	mov    $0x4,%edi
    574d:	e8 9e cf ff ff       	callq  26f0 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    5752:	89 c6                	mov    %eax,%esi
    5754:	4c 89 c7             	mov    %r8,%rdi
    5757:	eb c7                	jmp    5720 <std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>
    5759:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005760 <std::fixed(std::ios_base&)>:
    5760:	f3 0f 1e fa          	endbr64 
    5764:	49 89 f9             	mov    %rdi,%r9
    5767:	e8 c4 ff ff ff       	callq  5730 <std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) [clone .constprop.0] [clone .isra.0]>
    576c:	4c 89 c8             	mov    %r9,%rax
    576f:	c3                   	retq   

0000000000005770 <std::type_info::name() const [clone .isra.0]>:
    5770:	31 c0                	xor    %eax,%eax
    5772:	80 3f 2a             	cmpb   $0x2a,(%rdi)
    5775:	0f 94 c0             	sete   %al
    5778:	48 01 f8             	add    %rdi,%rax
    577b:	c3                   	retq   
    577c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005780 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>:
    5780:	48 89 37             	mov    %rsi,(%rdi)
    5783:	c3                   	retq   
    5784:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    578b:	00 00 00 00 
    578f:	90                   	nop

0000000000005790 <std::__lg(long)>:
    5790:	b8 3f 00 00 00       	mov    $0x3f,%eax
    5795:	f3 48 0f bd ff       	lzcnt  %rdi,%rdi
    579a:	29 f8                	sub    %edi,%eax
    579c:	48 98                	cltq   
    579e:	c3                   	retq   
    579f:	90                   	nop

00000000000057a0 <std::char_traits<char>::length(char const*)>:
    57a0:	e9 db ca ff ff       	jmpq   2280 <strlen@plt>
    57a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    57ac:	00 00 00 00 

00000000000057b0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    57b0:	49 89 f2             	mov    %rsi,%r10
    57b3:	49 29 fa             	sub    %rdi,%r10
    57b6:	4c 29 d2             	sub    %r10,%rdx
    57b9:	49 89 d1             	mov    %rdx,%r9
    57bc:	48 39 fe             	cmp    %rdi,%rsi
    57bf:	74 1f                	je     57e0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x30>
    57c1:	48 83 ec 08          	sub    $0x8,%rsp
    57c5:	48 89 fe             	mov    %rdi,%rsi
    57c8:	4c 89 d2             	mov    %r10,%rdx
    57cb:	4c 89 cf             	mov    %r9,%rdi
    57ce:	e8 1d cc ff ff       	callq  23f0 <memmove@plt>
    57d3:	48 83 c4 08          	add    $0x8,%rsp
    57d7:	c3                   	retq   
    57d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    57df:	00 
    57e0:	48 89 d0             	mov    %rdx,%rax
    57e3:	c3                   	retq   
    57e4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    57eb:	00 00 00 00 
    57ef:	90                   	nop

00000000000057f0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a2<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    57f0:	eb be                	jmp    57b0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    57f2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    57f9:	00 00 00 00 
    57fd:	0f 1f 00             	nopl   (%rax)

0000000000005800 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a1<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    5800:	eb ee                	jmp    57f0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a2<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5802:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5809:	00 00 00 00 
    580d:	0f 1f 00             	nopl   (%rax)

0000000000005810 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>:
    5810:	48 83 ec 08          	sub    $0x8,%rsp
    5814:	49 89 f8             	mov    %rdi,%r8
    5817:	48 89 d7             	mov    %rdx,%rdi
    581a:	e8 e1 f7 ff ff       	callq  5000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    581f:	48 89 f7             	mov    %rsi,%rdi
    5822:	48 89 c2             	mov    %rax,%rdx
    5825:	e8 d6 f7 ff ff       	callq  5000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    582a:	4c 89 c7             	mov    %r8,%rdi
    582d:	48 89 c6             	mov    %rax,%rsi
    5830:	e8 cb f7 ff ff       	callq  5000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5835:	48 89 c7             	mov    %rax,%rdi
    5838:	48 83 c4 08          	add    $0x8,%rsp
    583c:	eb c2                	jmp    5800 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a1<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    583e:	66 90                	xchg   %ax,%ax

0000000000005840 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::move_backward<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>:
    5840:	48 83 ec 08          	sub    $0x8,%rsp
    5844:	49 89 f8             	mov    %rdi,%r8
    5847:	48 89 f7             	mov    %rsi,%rdi
    584a:	e8 b1 f7 ff ff       	callq  5000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    584f:	4c 89 c7             	mov    %r8,%rdi
    5852:	48 89 c6             	mov    %rax,%rsi
    5855:	e8 a6 f7 ff ff       	callq  5000 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    585a:	48 89 c7             	mov    %rax,%rdi
    585d:	48 83 c4 08          	add    $0x8,%rsp
    5861:	eb ad                	jmp    5810 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>
    5863:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    586a:	00 00 00 00 
    586e:	66 90                	xchg   %ax,%ax

0000000000005870 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    5870:	41 55                	push   %r13
    5872:	41 54                	push   %r12
    5874:	55                   	push   %rbp
    5875:	53                   	push   %rbx
    5876:	48 83 ec 18          	sub    $0x18,%rsp
    587a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5881:	00 00 
    5883:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5888:	31 c0                	xor    %eax,%eax
    588a:	48 39 f7             	cmp    %rsi,%rdi
    588d:	74 6e                	je     58fd <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    588f:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
    5893:	48 89 fd             	mov    %rdi,%rbp
    5896:	49 89 f4             	mov    %rsi,%r12
    5899:	48 39 de             	cmp    %rbx,%rsi
    589c:	74 5f                	je     58fd <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    589e:	49 89 e5             	mov    %rsp,%r13
    58a1:	eb 34                	jmp    58d7 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x67>
    58a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    58a8:	e8 c3 f4 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    58ad:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    58b1:	48 89 ef             	mov    %rbp,%rdi
    58b4:	48 89 da             	mov    %rbx,%rdx
    58b7:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    58bc:	e8 7f ff ff ff       	callq  5840 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::move_backward<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>
    58c1:	4c 89 ef             	mov    %r13,%rdi
    58c4:	e8 a7 f4 ff ff       	callq  4d70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    58c9:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    58cd:	c5 fb 11 45 00       	vmovsd %xmm0,0x0(%rbp)
    58d2:	49 39 dc             	cmp    %rbx,%r12
    58d5:	74 26                	je     58fd <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    58d7:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    58db:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    58e0:	48 89 de             	mov    %rbx,%rsi
    58e3:	e8 d8 f7 ff ff       	callq  50c0 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    58e8:	48 83 c3 08          	add    $0x8,%rbx
    58ec:	48 89 f7             	mov    %rsi,%rdi
    58ef:	84 c0                	test   %al,%al
    58f1:	75 b5                	jne    58a8 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x38>
    58f3:	e8 28 f9 ff ff       	callq  5220 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)>
    58f8:	49 39 dc             	cmp    %rbx,%r12
    58fb:	75 da                	jne    58d7 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x67>
    58fd:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    5902:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5909:	00 00 
    590b:	75 0b                	jne    5918 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0xa8>
    590d:	48 83 c4 18          	add    $0x18,%rsp
    5911:	5b                   	pop    %rbx
    5912:	5d                   	pop    %rbp
    5913:	41 5c                	pop    %r12
    5915:	41 5d                	pop    %r13
    5917:	c3                   	retq   
    5918:	e8 83 ca ff ff       	callq  23a0 <__stack_chk_fail@plt>
    591d:	0f 1f 00             	nopl   (%rax)

0000000000005920 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>:
    5920:	41 55                	push   %r13
    5922:	48 89 d0             	mov    %rdx,%rax
    5925:	48 29 f8             	sub    %rdi,%rax
    5928:	41 54                	push   %r12
    592a:	49 89 d4             	mov    %rdx,%r12
    592d:	55                   	push   %rbp
    592e:	48 89 fd             	mov    %rdi,%rbp
    5931:	53                   	push   %rbx
    5932:	48 83 ec 08          	sub    $0x8,%rsp
    5936:	48 83 f8 18          	cmp    $0x18,%rax
    593a:	7e 3e                	jle    597a <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x5a>
    593c:	49 89 f5             	mov    %rsi,%r13
    593f:	48 89 cb             	mov    %rcx,%rbx
    5942:	48 85 c9             	test   %rcx,%rcx
    5945:	75 0e                	jne    5955 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x35>
    5947:	eb 43                	jmp    598c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x6c>
    5949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5950:	48 85 db             	test   %rbx,%rbx
    5953:	74 37                	je     598c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x6c>
    5955:	4c 89 e6             	mov    %r12,%rsi
    5958:	48 89 ef             	mov    %rbp,%rdi
    595b:	e8 60 f8 ff ff       	callq  51c0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition_pivot<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>
    5960:	48 ff cb             	dec    %rbx
    5963:	49 39 c5             	cmp    %rax,%r13
    5966:	4c 0f 42 e0          	cmovb  %rax,%r12
    596a:	48 0f 43 e8          	cmovae %rax,%rbp
    596e:	4c 89 e0             	mov    %r12,%rax
    5971:	48 29 e8             	sub    %rbp,%rax
    5974:	48 83 f8 18          	cmp    $0x18,%rax
    5978:	7f d6                	jg     5950 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x30>
    597a:	58                   	pop    %rax
    597b:	5b                   	pop    %rbx
    597c:	48 89 ef             	mov    %rbp,%rdi
    597f:	5d                   	pop    %rbp
    5980:	4c 89 e6             	mov    %r12,%rsi
    5983:	41 5c                	pop    %r12
    5985:	41 5d                	pop    %r13
    5987:	e9 e4 fe ff ff       	jmpq   5870 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    598c:	49 8d 75 08          	lea    0x8(%r13),%rsi
    5990:	4c 89 e2             	mov    %r12,%rdx
    5993:	48 89 ef             	mov    %rbp,%rdi
    5996:	e8 c5 fb ff ff       	callq  5560 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    599b:	5a                   	pop    %rdx
    599c:	5b                   	pop    %rbx
    599d:	48 89 ef             	mov    %rbp,%rdi
    59a0:	5d                   	pop    %rbp
    59a1:	41 5c                	pop    %r12
    59a3:	4c 89 ee             	mov    %r13,%rsi
    59a6:	41 5d                	pop    %r13
    59a8:	e9 a3 f5 ff ff       	jmpq   4f50 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    59ad:	0f 1f 00             	nopl   (%rax)

00000000000059b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    59b0:	48 39 d7             	cmp    %rdx,%rdi
    59b3:	74 26                	je     59db <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x2b>
    59b5:	48 39 f2             	cmp    %rsi,%rdx
    59b8:	74 21                	je     59db <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x2b>
    59ba:	49 89 f8             	mov    %rdi,%r8
    59bd:	48 89 d7             	mov    %rdx,%rdi
    59c0:	50                   	push   %rax
    59c1:	4c 29 c7             	sub    %r8,%rdi
    59c4:	48 c1 ff 03          	sar    $0x3,%rdi
    59c8:	e8 c3 fd ff ff       	callq  5790 <std::__lg(long)>
    59cd:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
    59d1:	4c 89 c7             	mov    %r8,%rdi
    59d4:	41 58                	pop    %r8
    59d6:	e9 45 ff ff ff       	jmpq   5920 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>
    59db:	c3                   	retq   
    59dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000059e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>:
    59e0:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    59e5:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    59e9:	41 ff 72 f8          	pushq  -0x8(%r10)
    59ed:	55                   	push   %rbp
    59ee:	48 89 e5             	mov    %rsp,%rbp
    59f1:	41 57                	push   %r15
    59f3:	41 56                	push   %r14
    59f5:	41 55                	push   %r13
    59f7:	41 54                	push   %r12
    59f9:	41 52                	push   %r10
    59fb:	53                   	push   %rbx
    59fc:	4c 8d 9c 24 00 80 fe 	lea    -0x18000(%rsp),%r11
    5a03:	ff 
    5a04:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5a0b:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5a10:	4c 39 dc             	cmp    %r11,%rsp
    5a13:	75 ef                	jne    5a04 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x24>
    5a15:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    5a1c:	ba 00 80 00 00       	mov    $0x8000,%edx
    5a21:	31 f6                	xor    %esi,%esi
    5a23:	48 89 bd 70 7e fe ff 	mov    %rdi,-0x18190(%rbp)
    5a2a:	4c 8d a5 c0 7f ff ff 	lea    -0x8040(%rbp),%r12
    5a31:	4c 89 e7             	mov    %r12,%rdi
    5a34:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5a3b:	00 00 
    5a3d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5a41:	31 c0                	xor    %eax,%eax
    5a43:	48 8d 9d b0 ff fe ff 	lea    -0x10050(%rbp),%rbx
    5a4a:	e8 51 c8 ff ff       	callq  22a0 <memset@plt>
    5a4f:	c5 fd 6f 05 69 2a 00 	vmovdqa 0x2a69(%rip),%ymm0        # 84c0 <_IO_stdin_used+0x4c0>
    5a56:	00 
    5a57:	48 89 d8             	mov    %rbx,%rax
    5a5a:	48 8d 95 b0 7f ff ff 	lea    -0x8050(%rbp),%rdx
    5a61:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    5a65:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    5a6a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    5a6f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    5a74:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    5a7b:	00 
    5a7c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    5a83:	00 
    5a84:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    5a8b:	00 
    5a8c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    5a93:	00 
    5a94:	48 05 00 01 00 00    	add    $0x100,%rax
    5a9a:	48 39 d0             	cmp    %rdx,%rax
    5a9d:	75 c2                	jne    5a61 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x81>
    5a9f:	4c 8d ad b0 7f fe ff 	lea    -0x18050(%rbp),%r13
    5aa6:	c5 fd 6f 05 32 2a 00 	vmovdqa 0x2a32(%rip),%ymm0        # 84e0 <_IO_stdin_used+0x4e0>
    5aad:	00 
    5aae:	4c 89 e8             	mov    %r13,%rax
    5ab1:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    5ab5:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    5aba:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    5abf:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    5ac4:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    5acb:	00 
    5acc:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    5ad3:	00 
    5ad4:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    5adb:	00 
    5adc:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    5ae3:	00 
    5ae4:	48 05 00 01 00 00    	add    $0x100,%rax
    5aea:	48 39 d8             	cmp    %rbx,%rax
    5aed:	75 c2                	jne    5ab1 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0xd1>
    5aef:	48 8d 85 a0 7e fe ff 	lea    -0x18160(%rbp),%rax
    5af6:	48 89 85 50 7e fe ff 	mov    %rax,-0x181b0(%rbp)
    5afd:	49 89 c6             	mov    %rax,%r14
    5b00:	48 8d 85 a8 7f fe ff 	lea    -0x18058(%rbp),%rax
    5b07:	48 89 85 78 7e fe ff 	mov    %rax,-0x18188(%rbp)
    5b0e:	48 8d 85 88 7e fe ff 	lea    -0x18178(%rbp),%rax
    5b15:	48 89 85 60 7e fe ff 	mov    %rax,-0x181a0(%rbp)
    5b1c:	48 8d 85 98 7e fe ff 	lea    -0x18168(%rbp),%rax
    5b23:	48 89 85 68 7e fe ff 	mov    %rax,-0x18198(%rbp)
    5b2a:	48 8d 85 90 7e fe ff 	lea    -0x18170(%rbp),%rax
    5b31:	48 89 85 58 7e fe ff 	mov    %rax,-0x181a8(%rbp)
    5b38:	c5 f8 77             	vzeroupper 
    5b3b:	e8 10 c7 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    5b40:	49 89 c7             	mov    %rax,%r15
    5b43:	48 8b 85 70 7e fe ff 	mov    -0x18190(%rbp),%rax
    5b4a:	4c 89 ea             	mov    %r13,%rdx
    5b4d:	48 89 de             	mov    %rbx,%rsi
    5b50:	4c 89 e7             	mov    %r12,%rdi
    5b53:	ff d0                	callq  *%rax
    5b55:	e8 f6 c6 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    5b5a:	48 8b bd 60 7e fe ff 	mov    -0x181a0(%rbp),%rdi
    5b61:	4c 89 fe             	mov    %r15,%rsi
    5b64:	48 89 85 88 7e fe ff 	mov    %rax,-0x18178(%rbp)
    5b6b:	e8 70 fb ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5b70:	48 8b b5 68 7e fe ff 	mov    -0x18198(%rbp),%rsi
    5b77:	48 8b bd 58 7e fe ff 	mov    -0x181a8(%rbp),%rdi
    5b7e:	48 89 85 98 7e fe ff 	mov    %rax,-0x18168(%rbp)
    5b85:	e8 e6 fa ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    5b8a:	c5 fb 10 85 90 7e fe 	vmovsd -0x18170(%rbp),%xmm0
    5b91:	ff 
    5b92:	49 83 c6 08          	add    $0x8,%r14
    5b96:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    5b9c:	4c 39 b5 78 7e fe ff 	cmp    %r14,-0x18188(%rbp)
    5ba3:	75 96                	jne    5b3b <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x15b>
    5ba5:	48 8b 95 78 7e fe ff 	mov    -0x18188(%rbp),%rdx
    5bac:	48 8b bd 50 7e fe ff 	mov    -0x181b0(%rbp),%rdi
    5bb3:	48 8d b5 20 7f fe ff 	lea    -0x180e0(%rbp),%rsi
    5bba:	e8 f1 fd ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5bbf:	48 8b 3d da 63 00 00 	mov    0x63da(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    5bc6:	48 8d 35 37 24 00 00 	lea    0x2437(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    5bcd:	e8 8e c7 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    5bd2:	48 89 c7             	mov    %rax,%rdi
    5bd5:	48 8d 35 84 fb ff ff 	lea    -0x47c(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    5bdc:	e8 7f c6 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    5be1:	48 89 c7             	mov    %rax,%rdi
    5be4:	e8 67 f4 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    5be9:	89 c6                	mov    %eax,%esi
    5beb:	e8 f0 c7 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    5bf0:	bf 06 00 00 00       	mov    $0x6,%edi
    5bf5:	49 89 c0             	mov    %rax,%r8
    5bf8:	e8 13 cb ff ff       	callq  2710 <std::setw(int)>
    5bfd:	89 c6                	mov    %eax,%esi
    5bff:	4c 89 c7             	mov    %r8,%rdi
    5c02:	e8 a9 c7 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    5c07:	c5 fb 10 85 20 7f fe 	vmovsd -0x180e0(%rbp),%xmm0
    5c0e:	ff 
    5c0f:	48 89 c7             	mov    %rax,%rdi
    5c12:	e8 79 f4 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5c17:	e8 24 c8 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    5c1c:	48 89 c7             	mov    %rax,%rdi
    5c1f:	48 8d 35 e0 23 00 00 	lea    0x23e0(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    5c26:	e8 35 c7 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    5c2b:	66 81 7d be 00 63    	cmpw   $0x6300,-0x42(%rbp)
    5c31:	75 27                	jne    5c5a <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x27a>
    5c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5c37:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5c3e:	00 00 
    5c40:	75 37                	jne    5c79 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x299>
    5c42:	48 81 c4 80 81 01 00 	add    $0x18180,%rsp
    5c49:	5b                   	pop    %rbx
    5c4a:	41 5a                	pop    %r10
    5c4c:	41 5c                	pop    %r12
    5c4e:	41 5d                	pop    %r13
    5c50:	41 5e                	pop    %r14
    5c52:	41 5f                	pop    %r15
    5c54:	5d                   	pop    %rbp
    5c55:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    5c59:	c3                   	retq   
    5c5a:	48 8d 0d af 23 00 00 	lea    0x23af(%rip),%rcx        # 8010 <_IO_stdin_used+0x10>
    5c61:	ba 56 00 00 00       	mov    $0x56,%edx
    5c66:	48 8d 35 9c 23 00 00 	lea    0x239c(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    5c6d:	48 8d 3d 14 24 00 00 	lea    0x2414(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    5c74:	e8 47 c6 ff ff       	callq  22c0 <__assert_fail@plt>
    5c79:	e8 22 c7 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    5c7e:	66 90                	xchg   %ax,%ax

0000000000005c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>:
    5c80:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5c85:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    5c89:	41 ff 72 f8          	pushq  -0x8(%r10)
    5c8d:	55                   	push   %rbp
    5c8e:	48 89 e5             	mov    %rsp,%rbp
    5c91:	41 57                	push   %r15
    5c93:	41 56                	push   %r14
    5c95:	41 55                	push   %r13
    5c97:	41 54                	push   %r12
    5c99:	41 52                	push   %r10
    5c9b:	53                   	push   %rbx
    5c9c:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    5ca3:	ff 
    5ca4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5cab:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5cb0:	4c 39 dc             	cmp    %r11,%rsp
    5cb3:	75 ef                	jne    5ca4 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x24>
    5cb5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    5cbc:	ba 00 00 01 00       	mov    $0x10000,%edx
    5cc1:	31 f6                	xor    %esi,%esi
    5cc3:	48 89 bd 70 fe fc ff 	mov    %rdi,-0x30190(%rbp)
    5cca:	4c 8d ad c0 ff fe ff 	lea    -0x10040(%rbp),%r13
    5cd1:	4c 89 ef             	mov    %r13,%rdi
    5cd4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5cdb:	00 00 
    5cdd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    5ce1:	31 c0                	xor    %eax,%eax
    5ce3:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    5cea:	e8 b1 c5 ff ff       	callq  22a0 <memset@plt>
    5cef:	c5 fd 6f 05 09 28 00 	vmovdqa 0x2809(%rip),%ymm0        # 8500 <_IO_stdin_used+0x500>
    5cf6:	00 
    5cf7:	48 89 d8             	mov    %rbx,%rax
    5cfa:	48 8d 95 b0 ff fe ff 	lea    -0x10050(%rbp),%rdx
    5d01:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    5d05:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    5d0a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    5d0f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    5d14:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    5d1b:	00 
    5d1c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    5d23:	00 
    5d24:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    5d2b:	00 
    5d2c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    5d33:	00 
    5d34:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    5d3b:	00 
    5d3c:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    5d43:	00 
    5d44:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    5d4b:	00 
    5d4c:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    5d53:	00 
    5d54:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    5d5b:	00 
    5d5c:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    5d63:	00 
    5d64:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    5d6b:	00 
    5d6c:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    5d73:	00 
    5d74:	48 05 00 02 00 00    	add    $0x200,%rax
    5d7a:	48 39 d0             	cmp    %rdx,%rax
    5d7d:	75 82                	jne    5d01 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x81>
    5d7f:	4c 8d a5 b0 ff fc ff 	lea    -0x30050(%rbp),%r12
    5d86:	c5 fd 6f 05 92 27 00 	vmovdqa 0x2792(%rip),%ymm0        # 8520 <_IO_stdin_used+0x520>
    5d8d:	00 
    5d8e:	4c 89 e0             	mov    %r12,%rax
    5d91:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    5d95:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    5d9a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    5d9f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    5da4:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    5dab:	00 
    5dac:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    5db3:	00 
    5db4:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    5dbb:	00 
    5dbc:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    5dc3:	00 
    5dc4:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    5dcb:	00 
    5dcc:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    5dd3:	00 
    5dd4:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    5ddb:	00 
    5ddc:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    5de3:	00 
    5de4:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    5deb:	00 
    5dec:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    5df3:	00 
    5df4:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    5dfb:	00 
    5dfc:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    5e03:	00 
    5e04:	48 05 00 02 00 00    	add    $0x200,%rax
    5e0a:	48 39 c3             	cmp    %rax,%rbx
    5e0d:	75 82                	jne    5d91 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x111>
    5e0f:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    5e16:	48 89 85 50 fe fc ff 	mov    %rax,-0x301b0(%rbp)
    5e1d:	49 89 c6             	mov    %rax,%r14
    5e20:	48 8d 85 a8 ff fc ff 	lea    -0x30058(%rbp),%rax
    5e27:	48 89 85 78 fe fc ff 	mov    %rax,-0x30188(%rbp)
    5e2e:	48 8d 85 88 fe fc ff 	lea    -0x30178(%rbp),%rax
    5e35:	48 89 85 68 fe fc ff 	mov    %rax,-0x30198(%rbp)
    5e3c:	48 8d 85 98 fe fc ff 	lea    -0x30168(%rbp),%rax
    5e43:	48 89 85 58 fe fc ff 	mov    %rax,-0x301a8(%rbp)
    5e4a:	48 8d 85 90 fe fc ff 	lea    -0x30170(%rbp),%rax
    5e51:	48 89 85 60 fe fc ff 	mov    %rax,-0x301a0(%rbp)
    5e58:	c5 f8 77             	vzeroupper 
    5e5b:	e8 f0 c3 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    5e60:	49 89 c7             	mov    %rax,%r15
    5e63:	48 8b 85 70 fe fc ff 	mov    -0x30190(%rbp),%rax
    5e6a:	4c 89 e2             	mov    %r12,%rdx
    5e6d:	48 89 de             	mov    %rbx,%rsi
    5e70:	4c 89 ef             	mov    %r13,%rdi
    5e73:	ff d0                	callq  *%rax
    5e75:	e8 d6 c3 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    5e7a:	48 8b bd 68 fe fc ff 	mov    -0x30198(%rbp),%rdi
    5e81:	4c 89 fe             	mov    %r15,%rsi
    5e84:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    5e8b:	e8 50 f8 ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5e90:	48 8b b5 58 fe fc ff 	mov    -0x301a8(%rbp),%rsi
    5e97:	48 8b bd 60 fe fc ff 	mov    -0x301a0(%rbp),%rdi
    5e9e:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    5ea5:	e8 c6 f7 ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    5eaa:	c5 fb 10 85 90 fe fc 	vmovsd -0x30170(%rbp),%xmm0
    5eb1:	ff 
    5eb2:	49 83 c6 08          	add    $0x8,%r14
    5eb6:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    5ebc:	4c 39 b5 78 fe fc ff 	cmp    %r14,-0x30188(%rbp)
    5ec3:	75 96                	jne    5e5b <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x1db>
    5ec5:	48 8b 95 78 fe fc ff 	mov    -0x30188(%rbp),%rdx
    5ecc:	48 8b bd 50 fe fc ff 	mov    -0x301b0(%rbp),%rdi
    5ed3:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    5eda:	e8 d1 fa ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5edf:	48 8b 3d ba 60 00 00 	mov    0x60ba(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    5ee6:	48 8d 35 17 21 00 00 	lea    0x2117(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    5eed:	e8 6e c4 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    5ef2:	48 89 c7             	mov    %rax,%rdi
    5ef5:	48 8d 35 64 f8 ff ff 	lea    -0x79c(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    5efc:	e8 5f c3 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    5f01:	48 89 c7             	mov    %rax,%rdi
    5f04:	e8 47 f1 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    5f09:	89 c6                	mov    %eax,%esi
    5f0b:	e8 d0 c4 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    5f10:	bf 06 00 00 00       	mov    $0x6,%edi
    5f15:	49 89 c0             	mov    %rax,%r8
    5f18:	e8 f3 c7 ff ff       	callq  2710 <std::setw(int)>
    5f1d:	89 c6                	mov    %eax,%esi
    5f1f:	4c 89 c7             	mov    %r8,%rdi
    5f22:	e8 89 c4 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    5f27:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    5f2e:	ff 
    5f2f:	48 89 c7             	mov    %rax,%rdi
    5f32:	e8 59 f1 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5f37:	e8 04 c5 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    5f3c:	48 89 c7             	mov    %rax,%rdi
    5f3f:	48 8d 35 c0 20 00 00 	lea    0x20c0(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    5f46:	e8 15 c4 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    5f4b:	81 7d bc 00 63 00 00 	cmpl   $0x6300,-0x44(%rbp)
    5f52:	75 27                	jne    5f7b <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2fb>
    5f54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f58:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5f5f:	00 00 
    5f61:	75 37                	jne    5f9a <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x31a>
    5f63:	48 81 c4 80 01 03 00 	add    $0x30180,%rsp
    5f6a:	5b                   	pop    %rbx
    5f6b:	41 5a                	pop    %r10
    5f6d:	41 5c                	pop    %r12
    5f6f:	41 5d                	pop    %r13
    5f71:	41 5e                	pop    %r14
    5f73:	41 5f                	pop    %r15
    5f75:	5d                   	pop    %rbp
    5f76:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    5f7a:	c3                   	retq   
    5f7b:	48 8d 0d 2e 21 00 00 	lea    0x212e(%rip),%rcx        # 80b0 <_IO_stdin_used+0xb0>
    5f82:	ba 56 00 00 00       	mov    $0x56,%edx
    5f87:	48 8d 35 7b 20 00 00 	lea    0x207b(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    5f8e:	48 8d 3d f3 20 00 00 	lea    0x20f3(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    5f95:	e8 26 c3 ff ff       	callq  22c0 <__assert_fail@plt>
    5f9a:	e8 01 c4 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    5f9f:	90                   	nop

0000000000005fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>:
    5fa0:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5fa5:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    5fa9:	41 ff 72 f8          	pushq  -0x8(%r10)
    5fad:	55                   	push   %rbp
    5fae:	48 89 e5             	mov    %rsp,%rbp
    5fb1:	41 57                	push   %r15
    5fb3:	41 56                	push   %r14
    5fb5:	41 55                	push   %r13
    5fb7:	41 54                	push   %r12
    5fb9:	41 52                	push   %r10
    5fbb:	53                   	push   %rbx
    5fbc:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    5fc3:	ff 
    5fc4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5fcb:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5fd0:	4c 39 dc             	cmp    %r11,%rsp
    5fd3:	75 ef                	jne    5fc4 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x24>
    5fd5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    5fdc:	ba 00 00 02 00       	mov    $0x20000,%edx
    5fe1:	31 f6                	xor    %esi,%esi
    5fe3:	48 89 bd 78 fe f9 ff 	mov    %rdi,-0x60188(%rbp)
    5fea:	48 8d 9d c0 ff fd ff 	lea    -0x20040(%rbp),%rbx
    5ff1:	48 89 df             	mov    %rbx,%rdi
    5ff4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5ffb:	00 00 
    5ffd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6001:	31 c0                	xor    %eax,%eax
    6003:	4c 8d a5 b0 ff fb ff 	lea    -0x40050(%rbp),%r12
    600a:	e8 91 c2 ff ff       	callq  22a0 <memset@plt>
    600f:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    6016:	c5 fd 6f 05 22 25 00 	vmovdqa 0x2522(%rip),%ymm0        # 8540 <_IO_stdin_used+0x540>
    601d:	00 
    601e:	4c 89 e1             	mov    %r12,%rcx
    6021:	48 89 f2             	mov    %rsi,%rdx
    6024:	48 8d bd b0 03 fe ff 	lea    -0x1fc50(%rbp),%rdi
    602b:	48 89 c8             	mov    %rcx,%rax
    602e:	66 90                	xchg   %ax,%ax
    6030:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    6034:	48 83 c0 20          	add    $0x20,%rax
    6038:	48 39 d0             	cmp    %rdx,%rax
    603b:	75 f3                	jne    6030 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x90>
    603d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    6044:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    604b:	48 39 fa             	cmp    %rdi,%rdx
    604e:	75 db                	jne    602b <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x8b>
    6050:	4c 8d ad b0 ff f9 ff 	lea    -0x60050(%rbp),%r13
    6057:	c5 fd 6f 05 01 25 00 	vmovdqa 0x2501(%rip),%ymm0        # 8560 <_IO_stdin_used+0x560>
    605e:	00 
    605f:	4c 89 e9             	mov    %r13,%rcx
    6062:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    6069:	48 89 c8             	mov    %rcx,%rax
    606c:	0f 1f 40 00          	nopl   0x0(%rax)
    6070:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    6074:	48 83 c0 20          	add    $0x20,%rax
    6078:	48 39 d0             	cmp    %rdx,%rax
    607b:	75 f3                	jne    6070 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xd0>
    607d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    6084:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    608b:	48 39 f2             	cmp    %rsi,%rdx
    608e:	75 d9                	jne    6069 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xc9>
    6090:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    6097:	48 89 85 50 fe f9 ff 	mov    %rax,-0x601b0(%rbp)
    609e:	49 89 c6             	mov    %rax,%r14
    60a1:	48 8d 85 a8 ff f9 ff 	lea    -0x60058(%rbp),%rax
    60a8:	48 89 85 60 fe f9 ff 	mov    %rax,-0x601a0(%rbp)
    60af:	48 8d 85 88 fe f9 ff 	lea    -0x60178(%rbp),%rax
    60b6:	48 89 85 68 fe f9 ff 	mov    %rax,-0x60198(%rbp)
    60bd:	48 8d 85 98 fe f9 ff 	lea    -0x60168(%rbp),%rax
    60c4:	48 89 85 70 fe f9 ff 	mov    %rax,-0x60190(%rbp)
    60cb:	48 8d 85 90 fe f9 ff 	lea    -0x60170(%rbp),%rax
    60d2:	48 89 85 58 fe f9 ff 	mov    %rax,-0x601a8(%rbp)
    60d9:	c5 f8 77             	vzeroupper 
    60dc:	e8 6f c1 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    60e1:	49 89 c7             	mov    %rax,%r15
    60e4:	48 8b 85 78 fe f9 ff 	mov    -0x60188(%rbp),%rax
    60eb:	4c 89 ea             	mov    %r13,%rdx
    60ee:	4c 89 e6             	mov    %r12,%rsi
    60f1:	48 89 df             	mov    %rbx,%rdi
    60f4:	ff d0                	callq  *%rax
    60f6:	e8 55 c1 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    60fb:	48 8b bd 68 fe f9 ff 	mov    -0x60198(%rbp),%rdi
    6102:	4c 89 fe             	mov    %r15,%rsi
    6105:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    610c:	e8 cf f5 ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6111:	48 8b b5 70 fe f9 ff 	mov    -0x60190(%rbp),%rsi
    6118:	48 8b bd 58 fe f9 ff 	mov    -0x601a8(%rbp),%rdi
    611f:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    6126:	e8 45 f5 ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    612b:	c5 fb 10 85 90 fe f9 	vmovsd -0x60170(%rbp),%xmm0
    6132:	ff 
    6133:	49 83 c6 08          	add    $0x8,%r14
    6137:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    613d:	4c 3b b5 60 fe f9 ff 	cmp    -0x601a0(%rbp),%r14
    6144:	75 96                	jne    60dc <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x13c>
    6146:	48 8b bd 50 fe f9 ff 	mov    -0x601b0(%rbp),%rdi
    614d:	4c 89 f2             	mov    %r14,%rdx
    6150:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    6157:	e8 54 f8 ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    615c:	48 8b 3d 3d 5e 00 00 	mov    0x5e3d(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    6163:	48 8d 35 9a 1e 00 00 	lea    0x1e9a(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    616a:	e8 f1 c1 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    616f:	48 89 c7             	mov    %rax,%rdi
    6172:	48 8d 35 e7 f5 ff ff 	lea    -0xa19(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    6179:	e8 e2 c0 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    617e:	48 89 c7             	mov    %rax,%rdi
    6181:	e8 ca ee ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    6186:	89 c6                	mov    %eax,%esi
    6188:	e8 53 c2 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    618d:	bf 06 00 00 00       	mov    $0x6,%edi
    6192:	49 89 c0             	mov    %rax,%r8
    6195:	e8 76 c5 ff ff       	callq  2710 <std::setw(int)>
    619a:	89 c6                	mov    %eax,%esi
    619c:	4c 89 c7             	mov    %r8,%rdi
    619f:	e8 0c c2 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    61a4:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    61ab:	ff 
    61ac:	48 89 c7             	mov    %rax,%rdi
    61af:	e8 dc ee ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    61b4:	e8 87 c2 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    61b9:	48 89 c7             	mov    %rax,%rdi
    61bc:	48 8d 35 43 1e 00 00 	lea    0x1e43(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    61c3:	e8 98 c1 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    61c8:	48 81 7d b8 00 63 00 	cmpq   $0x6300,-0x48(%rbp)
    61cf:	00 
    61d0:	75 27                	jne    61f9 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x259>
    61d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61d6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    61dd:	00 00 
    61df:	75 37                	jne    6218 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x278>
    61e1:	48 81 c4 80 01 06 00 	add    $0x60180,%rsp
    61e8:	5b                   	pop    %rbx
    61e9:	41 5a                	pop    %r10
    61eb:	41 5c                	pop    %r12
    61ed:	41 5d                	pop    %r13
    61ef:	41 5e                	pop    %r14
    61f1:	41 5f                	pop    %r15
    61f3:	5d                   	pop    %rbp
    61f4:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    61f8:	c3                   	retq   
    61f9:	48 8d 0d 10 1f 00 00 	lea    0x1f10(%rip),%rcx        # 8110 <_IO_stdin_used+0x110>
    6200:	ba 56 00 00 00       	mov    $0x56,%edx
    6205:	48 8d 35 fd 1d 00 00 	lea    0x1dfd(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    620c:	48 8d 3d 75 1e 00 00 	lea    0x1e75(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    6213:	e8 a8 c0 ff ff       	callq  22c0 <__assert_fail@plt>
    6218:	e8 83 c1 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    621d:	0f 1f 00             	nopl   (%rax)

0000000000006220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>:
    6220:	41 57                	push   %r15
    6222:	41 56                	push   %r14
    6224:	41 55                	push   %r13
    6226:	41 54                	push   %r12
    6228:	55                   	push   %rbp
    6229:	53                   	push   %rbx
    622a:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    6231:	ff 
    6232:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    6239:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    623e:	4c 39 dc             	cmp    %r11,%rsp
    6241:	75 ef                	jne    6232 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x12>
    6243:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    624a:	ba 00 00 04 00       	mov    $0x40000,%edx
    624f:	31 f6                	xor    %esi,%esi
    6251:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    6256:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    625d:	00 
    625e:	48 89 df             	mov    %rbx,%rdi
    6261:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6268:	00 00 
    626a:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    6271:	00 
    6272:	31 c0                	xor    %eax,%eax
    6274:	e8 27 c0 ff ff       	callq  22a0 <memset@plt>
    6279:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    6280:	00 
    6281:	48 89 ca             	mov    %rcx,%rdx
    6284:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    628b:	00 
    628c:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    6293:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    6298:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    629f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    62a6:	00 
    62a7:	48 83 c0 10          	add    $0x10,%rax
    62ab:	48 39 d0             	cmp    %rdx,%rax
    62ae:	75 e8                	jne    6298 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x78>
    62b0:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    62b7:	48 39 f2             	cmp    %rsi,%rdx
    62ba:	75 d0                	jne    628c <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x6c>
    62bc:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    62c3:	00 
    62c4:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    62cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    62d0:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    62d7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    62de:	00 
    62df:	48 83 c0 10          	add    $0x10,%rax
    62e3:	48 39 d0             	cmp    %rdx,%rax
    62e6:	75 e8                	jne    62d0 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xb0>
    62e8:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    62ef:	48 39 ca             	cmp    %rcx,%rdx
    62f2:	75 d0                	jne    62c4 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xa4>
    62f4:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    62f9:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    62fe:	49 89 c4             	mov    %rax,%r12
    6301:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    6308:	00 
    6309:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    630e:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    6313:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    6318:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    631d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6322:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    6329:	00 
    632a:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    6331:	00 
    6332:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    6337:	e8 14 bf ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    633c:	48 89 c5             	mov    %rax,%rbp
    633f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    6344:	4c 89 fa             	mov    %r15,%rdx
    6347:	4c 89 f6             	mov    %r14,%rsi
    634a:	48 89 df             	mov    %rbx,%rdi
    634d:	ff d0                	callq  *%rax
    634f:	e8 fc be ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6354:	48 89 ee             	mov    %rbp,%rsi
    6357:	4c 89 ef             	mov    %r13,%rdi
    635a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    635f:	e8 7c f3 ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6364:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    6369:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    636e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    6373:	e8 f8 f2 ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    6378:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    637e:	49 83 c4 08          	add    $0x8,%r12
    6382:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    6389:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    638e:	75 a7                	jne    6337 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x117>
    6390:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    6395:	4c 89 e2             	mov    %r12,%rdx
    6398:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    639f:	00 
    63a0:	e8 0b f6 ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    63a5:	48 8b 3d f4 5b 00 00 	mov    0x5bf4(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    63ac:	48 8d 35 51 1c 00 00 	lea    0x1c51(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    63b3:	e8 a8 bf ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    63b8:	48 89 c7             	mov    %rax,%rdi
    63bb:	48 8d 35 9e f3 ff ff 	lea    -0xc62(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    63c2:	e8 99 be ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    63c7:	48 89 c7             	mov    %rax,%rdi
    63ca:	e8 81 ec ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    63cf:	89 c6                	mov    %eax,%esi
    63d1:	e8 0a c0 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    63d6:	bf 06 00 00 00       	mov    $0x6,%edi
    63db:	49 89 c0             	mov    %rax,%r8
    63de:	e8 2d c3 ff ff       	callq  2710 <std::setw(int)>
    63e3:	89 c6                	mov    %eax,%esi
    63e5:	4c 89 c7             	mov    %r8,%rdi
    63e8:	e8 c3 bf ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    63ed:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    63f4:	00 00 
    63f6:	48 89 c7             	mov    %rax,%rdi
    63f9:	e8 92 ec ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    63fe:	e8 3d c0 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    6403:	48 89 c7             	mov    %rax,%rdi
    6406:	48 8d 35 f9 1b 00 00 	lea    0x1bf9(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    640d:	e8 4e bf ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    6412:	48 8b 84 24 50 01 0c 	mov    0xc0150(%rsp),%rax
    6419:	00 
    641a:	80 f4 63             	xor    $0x63,%ah
    641d:	48 0b 84 24 58 01 0c 	or     0xc0158(%rsp),%rax
    6424:	00 
    6425:	75 25                	jne    644c <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x22c>
    6427:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    642e:	00 
    642f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    6436:	00 00 
    6438:	75 31                	jne    646b <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x24b>
    643a:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    6441:	5b                   	pop    %rbx
    6442:	5d                   	pop    %rbp
    6443:	41 5c                	pop    %r12
    6445:	41 5d                	pop    %r13
    6447:	41 5e                	pop    %r14
    6449:	41 5f                	pop    %r15
    644b:	c3                   	retq   
    644c:	48 8d 0d 2d 1d 00 00 	lea    0x1d2d(%rip),%rcx        # 8180 <_IO_stdin_used+0x180>
    6453:	ba 56 00 00 00       	mov    $0x56,%edx
    6458:	48 8d 35 aa 1b 00 00 	lea    0x1baa(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    645f:	48 8d 3d 22 1c 00 00 	lea    0x1c22(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    6466:	e8 55 be ff ff       	callq  22c0 <__assert_fail@plt>
    646b:	e8 30 bf ff ff       	callq  23a0 <__stack_chk_fail@plt>

0000000000006470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>:
    6470:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    6475:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    6479:	41 ff 72 f8          	pushq  -0x8(%r10)
    647d:	55                   	push   %rbp
    647e:	48 89 e5             	mov    %rsp,%rbp
    6481:	41 57                	push   %r15
    6483:	41 56                	push   %r14
    6485:	41 55                	push   %r13
    6487:	41 54                	push   %r12
    6489:	41 52                	push   %r10
    648b:	53                   	push   %rbx
    648c:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    6493:	ff 
    6494:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    649b:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    64a0:	4c 39 dc             	cmp    %r11,%rsp
    64a3:	75 ef                	jne    6494 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x24>
    64a5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    64ac:	ba 00 00 01 00       	mov    $0x10000,%edx
    64b1:	31 f6                	xor    %esi,%esi
    64b3:	48 89 bd 70 fe fc ff 	mov    %rdi,-0x30190(%rbp)
    64ba:	4c 8d ad c0 ff fe ff 	lea    -0x10040(%rbp),%r13
    64c1:	4c 89 ef             	mov    %r13,%rdi
    64c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    64cb:	00 00 
    64cd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    64d1:	31 c0                	xor    %eax,%eax
    64d3:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    64da:	e8 c1 bd ff ff       	callq  22a0 <memset@plt>
    64df:	c5 fc 28 05 99 20 00 	vmovaps 0x2099(%rip),%ymm0        # 8580 <_IO_stdin_used+0x580>
    64e6:	00 
    64e7:	48 89 d8             	mov    %rbx,%rax
    64ea:	48 8d 95 b0 ff fe ff 	lea    -0x10050(%rbp),%rdx
    64f1:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    64f5:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    64fa:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    64ff:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    6504:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    650b:	00 
    650c:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    6513:	00 
    6514:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    651b:	00 
    651c:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    6523:	00 
    6524:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    652b:	00 
    652c:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    6533:	00 
    6534:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    653b:	00 
    653c:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    6543:	00 
    6544:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    654b:	00 
    654c:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    6553:	00 
    6554:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    655b:	00 
    655c:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    6563:	00 
    6564:	48 05 00 02 00 00    	add    $0x200,%rax
    656a:	48 39 d0             	cmp    %rdx,%rax
    656d:	75 82                	jne    64f1 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x81>
    656f:	4c 8d a5 b0 ff fc ff 	lea    -0x30050(%rbp),%r12
    6576:	c5 fc 28 05 22 20 00 	vmovaps 0x2022(%rip),%ymm0        # 85a0 <_IO_stdin_used+0x5a0>
    657d:	00 
    657e:	4c 89 e0             	mov    %r12,%rax
    6581:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    6585:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    658a:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    658f:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    6594:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    659b:	00 
    659c:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    65a3:	00 
    65a4:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    65ab:	00 
    65ac:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    65b3:	00 
    65b4:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    65bb:	00 
    65bc:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    65c3:	00 
    65c4:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    65cb:	00 
    65cc:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    65d3:	00 
    65d4:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    65db:	00 
    65dc:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    65e3:	00 
    65e4:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    65eb:	00 
    65ec:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    65f3:	00 
    65f4:	48 05 00 02 00 00    	add    $0x200,%rax
    65fa:	48 39 c3             	cmp    %rax,%rbx
    65fd:	75 82                	jne    6581 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x111>
    65ff:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    6606:	48 89 85 50 fe fc ff 	mov    %rax,-0x301b0(%rbp)
    660d:	49 89 c6             	mov    %rax,%r14
    6610:	48 8d 85 a8 ff fc ff 	lea    -0x30058(%rbp),%rax
    6617:	48 89 85 78 fe fc ff 	mov    %rax,-0x30188(%rbp)
    661e:	48 8d 85 88 fe fc ff 	lea    -0x30178(%rbp),%rax
    6625:	48 89 85 68 fe fc ff 	mov    %rax,-0x30198(%rbp)
    662c:	48 8d 85 98 fe fc ff 	lea    -0x30168(%rbp),%rax
    6633:	48 89 85 58 fe fc ff 	mov    %rax,-0x301a8(%rbp)
    663a:	48 8d 85 90 fe fc ff 	lea    -0x30170(%rbp),%rax
    6641:	48 89 85 60 fe fc ff 	mov    %rax,-0x301a0(%rbp)
    6648:	c5 f8 77             	vzeroupper 
    664b:	e8 00 bc ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6650:	49 89 c7             	mov    %rax,%r15
    6653:	48 8b 85 70 fe fc ff 	mov    -0x30190(%rbp),%rax
    665a:	4c 89 e2             	mov    %r12,%rdx
    665d:	48 89 de             	mov    %rbx,%rsi
    6660:	4c 89 ef             	mov    %r13,%rdi
    6663:	ff d0                	callq  *%rax
    6665:	e8 e6 bb ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    666a:	48 8b bd 68 fe fc ff 	mov    -0x30198(%rbp),%rdi
    6671:	4c 89 fe             	mov    %r15,%rsi
    6674:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    667b:	e8 60 f0 ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6680:	48 8b b5 58 fe fc ff 	mov    -0x301a8(%rbp),%rsi
    6687:	48 8b bd 60 fe fc ff 	mov    -0x301a0(%rbp),%rdi
    668e:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    6695:	e8 d6 ef ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    669a:	c5 fb 10 85 90 fe fc 	vmovsd -0x30170(%rbp),%xmm0
    66a1:	ff 
    66a2:	49 83 c6 08          	add    $0x8,%r14
    66a6:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    66ac:	4c 39 b5 78 fe fc ff 	cmp    %r14,-0x30188(%rbp)
    66b3:	75 96                	jne    664b <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x1db>
    66b5:	48 8b 95 78 fe fc ff 	mov    -0x30188(%rbp),%rdx
    66bc:	48 8b bd 50 fe fc ff 	mov    -0x301b0(%rbp),%rdi
    66c3:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    66ca:	e8 e1 f2 ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    66cf:	48 8b 3d ca 58 00 00 	mov    0x58ca(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    66d6:	48 8d 35 27 19 00 00 	lea    0x1927(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    66dd:	e8 7e bc ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    66e2:	48 89 c7             	mov    %rax,%rdi
    66e5:	48 8d 35 74 f0 ff ff 	lea    -0xf8c(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    66ec:	e8 6f bb ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    66f1:	48 89 c7             	mov    %rax,%rdi
    66f4:	e8 57 e9 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    66f9:	89 c6                	mov    %eax,%esi
    66fb:	e8 e0 bc ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    6700:	bf 06 00 00 00       	mov    $0x6,%edi
    6705:	49 89 c0             	mov    %rax,%r8
    6708:	e8 03 c0 ff ff       	callq  2710 <std::setw(int)>
    670d:	89 c6                	mov    %eax,%esi
    670f:	4c 89 c7             	mov    %r8,%rdi
    6712:	e8 99 bc ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    6717:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    671e:	ff 
    671f:	48 89 c7             	mov    %rax,%rdi
    6722:	e8 69 e9 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    6727:	e8 14 bd ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    672c:	48 89 c7             	mov    %rax,%rdi
    672f:	48 8d 35 d0 18 00 00 	lea    0x18d0(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    6736:	e8 25 bc ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    673b:	c5 fa 10 45 bc       	vmovss -0x44(%rbp),%xmm0
    6740:	c5 f8 2e 05 b8 1e 00 	vucomiss 0x1eb8(%rip),%xmm0        # 8600 <_IO_stdin_used+0x600>
    6747:	00 
    6748:	7a 29                	jp     6773 <ijk.cc.0871ef82+0x1>
    674a:	75 27                	jne    6773 <ijk.cc.0871ef82+0x1>
    674c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6750:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    6757:	00 00 
    6759:	75 37                	jne    6792 <ijk.cc.0871ef82+0x20>
    675b:	48 81 c4 80 01 03 00 	add    $0x30180,%rsp
    6762:	5b                   	pop    %rbx
    6763:	41 5a                	pop    %r10
    6765:	41 5c                	pop    %r12
    6767:	41 5d                	pop    %r13
    6769:	41 5e                	pop    %r14
    676b:	41 5f                	pop    %r15
    676d:	5d                   	pop    %rbp
    676e:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    6772:	c3                   	retq   
    6773:	48 8d 0d 76 1a 00 00 	lea    0x1a76(%rip),%rcx        # 81f0 <_IO_stdin_used+0x1f0>
    677a:	ba 56 00 00 00       	mov    $0x56,%edx
    677f:	48 8d 35 83 18 00 00 	lea    0x1883(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    6786:	48 8d 3d fb 18 00 00 	lea    0x18fb(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    678d:	e8 2e bb ff ff       	callq  22c0 <__assert_fail@plt>
    6792:	e8 09 bc ff ff       	callq  23a0 <__stack_chk_fail@plt>
    6797:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    679e:	00 00 

00000000000067a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>:
    67a0:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    67a5:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    67a9:	41 ff 72 f8          	pushq  -0x8(%r10)
    67ad:	55                   	push   %rbp
    67ae:	48 89 e5             	mov    %rsp,%rbp
    67b1:	41 57                	push   %r15
    67b3:	41 56                	push   %r14
    67b5:	41 55                	push   %r13
    67b7:	41 54                	push   %r12
    67b9:	41 52                	push   %r10
    67bb:	53                   	push   %rbx
    67bc:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    67c3:	ff 
    67c4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    67cb:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    67d0:	4c 39 dc             	cmp    %r11,%rsp
    67d3:	75 ef                	jne    67c4 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x24>
    67d5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    67dc:	ba 00 00 02 00       	mov    $0x20000,%edx
    67e1:	31 f6                	xor    %esi,%esi
    67e3:	48 89 bd 78 fe f9 ff 	mov    %rdi,-0x60188(%rbp)
    67ea:	48 8d 9d c0 ff fd ff 	lea    -0x20040(%rbp),%rbx
    67f1:	48 89 df             	mov    %rbx,%rdi
    67f4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    67fb:	00 00 
    67fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    6801:	31 c0                	xor    %eax,%eax
    6803:	4c 8d ad b0 ff fb ff 	lea    -0x40050(%rbp),%r13
    680a:	e8 91 ba ff ff       	callq  22a0 <memset@plt>
    680f:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    6816:	c5 fd 28 05 a2 1d 00 	vmovapd 0x1da2(%rip),%ymm0        # 85c0 <_IO_stdin_used+0x5c0>
    681d:	00 
    681e:	4c 89 e9             	mov    %r13,%rcx
    6821:	48 89 f2             	mov    %rsi,%rdx
    6824:	48 8d bd b0 03 fe ff 	lea    -0x1fc50(%rbp),%rdi
    682b:	48 89 c8             	mov    %rcx,%rax
    682e:	66 90                	xchg   %ax,%ax
    6830:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    6834:	48 83 c0 20          	add    $0x20,%rax
    6838:	48 39 d0             	cmp    %rdx,%rax
    683b:	75 f3                	jne    6830 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x90>
    683d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    6844:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    684b:	48 39 fa             	cmp    %rdi,%rdx
    684e:	75 db                	jne    682b <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x8b>
    6850:	4c 8d a5 b0 ff f9 ff 	lea    -0x60050(%rbp),%r12
    6857:	c5 fd 28 05 81 1d 00 	vmovapd 0x1d81(%rip),%ymm0        # 85e0 <_IO_stdin_used+0x5e0>
    685e:	00 
    685f:	4c 89 e1             	mov    %r12,%rcx
    6862:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    6869:	48 89 c8             	mov    %rcx,%rax
    686c:	0f 1f 40 00          	nopl   0x0(%rax)
    6870:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    6874:	48 83 c0 20          	add    $0x20,%rax
    6878:	48 39 d0             	cmp    %rdx,%rax
    687b:	75 f3                	jne    6870 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xd0>
    687d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    6884:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    688b:	48 39 f2             	cmp    %rsi,%rdx
    688e:	75 d9                	jne    6869 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xc9>
    6890:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    6897:	48 89 85 50 fe f9 ff 	mov    %rax,-0x601b0(%rbp)
    689e:	49 89 c6             	mov    %rax,%r14
    68a1:	48 8d 85 a8 ff f9 ff 	lea    -0x60058(%rbp),%rax
    68a8:	48 89 85 70 fe f9 ff 	mov    %rax,-0x60190(%rbp)
    68af:	48 8d 85 88 fe f9 ff 	lea    -0x60178(%rbp),%rax
    68b6:	48 89 85 68 fe f9 ff 	mov    %rax,-0x60198(%rbp)
    68bd:	48 8d 85 98 fe f9 ff 	lea    -0x60168(%rbp),%rax
    68c4:	48 89 85 58 fe f9 ff 	mov    %rax,-0x601a8(%rbp)
    68cb:	48 8d 85 90 fe f9 ff 	lea    -0x60170(%rbp),%rax
    68d2:	48 89 85 60 fe f9 ff 	mov    %rax,-0x601a0(%rbp)
    68d9:	c5 f8 77             	vzeroupper 
    68dc:	e8 6f b9 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    68e1:	49 89 c7             	mov    %rax,%r15
    68e4:	48 8b 85 78 fe f9 ff 	mov    -0x60188(%rbp),%rax
    68eb:	4c 89 e2             	mov    %r12,%rdx
    68ee:	4c 89 ee             	mov    %r13,%rsi
    68f1:	48 89 df             	mov    %rbx,%rdi
    68f4:	ff d0                	callq  *%rax
    68f6:	e8 55 b9 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    68fb:	48 8b bd 68 fe f9 ff 	mov    -0x60198(%rbp),%rdi
    6902:	4c 89 fe             	mov    %r15,%rsi
    6905:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    690c:	e8 cf ed ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6911:	48 8b b5 58 fe f9 ff 	mov    -0x601a8(%rbp),%rsi
    6918:	48 8b bd 60 fe f9 ff 	mov    -0x601a0(%rbp),%rdi
    691f:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    6926:	e8 45 ed ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    692b:	c5 fb 10 85 90 fe f9 	vmovsd -0x60170(%rbp),%xmm0
    6932:	ff 
    6933:	49 83 c6 08          	add    $0x8,%r14
    6937:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    693d:	4c 3b b5 70 fe f9 ff 	cmp    -0x60190(%rbp),%r14
    6944:	75 96                	jne    68dc <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x13c>
    6946:	48 8b bd 50 fe f9 ff 	mov    -0x601b0(%rbp),%rdi
    694d:	4c 89 f2             	mov    %r14,%rdx
    6950:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    6957:	e8 54 f0 ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    695c:	48 8b 3d 3d 56 00 00 	mov    0x563d(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    6963:	48 8d 35 9a 16 00 00 	lea    0x169a(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    696a:	e8 f1 b9 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    696f:	48 89 c7             	mov    %rax,%rdi
    6972:	48 8d 35 e7 ed ff ff 	lea    -0x1219(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    6979:	e8 e2 b8 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    697e:	48 89 c7             	mov    %rax,%rdi
    6981:	e8 ca e6 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    6986:	89 c6                	mov    %eax,%esi
    6988:	e8 53 ba ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    698d:	bf 06 00 00 00       	mov    $0x6,%edi
    6992:	49 89 c0             	mov    %rax,%r8
    6995:	e8 76 bd ff ff       	callq  2710 <std::setw(int)>
    699a:	89 c6                	mov    %eax,%esi
    699c:	4c 89 c7             	mov    %r8,%rdi
    699f:	e8 0c ba ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    69a4:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    69ab:	ff 
    69ac:	48 89 c7             	mov    %rax,%rdi
    69af:	e8 dc e6 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    69b4:	e8 87 ba ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    69b9:	48 89 c7             	mov    %rax,%rdi
    69bc:	48 8d 35 43 16 00 00 	lea    0x1643(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    69c3:	e8 98 b9 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    69c8:	c5 fb 10 05 d8 1a 00 	vmovsd 0x1ad8(%rip),%xmm0        # 84a8 <_IO_stdin_used+0x4a8>
    69cf:	00 
    69d0:	c5 f9 2e 45 b8       	vucomisd -0x48(%rbp),%xmm0
    69d5:	7a 29                	jp     6a00 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x260>
    69d7:	75 27                	jne    6a00 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x260>
    69d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    69dd:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    69e4:	00 00 
    69e6:	75 37                	jne    6a1f <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x27f>
    69e8:	48 81 c4 80 01 06 00 	add    $0x60180,%rsp
    69ef:	5b                   	pop    %rbx
    69f0:	41 5a                	pop    %r10
    69f2:	41 5c                	pop    %r12
    69f4:	41 5d                	pop    %r13
    69f6:	41 5e                	pop    %r14
    69f8:	41 5f                	pop    %r15
    69fa:	5d                   	pop    %rbp
    69fb:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    69ff:	c3                   	retq   
    6a00:	48 8d 0d 51 18 00 00 	lea    0x1851(%rip),%rcx        # 8258 <_IO_stdin_used+0x258>
    6a07:	ba 56 00 00 00       	mov    $0x56,%edx
    6a0c:	48 8d 35 f6 15 00 00 	lea    0x15f6(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    6a13:	48 8d 3d 6e 16 00 00 	lea    0x166e(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    6a1a:	e8 a1 b8 ff ff       	callq  22c0 <__assert_fail@plt>
    6a1f:	e8 7c b9 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    6a24:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    6a2b:	00 00 00 00 
    6a2f:	90                   	nop

0000000000006a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>:
    6a30:	41 57                	push   %r15
    6a32:	41 56                	push   %r14
    6a34:	41 55                	push   %r13
    6a36:	41 54                	push   %r12
    6a38:	55                   	push   %rbp
    6a39:	53                   	push   %rbx
    6a3a:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    6a41:	ff 
    6a42:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    6a49:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    6a4e:	4c 39 dc             	cmp    %r11,%rsp
    6a51:	75 ef                	jne    6a42 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x12>
    6a53:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    6a5a:	ba 00 00 04 00       	mov    $0x40000,%edx
    6a5f:	31 f6                	xor    %esi,%esi
    6a61:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    6a66:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    6a6d:	00 
    6a6e:	48 89 df             	mov    %rbx,%rdi
    6a71:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6a78:	00 00 
    6a7a:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    6a81:	00 
    6a82:	31 c0                	xor    %eax,%eax
    6a84:	e8 17 b8 ff ff       	callq  22a0 <memset@plt>
    6a89:	d9 05 75 1b 00 00    	flds   0x1b75(%rip)        # 8604 <_IO_stdin_used+0x604>
    6a8f:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    6a96:	00 
    6a97:	48 89 ca             	mov    %rcx,%rdx
    6a9a:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    6aa1:	00 
    6aa2:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    6aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    6ab0:	db 38                	fstpt  (%rax)
    6ab2:	db 28                	fldt   (%rax)
    6ab4:	48 83 c0 10          	add    $0x10,%rax
    6ab8:	48 39 d0             	cmp    %rdx,%rax
    6abb:	75 f3                	jne    6ab0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x80>
    6abd:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    6ac4:	48 39 f2             	cmp    %rsi,%rdx
    6ac7:	75 d9                	jne    6aa2 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x72>
    6ac9:	dd d8                	fstp   %st(0)
    6acb:	d9 05 37 1b 00 00    	flds   0x1b37(%rip)        # 8608 <_IO_stdin_used+0x608>
    6ad1:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    6ad8:	00 
    6ad9:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    6ae0:	db 38                	fstpt  (%rax)
    6ae2:	db 28                	fldt   (%rax)
    6ae4:	48 83 c0 10          	add    $0x10,%rax
    6ae8:	48 39 d0             	cmp    %rdx,%rax
    6aeb:	75 f3                	jne    6ae0 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xb0>
    6aed:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    6af4:	48 39 ca             	cmp    %rcx,%rdx
    6af7:	75 e0                	jne    6ad9 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xa9>
    6af9:	dd d8                	fstp   %st(0)
    6afb:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    6b00:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    6b05:	49 89 c4             	mov    %rax,%r12
    6b08:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    6b0f:	00 
    6b10:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6b15:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    6b1a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    6b1f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    6b24:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6b29:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    6b30:	00 
    6b31:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    6b38:	00 
    6b39:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    6b3e:	e8 0d b7 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6b43:	48 89 c5             	mov    %rax,%rbp
    6b46:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    6b4b:	4c 89 fa             	mov    %r15,%rdx
    6b4e:	4c 89 f6             	mov    %r14,%rsi
    6b51:	48 89 df             	mov    %rbx,%rdi
    6b54:	ff d0                	callq  *%rax
    6b56:	e8 f5 b6 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6b5b:	48 89 ee             	mov    %rbp,%rsi
    6b5e:	4c 89 ef             	mov    %r13,%rdi
    6b61:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    6b66:	e8 75 eb ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6b6b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    6b70:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    6b75:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    6b7a:	e8 f1 ea ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    6b7f:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    6b85:	49 83 c4 08          	add    $0x8,%r12
    6b89:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    6b90:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    6b95:	75 a7                	jne    6b3e <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x10e>
    6b97:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    6b9c:	4c 89 e2             	mov    %r12,%rdx
    6b9f:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    6ba6:	00 
    6ba7:	e8 04 ee ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    6bac:	48 8b 3d ed 53 00 00 	mov    0x53ed(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    6bb3:	48 8d 35 4a 14 00 00 	lea    0x144a(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    6bba:	e8 a1 b7 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    6bbf:	48 89 c7             	mov    %rax,%rdi
    6bc2:	48 8d 35 97 eb ff ff 	lea    -0x1469(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    6bc9:	e8 92 b6 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    6bce:	48 89 c7             	mov    %rax,%rdi
    6bd1:	e8 7a e4 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    6bd6:	89 c6                	mov    %eax,%esi
    6bd8:	e8 03 b8 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    6bdd:	bf 06 00 00 00       	mov    $0x6,%edi
    6be2:	49 89 c0             	mov    %rax,%r8
    6be5:	e8 26 bb ff ff       	callq  2710 <std::setw(int)>
    6bea:	89 c6                	mov    %eax,%esi
    6bec:	4c 89 c7             	mov    %r8,%rdi
    6bef:	e8 bc b7 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    6bf4:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    6bfb:	00 00 
    6bfd:	48 89 c7             	mov    %rax,%rdi
    6c00:	e8 8b e4 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    6c05:	e8 36 b8 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    6c0a:	48 89 c7             	mov    %rax,%rdi
    6c0d:	48 8d 35 f2 13 00 00 	lea    0x13f2(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    6c14:	e8 47 b7 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    6c19:	d9 05 e1 19 00 00    	flds   0x19e1(%rip)        # 8600 <_IO_stdin_used+0x600>
    6c1f:	db ac 24 50 01 0c 00 	fldt   0xc0150(%rsp)
    6c26:	df e9                	fucomip %st(1),%st
    6c28:	dd d8                	fstp   %st(0)
    6c2a:	7a 27                	jp     6c53 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x223>
    6c2c:	75 25                	jne    6c53 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x223>
    6c2e:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    6c35:	00 
    6c36:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    6c3d:	00 00 
    6c3f:	75 31                	jne    6c72 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x242>
    6c41:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    6c48:	5b                   	pop    %rbx
    6c49:	5d                   	pop    %rbp
    6c4a:	41 5c                	pop    %r12
    6c4c:	41 5d                	pop    %r13
    6c4e:	41 5e                	pop    %r14
    6c50:	41 5f                	pop    %r15
    6c52:	c3                   	retq   
    6c53:	48 8d 0d 66 16 00 00 	lea    0x1666(%rip),%rcx        # 82c0 <_IO_stdin_used+0x2c0>
    6c5a:	ba 56 00 00 00       	mov    $0x56,%edx
    6c5f:	48 8d 35 a3 13 00 00 	lea    0x13a3(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    6c66:	48 8d 3d 1b 14 00 00 	lea    0x141b(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    6c6d:	e8 4e b6 ff ff       	callq  22c0 <__assert_fail@plt>
    6c72:	e8 29 b7 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    6c77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    6c7e:	00 00 

0000000000006c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>:
    6c80:	41 57                	push   %r15
    6c82:	41 56                	push   %r14
    6c84:	41 55                	push   %r13
    6c86:	41 54                	push   %r12
    6c88:	55                   	push   %rbp
    6c89:	53                   	push   %rbx
    6c8a:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    6c91:	ff 
    6c92:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    6c99:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    6c9e:	4c 39 dc             	cmp    %r11,%rsp
    6ca1:	75 ef                	jne    6c92 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x12>
    6ca3:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    6caa:	ba 00 00 04 00       	mov    $0x40000,%edx
    6caf:	31 f6                	xor    %esi,%esi
    6cb1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    6cb6:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    6cbd:	00 
    6cbe:	48 89 df             	mov    %rbx,%rdi
    6cc1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6cc8:	00 00 
    6cca:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    6cd1:	00 
    6cd2:	31 c0                	xor    %eax,%eax
    6cd4:	e8 c7 b5 ff ff       	callq  22a0 <memset@plt>
    6cd9:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    6ce0:	00 
    6ce1:	c5 f9 6f 05 27 19 00 	vmovdqa 0x1927(%rip),%xmm0        # 8610 <_IO_stdin_used+0x610>
    6ce8:	00 
    6ce9:	48 89 ca             	mov    %rcx,%rdx
    6cec:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    6cf3:	00 
    6cf4:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    6cfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    6d00:	c5 f9 7f 00          	vmovdqa %xmm0,(%rax)
    6d04:	48 83 c0 10          	add    $0x10,%rax
    6d08:	48 39 d0             	cmp    %rdx,%rax
    6d0b:	75 f3                	jne    6d00 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x80>
    6d0d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    6d14:	48 39 f2             	cmp    %rsi,%rdx
    6d17:	75 db                	jne    6cf4 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x74>
    6d19:	c5 f9 6f 05 ff 18 00 	vmovdqa 0x18ff(%rip),%xmm0        # 8620 <_IO_stdin_used+0x620>
    6d20:	00 
    6d21:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    6d28:	00 
    6d29:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    6d30:	c5 f9 7f 00          	vmovdqa %xmm0,(%rax)
    6d34:	48 83 c0 10          	add    $0x10,%rax
    6d38:	48 39 d0             	cmp    %rdx,%rax
    6d3b:	75 f3                	jne    6d30 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xb0>
    6d3d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    6d44:	48 39 ca             	cmp    %rcx,%rdx
    6d47:	75 e0                	jne    6d29 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xa9>
    6d49:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    6d4e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    6d53:	49 89 c4             	mov    %rax,%r12
    6d56:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    6d5d:	00 
    6d5e:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6d63:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    6d68:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    6d6d:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    6d72:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6d77:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    6d7e:	00 
    6d7f:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    6d86:	00 
    6d87:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    6d8c:	e8 bf b4 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6d91:	48 89 c5             	mov    %rax,%rbp
    6d94:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    6d99:	4c 89 fa             	mov    %r15,%rdx
    6d9c:	4c 89 f6             	mov    %r14,%rsi
    6d9f:	48 89 df             	mov    %rbx,%rdi
    6da2:	ff d0                	callq  *%rax
    6da4:	e8 a7 b4 ff ff       	callq  2250 <std::chrono::_V2::system_clock::now()@plt>
    6da9:	48 89 ee             	mov    %rbp,%rsi
    6dac:	4c 89 ef             	mov    %r13,%rdi
    6daf:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    6db4:	e8 27 e9 ff ff       	callq  56e0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    6db9:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    6dbe:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    6dc3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    6dc8:	e8 a3 e8 ff ff       	callq  5670 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    6dcd:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    6dd3:	49 83 c4 08          	add    $0x8,%r12
    6dd7:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    6dde:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    6de3:	75 a7                	jne    6d8c <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x10c>
    6de5:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    6dea:	4c 89 e2             	mov    %r12,%rdx
    6ded:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    6df4:	00 
    6df5:	e8 b6 eb ff ff       	callq  59b0 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    6dfa:	48 8b 3d 9f 51 00 00 	mov    0x519f(%rip),%rdi        # bfa0 <std::cout@GLIBCXX_3.4>
    6e01:	48 8d 35 fc 11 00 00 	lea    0x11fc(%rip),%rsi        # 8004 <_IO_stdin_used+0x4>
    6e08:	e8 53 b5 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    6e0d:	48 89 c7             	mov    %rax,%rdi
    6e10:	48 8d 35 49 e9 ff ff 	lea    -0x16b7(%rip),%rsi        # 5760 <std::fixed(std::ios_base&)>
    6e17:	e8 44 b4 ff ff       	callq  2260 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    6e1c:	48 89 c7             	mov    %rax,%rdi
    6e1f:	e8 2c e2 ff ff       	callq  5050 <std::setprecision(int) [clone .constprop.0]>
    6e24:	89 c6                	mov    %eax,%esi
    6e26:	e8 b5 b5 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    6e2b:	bf 06 00 00 00       	mov    $0x6,%edi
    6e30:	49 89 c0             	mov    %rax,%r8
    6e33:	e8 d8 b8 ff ff       	callq  2710 <std::setw(int)>
    6e38:	89 c6                	mov    %eax,%esi
    6e3a:	4c 89 c7             	mov    %r8,%rdi
    6e3d:	e8 6e b5 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    6e42:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    6e49:	00 00 
    6e4b:	48 89 c7             	mov    %rax,%rdi
    6e4e:	e8 3d e2 ff ff       	callq  5090 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    6e53:	e8 e8 b5 ff ff       	callq  2440 <std::ostream::operator<<(double)@plt>
    6e58:	48 89 c7             	mov    %rax,%rdi
    6e5b:	48 8d 35 a4 11 00 00 	lea    0x11a4(%rip),%rsi        # 8006 <_IO_stdin_used+0x6>
    6e62:	e8 f9 b4 ff ff       	callq  2360 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    6e67:	c5 f9 6f 0d c1 17 00 	vmovdqa 0x17c1(%rip),%xmm1        # 8630 <_IO_stdin_used+0x630>
    6e6e:	00 
    6e6f:	c5 f9 6f 84 24 50 01 	vmovdqa 0xc0150(%rsp),%xmm0
    6e76:	0c 00 
    6e78:	e8 83 b5 ff ff       	callq  2400 <__eqtf2@plt>
    6e7d:	48 85 c0             	test   %rax,%rax
    6e80:	75 25                	jne    6ea7 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x227>
    6e82:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    6e89:	00 
    6e8a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    6e91:	00 00 
    6e93:	75 31                	jne    6ec6 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x246>
    6e95:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    6e9c:	5b                   	pop    %rbx
    6e9d:	5d                   	pop    %rbp
    6e9e:	41 5c                	pop    %r12
    6ea0:	41 5d                	pop    %r13
    6ea2:	41 5e                	pop    %r14
    6ea4:	41 5f                	pop    %r15
    6ea6:	c3                   	retq   
    6ea7:	48 8d 0d 92 14 00 00 	lea    0x1492(%rip),%rcx        # 8340 <_IO_stdin_used+0x340>
    6eae:	ba 56 00 00 00       	mov    $0x56,%edx
    6eb3:	48 8d 35 4f 11 00 00 	lea    0x114f(%rip),%rsi        # 8009 <_IO_stdin_used+0x9>
    6eba:	48 8d 3d c7 11 00 00 	lea    0x11c7(%rip),%rdi        # 8088 <_IO_stdin_used+0x88>
    6ec1:	e8 fa b3 ff ff       	callq  22c0 <__assert_fail@plt>
    6ec6:	e8 d5 b4 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    6ecb:	90                   	nop
    6ecc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006ed0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>:
    6ed0:	41 55                	push   %r13
    6ed2:	49 89 fd             	mov    %rdi,%r13
    6ed5:	48 89 f7             	mov    %rsi,%rdi
    6ed8:	41 54                	push   %r12
    6eda:	49 89 d4             	mov    %rdx,%r12
    6edd:	55                   	push   %rbp
    6ede:	48 89 f5             	mov    %rsi,%rbp
    6ee1:	48 83 ec 10          	sub    $0x10,%rsp
    6ee5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6eec:	00 00 
    6eee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6ef3:	31 c0                	xor    %eax,%eax
    6ef5:	e8 86 de ff ff       	callq  4d80 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
    6efa:	48 39 d6             	cmp    %rdx,%rsi
    6efd:	74 04                	je     6f03 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x33>
    6eff:	84 c0                	test   %al,%al
    6f01:	75 7b                	jne    6f7e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xae>
    6f03:	4c 89 e6             	mov    %r12,%rsi
    6f06:	48 89 ef             	mov    %rbp,%rdi
    6f09:	e8 32 e1 ff ff       	callq  5040 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
    6f0e:	48 89 04 24          	mov    %rax,(%rsp)
    6f12:	48 83 f8 0f          	cmp    $0xf,%rax
    6f16:	77 40                	ja     6f58 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x88>
    6f18:	4c 89 ef             	mov    %r13,%rdi
    6f1b:	e8 60 b4 ff ff       	callq  2380 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
    6f20:	48 89 c7             	mov    %rax,%rdi
    6f23:	48 89 ee             	mov    %rbp,%rsi
    6f26:	4c 89 e2             	mov    %r12,%rdx
    6f29:	e8 62 b4 ff ff       	callq  2390 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>
    6f2e:	48 8b 34 24          	mov    (%rsp),%rsi
    6f32:	4c 89 ef             	mov    %r13,%rdi
    6f35:	e8 a6 b3 ff ff       	callq  22e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
    6f3a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    6f3f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    6f46:	00 00 
    6f48:	75 40                	jne    6f8a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xba>
    6f4a:	48 83 c4 10          	add    $0x10,%rsp
    6f4e:	5d                   	pop    %rbp
    6f4f:	41 5c                	pop    %r12
    6f51:	41 5d                	pop    %r13
    6f53:	c3                   	retq   
    6f54:	0f 1f 40 00          	nopl   0x0(%rax)
    6f58:	48 89 e6             	mov    %rsp,%rsi
    6f5b:	31 d2                	xor    %edx,%edx
    6f5d:	4c 89 ef             	mov    %r13,%rdi
    6f60:	e8 cb b4 ff ff       	callq  2430 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    6f65:	48 89 c6             	mov    %rax,%rsi
    6f68:	4c 89 ef             	mov    %r13,%rdi
    6f6b:	e8 b0 b3 ff ff       	callq  2320 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
    6f70:	48 8b 34 24          	mov    (%rsp),%rsi
    6f74:	4c 89 ef             	mov    %r13,%rdi
    6f77:	e8 d4 b4 ff ff       	callq  2450 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
    6f7c:	eb 9a                	jmp    6f18 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x48>
    6f7e:	48 8d 3d 33 14 00 00 	lea    0x1433(%rip),%rdi        # 83b8 <_IO_stdin_used+0x3b8>
    6f85:	e8 66 b3 ff ff       	callq  22f0 <std::__throw_logic_error(char const*)@plt>
    6f8a:	e8 11 b4 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    6f8f:	90                   	nop

0000000000006f90 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>:
    6f90:	e9 3b ff ff ff       	jmpq   6ed0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>
    6f95:	90                   	nop
    6f96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6f9d:	00 00 00 

0000000000006fa0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
    6fa0:	eb ee                	jmp    6f90 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>
    6fa2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    6fa9:	00 00 00 00 
    6fad:	0f 1f 00             	nopl   (%rax)

0000000000006fb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>:
    6fb0:	41 54                	push   %r12
    6fb2:	49 89 fc             	mov    %rdi,%r12
    6fb5:	55                   	push   %rbp
    6fb6:	48 89 f5             	mov    %rsi,%rbp
    6fb9:	48 83 ec 08          	sub    $0x8,%rsp
    6fbd:	e8 4e b3 ff ff       	callq  2310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
    6fc2:	48 89 c6             	mov    %rax,%rsi
    6fc5:	4c 89 e7             	mov    %r12,%rdi
    6fc8:	e8 b3 e7 ff ff       	callq  5780 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>
    6fcd:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    6fd1:	48 85 ed             	test   %rbp,%rbp
    6fd4:	74 0d                	je     6fe3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]+0x33>
    6fd6:	48 89 ef             	mov    %rbp,%rdi
    6fd9:	e8 c2 e7 ff ff       	callq  57a0 <std::char_traits<char>::length(char const*)>
    6fde:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
    6fe3:	48 89 ee             	mov    %rbp,%rsi
    6fe6:	4c 89 e7             	mov    %r12,%rdi
    6fe9:	e8 b2 ff ff ff       	callq  6fa0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
    6fee:	48 83 c4 08          	add    $0x8,%rsp
    6ff2:	5d                   	pop    %rbp
    6ff3:	41 5c                	pop    %r12
    6ff5:	c3                   	retq   
    6ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    6ffd:	00 00 00 

0000000000007000 <ec::demangle[abi:cxx11](char const*)>:
    7000:	41 55                	push   %r13
    7002:	31 d2                	xor    %edx,%edx
    7004:	41 54                	push   %r12
    7006:	49 89 fc             	mov    %rdi,%r12
    7009:	55                   	push   %rbp
    700a:	48 89 f5             	mov    %rsi,%rbp
    700d:	48 89 ef             	mov    %rbp,%rdi
    7010:	48 83 ec 30          	sub    $0x30,%rsp
    7014:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
    7019:	31 f6                	xor    %esi,%esi
    701b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7022:	00 00 
    7024:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    7029:	31 c0                	xor    %eax,%eax
    702b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    7032:	00 
    7033:	e8 f8 b2 ff ff       	callq  2330 <__cxa_demangle@plt>
    7038:	48 89 c6             	mov    %rax,%rsi
    703b:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
    7040:	48 8b 05 49 4f 00 00 	mov    0x4f49(%rip),%rax        # bf90 <free@GLIBC_2.2.5>
    7047:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
    704c:	4c 89 ef             	mov    %r13,%rdi
    704f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7054:	e8 b7 df ff ff       	callq  5010 <std::unique_ptr<char, void (*)(void*)>::unique_ptr<void (*)(void*), void>(char*, std::enable_if<!std::is_lvalue_reference<void (*)(void*)>::value, void (*&&)(void*)>::type) [clone .constprop.0]>
    7059:	8b 44 24 04          	mov    0x4(%rsp),%eax
    705d:	83 f8 ff             	cmp    $0xffffffff,%eax
    7060:	0f 84 fb b3 ff ff    	je     2461 <ec::demangle[abi:cxx11](char const*) [clone .cold]>
    7066:	85 c0                	test   %eax,%eax
    7068:	75 38                	jne    70a2 <ec::demangle[abi:cxx11](char const*)+0xa2>
    706a:	4c 89 ef             	mov    %r13,%rdi
    706d:	e8 5e de ff ff       	callq  4ed0 <std::unique_ptr<char, void (*)(void*)>::get() const>
    7072:	48 89 c6             	mov    %rax,%rsi
    7075:	4c 89 e7             	mov    %r12,%rdi
    7078:	e8 33 ff ff ff       	callq  6fb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>
    707d:	4c 89 ef             	mov    %r13,%rdi
    7080:	e8 3b df ff ff       	callq  4fc0 <std::unique_ptr<char, void (*)(void*)>::~unique_ptr()>
    7085:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    708a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7091:	00 00 
    7093:	75 1a                	jne    70af <ec::demangle[abi:cxx11](char const*)+0xaf>
    7095:	48 83 c4 30          	add    $0x30,%rsp
    7099:	5d                   	pop    %rbp
    709a:	4c 89 e0             	mov    %r12,%rax
    709d:	41 5c                	pop    %r12
    709f:	41 5d                	pop    %r13
    70a1:	c3                   	retq   
    70a2:	48 89 ee             	mov    %rbp,%rsi
    70a5:	4c 89 e7             	mov    %r12,%rdi
    70a8:	e8 03 ff ff ff       	callq  6fb0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>
    70ad:	eb ce                	jmp    707d <ec::demangle[abi:cxx11](char const*)+0x7d>
    70af:	e8 ec b2 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    70b4:	f3 0f 1e fa          	endbr64 
    70b8:	e9 da b3 ff ff       	jmpq   2497 <ec::demangle[abi:cxx11](char const*) [clone .cold]+0x36>
    70bd:	0f 1f 00             	nopl   (%rax)

00000000000070c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<short>()>:
    70c0:	41 54                	push   %r12
    70c2:	49 89 fc             	mov    %rdi,%r12
    70c5:	48 83 ec 10          	sub    $0x10,%rsp
    70c9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    70d0:	00 00 
    70d2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    70d7:	48 8b 05 a2 4e 00 00 	mov    0x4ea2(%rip),%rax        # bf80 <typeinfo for short@CXXABI_1.3>
    70de:	48 8b 78 08          	mov    0x8(%rax),%rdi
    70e2:	e8 89 e6 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    70e7:	48 89 c6             	mov    %rax,%rsi
    70ea:	4c 89 e7             	mov    %r12,%rdi
    70ed:	e8 0e ff ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    70f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    70f7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    70fe:	00 00 
    7100:	75 0a                	jne    710c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<short>()+0x4c>
    7102:	48 83 c4 10          	add    $0x10,%rsp
    7106:	4c 89 e0             	mov    %r12,%rax
    7109:	41 5c                	pop    %r12
    710b:	c3                   	retq   
    710c:	e8 8f b2 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7111:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7118:	00 00 00 00 
    711c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<int>()>:
    7120:	41 54                	push   %r12
    7122:	49 89 fc             	mov    %rdi,%r12
    7125:	48 83 ec 10          	sub    $0x10,%rsp
    7129:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7130:	00 00 
    7132:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7137:	48 8b 05 2a 4e 00 00 	mov    0x4e2a(%rip),%rax        # bf68 <typeinfo for int@CXXABI_1.3>
    713e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    7142:	e8 29 e6 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    7147:	48 89 c6             	mov    %rax,%rsi
    714a:	4c 89 e7             	mov    %r12,%rdi
    714d:	e8 ae fe ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    7152:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7157:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    715e:	00 00 
    7160:	75 0a                	jne    716c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<int>()+0x4c>
    7162:	48 83 c4 10          	add    $0x10,%rsp
    7166:	4c 89 e0             	mov    %r12,%rax
    7169:	41 5c                	pop    %r12
    716b:	c3                   	retq   
    716c:	e8 2f b2 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7171:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7178:	00 00 00 00 
    717c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long>()>:
    7180:	41 54                	push   %r12
    7182:	49 89 fc             	mov    %rdi,%r12
    7185:	48 83 ec 10          	sub    $0x10,%rsp
    7189:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7190:	00 00 
    7192:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7197:	48 8b 05 22 4e 00 00 	mov    0x4e22(%rip),%rax        # bfc0 <typeinfo for long@CXXABI_1.3>
    719e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    71a2:	e8 c9 e5 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    71a7:	48 89 c6             	mov    %rax,%rsi
    71aa:	4c 89 e7             	mov    %r12,%rdi
    71ad:	e8 4e fe ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    71b2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    71b7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    71be:	00 00 
    71c0:	75 0a                	jne    71cc <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long>()+0x4c>
    71c2:	48 83 c4 10          	add    $0x10,%rsp
    71c6:	4c 89 e0             	mov    %r12,%rax
    71c9:	41 5c                	pop    %r12
    71cb:	c3                   	retq   
    71cc:	e8 cf b1 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    71d1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    71d8:	00 00 00 00 
    71dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000071e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__int128>()>:
    71e0:	41 54                	push   %r12
    71e2:	49 89 fc             	mov    %rdi,%r12
    71e5:	48 83 ec 10          	sub    $0x10,%rsp
    71e9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    71f0:	00 00 
    71f2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    71f7:	48 8b 05 b2 4d 00 00 	mov    0x4db2(%rip),%rax        # bfb0 <typeinfo for __int128@CXXABI_1.3.5>
    71fe:	48 8b 78 08          	mov    0x8(%rax),%rdi
    7202:	e8 69 e5 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    7207:	48 89 c6             	mov    %rax,%rsi
    720a:	4c 89 e7             	mov    %r12,%rdi
    720d:	e8 ee fd ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    7212:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7217:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    721e:	00 00 
    7220:	75 0a                	jne    722c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__int128>()+0x4c>
    7222:	48 83 c4 10          	add    $0x10,%rsp
    7226:	4c 89 e0             	mov    %r12,%rax
    7229:	41 5c                	pop    %r12
    722b:	c3                   	retq   
    722c:	e8 6f b1 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7231:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7238:	00 00 00 00 
    723c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<float>()>:
    7240:	41 54                	push   %r12
    7242:	49 89 fc             	mov    %rdi,%r12
    7245:	48 83 ec 10          	sub    $0x10,%rsp
    7249:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7250:	00 00 
    7252:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7257:	48 8b 05 4a 4d 00 00 	mov    0x4d4a(%rip),%rax        # bfa8 <typeinfo for float@CXXABI_1.3>
    725e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    7262:	e8 09 e5 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    7267:	48 89 c6             	mov    %rax,%rsi
    726a:	4c 89 e7             	mov    %r12,%rdi
    726d:	e8 8e fd ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    7272:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7277:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    727e:	00 00 
    7280:	75 0a                	jne    728c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<float>()+0x4c>
    7282:	48 83 c4 10          	add    $0x10,%rsp
    7286:	4c 89 e0             	mov    %r12,%rax
    7289:	41 5c                	pop    %r12
    728b:	c3                   	retq   
    728c:	e8 0f b1 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7291:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7298:	00 00 00 00 
    729c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000072a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<double>()>:
    72a0:	41 54                	push   %r12
    72a2:	49 89 fc             	mov    %rdi,%r12
    72a5:	48 83 ec 10          	sub    $0x10,%rsp
    72a9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    72b0:	00 00 
    72b2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    72b7:	48 8b 05 2a 4d 00 00 	mov    0x4d2a(%rip),%rax        # bfe8 <typeinfo for double@CXXABI_1.3>
    72be:	48 8b 78 08          	mov    0x8(%rax),%rdi
    72c2:	e8 a9 e4 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    72c7:	48 89 c6             	mov    %rax,%rsi
    72ca:	4c 89 e7             	mov    %r12,%rdi
    72cd:	e8 2e fd ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    72d2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    72d7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    72de:	00 00 
    72e0:	75 0a                	jne    72ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<double>()+0x4c>
    72e2:	48 83 c4 10          	add    $0x10,%rsp
    72e6:	4c 89 e0             	mov    %r12,%rax
    72e9:	41 5c                	pop    %r12
    72eb:	c3                   	retq   
    72ec:	e8 af b0 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    72f1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    72f8:	00 00 00 00 
    72fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007300 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long double>()>:
    7300:	41 54                	push   %r12
    7302:	49 89 fc             	mov    %rdi,%r12
    7305:	48 83 ec 10          	sub    $0x10,%rsp
    7309:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7310:	00 00 
    7312:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7317:	48 8b 05 aa 4c 00 00 	mov    0x4caa(%rip),%rax        # bfc8 <typeinfo for long double@CXXABI_1.3>
    731e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    7322:	e8 49 e4 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    7327:	48 89 c6             	mov    %rax,%rsi
    732a:	4c 89 e7             	mov    %r12,%rdi
    732d:	e8 ce fc ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    7332:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7337:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    733e:	00 00 
    7340:	75 0a                	jne    734c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long double>()+0x4c>
    7342:	48 83 c4 10          	add    $0x10,%rsp
    7346:	4c 89 e0             	mov    %r12,%rax
    7349:	41 5c                	pop    %r12
    734b:	c3                   	retq   
    734c:	e8 4f b0 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7351:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7358:	00 00 00 00 
    735c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__float128>()>:
    7360:	41 54                	push   %r12
    7362:	49 89 fc             	mov    %rdi,%r12
    7365:	48 83 ec 10          	sub    $0x10,%rsp
    7369:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7370:	00 00 
    7372:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    7377:	48 8b 05 1a 4c 00 00 	mov    0x4c1a(%rip),%rax        # bf98 <typeinfo for __float128@CXXABI_FLOAT128>
    737e:	48 8b 78 08          	mov    0x8(%rax),%rdi
    7382:	e8 e9 e3 ff ff       	callq  5770 <std::type_info::name() const [clone .isra.0]>
    7387:	48 89 c6             	mov    %rax,%rsi
    738a:	4c 89 e7             	mov    %r12,%rdi
    738d:	e8 6e fc ff ff       	callq  7000 <ec::demangle[abi:cxx11](char const*)>
    7392:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    7397:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    739e:	00 00 
    73a0:	75 0a                	jne    73ac <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__float128>()+0x4c>
    73a2:	48 83 c4 10          	add    $0x10,%rsp
    73a6:	4c 89 e0             	mov    %r12,%rax
    73a9:	41 5c                	pop    %r12
    73ab:	c3                   	retq   
    73ac:	e8 ef af ff ff       	callq  23a0 <__stack_chk_fail@plt>
    73b1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    73b8:	00 00 00 00 
    73bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000073c0 <void test_type<short>()>:
    73c0:	41 55                	push   %r13
    73c2:	bf 0c 00 00 00       	mov    $0xc,%edi
    73c7:	41 54                	push   %r12
    73c9:	55                   	push   %rbp
    73ca:	48 83 ec 30          	sub    $0x30,%rsp
    73ce:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    73d5:	00 00 
    73d7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    73dc:	31 c0                	xor    %eax,%eax
    73de:	e8 2d b3 ff ff       	callq  2710 <std::setw(int)>
    73e3:	4c 8b 2d b6 4b 00 00 	mov    0x4bb6(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    73ea:	89 c6                	mov    %eax,%esi
    73ec:	4c 89 ef             	mov    %r13,%rdi
    73ef:	e8 bc af ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    73f4:	48 89 e5             	mov    %rsp,%rbp
    73f7:	49 89 c4             	mov    %rax,%r12
    73fa:	48 89 ef             	mov    %rbp,%rdi
    73fd:	e8 be fc ff ff       	callq  70c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<short>()>
    7402:	48 89 ee             	mov    %rbp,%rsi
    7405:	4c 89 e7             	mov    %r12,%rdi
    7408:	e8 43 af ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    740d:	48 89 ef             	mov    %rbp,%rdi
    7410:	e8 9b ae ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    7415:	48 8d 3d 04 b3 ff ff 	lea    -0x4cfc(%rip),%rdi        # 2720 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>
    741c:	e8 bf e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    7421:	48 8d 3d 88 b3 ff ff 	lea    -0x4c78(%rip),%rdi        # 27b0 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>
    7428:	e8 b3 e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    742d:	48 8d 3d dc b4 ff ff 	lea    -0x4b24(%rip),%rdi        # 2910 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>
    7434:	e8 a7 e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    7439:	48 8d 3d 60 b5 ff ff 	lea    -0x4aa0(%rip),%rdi        # 29a0 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>
    7440:	e8 9b e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    7445:	48 8d 3d d4 b5 ff ff 	lea    -0x4a2c(%rip),%rdi        # 2a20 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>
    744c:	e8 8f e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    7451:	48 8d 3d 28 b7 ff ff 	lea    -0x48d8(%rip),%rdi        # 2b80 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>
    7458:	e8 83 e5 ff ff       	callq  59e0 <void test_function<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    745d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    7462:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7469:	00 00 
    746b:	75 18                	jne    7485 <void test_type<short>()+0xc5>
    746d:	48 8b 35 04 4b 00 00 	mov    0x4b04(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    7474:	48 83 c4 30          	add    $0x30,%rsp
    7478:	5d                   	pop    %rbp
    7479:	41 5c                	pop    %r12
    747b:	4c 89 ef             	mov    %r13,%rdi
    747e:	41 5d                	pop    %r13
    7480:	e9 eb ae ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7485:	e8 16 af ff ff       	callq  23a0 <__stack_chk_fail@plt>
    748a:	f3 0f 1e fa          	endbr64 
    748e:	49 89 c4             	mov    %rax,%r12
    7491:	e9 2b b0 ff ff       	jmpq   24c1 <void test_type<short>() [clone .cold]>
    7496:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    749d:	00 00 00 

00000000000074a0 <void test_type<int>()>:
    74a0:	41 55                	push   %r13
    74a2:	bf 0c 00 00 00       	mov    $0xc,%edi
    74a7:	41 54                	push   %r12
    74a9:	55                   	push   %rbp
    74aa:	48 83 ec 30          	sub    $0x30,%rsp
    74ae:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    74b5:	00 00 
    74b7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    74bc:	31 c0                	xor    %eax,%eax
    74be:	e8 4d b2 ff ff       	callq  2710 <std::setw(int)>
    74c3:	4c 8b 2d d6 4a 00 00 	mov    0x4ad6(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    74ca:	89 c6                	mov    %eax,%esi
    74cc:	4c 89 ef             	mov    %r13,%rdi
    74cf:	e8 dc ae ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    74d4:	48 89 e5             	mov    %rsp,%rbp
    74d7:	49 89 c4             	mov    %rax,%r12
    74da:	48 89 ef             	mov    %rbp,%rdi
    74dd:	e8 3e fc ff ff       	callq  7120 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<int>()>
    74e2:	48 89 ee             	mov    %rbp,%rsi
    74e5:	4c 89 e7             	mov    %r12,%rdi
    74e8:	e8 63 ae ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    74ed:	48 89 ef             	mov    %rbp,%rdi
    74f0:	e8 bb ad ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    74f5:	48 8d 3d 04 b7 ff ff 	lea    -0x48fc(%rip),%rdi        # 2c00 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>
    74fc:	e8 7f e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    7501:	48 8d 3d 88 b7 ff ff 	lea    -0x4878(%rip),%rdi        # 2c90 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>
    7508:	e8 73 e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    750d:	48 8d 3d ac b9 ff ff 	lea    -0x4654(%rip),%rdi        # 2ec0 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>
    7514:	e8 67 e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    7519:	48 8d 3d 40 ba ff ff 	lea    -0x45c0(%rip),%rdi        # 2f60 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>
    7520:	e8 5b e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    7525:	48 8d 3d b4 ba ff ff 	lea    -0x454c(%rip),%rdi        # 2fe0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>
    752c:	e8 4f e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    7531:	48 8d 3d d8 bc ff ff 	lea    -0x4328(%rip),%rdi        # 3210 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>
    7538:	e8 43 e7 ff ff       	callq  5c80 <void test_function<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    753d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    7542:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7549:	00 00 
    754b:	75 18                	jne    7565 <void test_type<int>()+0xc5>
    754d:	48 8b 35 24 4a 00 00 	mov    0x4a24(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    7554:	48 83 c4 30          	add    $0x30,%rsp
    7558:	5d                   	pop    %rbp
    7559:	41 5c                	pop    %r12
    755b:	4c 89 ef             	mov    %r13,%rdi
    755e:	41 5d                	pop    %r13
    7560:	e9 0b ae ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7565:	e8 36 ae ff ff       	callq  23a0 <__stack_chk_fail@plt>
    756a:	f3 0f 1e fa          	endbr64 
    756e:	49 89 c4             	mov    %rax,%r12
    7571:	e9 5e af ff ff       	jmpq   24d4 <void test_type<int>() [clone .cold]>
    7576:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    757d:	00 00 00 

0000000000007580 <void test_type<long>()>:
    7580:	41 55                	push   %r13
    7582:	bf 0c 00 00 00       	mov    $0xc,%edi
    7587:	41 54                	push   %r12
    7589:	55                   	push   %rbp
    758a:	48 83 ec 30          	sub    $0x30,%rsp
    758e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7595:	00 00 
    7597:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    759c:	31 c0                	xor    %eax,%eax
    759e:	e8 6d b1 ff ff       	callq  2710 <std::setw(int)>
    75a3:	4c 8b 2d f6 49 00 00 	mov    0x49f6(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    75aa:	89 c6                	mov    %eax,%esi
    75ac:	4c 89 ef             	mov    %r13,%rdi
    75af:	e8 fc ad ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    75b4:	48 89 e5             	mov    %rsp,%rbp
    75b7:	49 89 c4             	mov    %rax,%r12
    75ba:	48 89 ef             	mov    %rbp,%rdi
    75bd:	e8 be fb ff ff       	callq  7180 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long>()>
    75c2:	48 89 ee             	mov    %rbp,%rsi
    75c5:	4c 89 e7             	mov    %r12,%rdi
    75c8:	e8 83 ad ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    75cd:	48 89 ef             	mov    %rbp,%rdi
    75d0:	e8 db ac ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    75d5:	48 8d 3d b4 bc ff ff 	lea    -0x434c(%rip),%rdi        # 3290 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>
    75dc:	e8 bf e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    75e1:	48 8d 3d 38 bd ff ff 	lea    -0x42c8(%rip),%rdi        # 3320 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>
    75e8:	e8 b3 e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    75ed:	48 8d 3d 3c be ff ff 	lea    -0x41c4(%rip),%rdi        # 3430 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>
    75f4:	e8 a7 e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    75f9:	48 8d 3d d0 be ff ff 	lea    -0x4130(%rip),%rdi        # 34d0 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>
    7600:	e8 9b e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    7605:	48 8d 3d 44 bf ff ff 	lea    -0x40bc(%rip),%rdi        # 3550 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>
    760c:	e8 8f e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    7611:	48 8d 3d 38 c0 ff ff 	lea    -0x3fc8(%rip),%rdi        # 3650 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>
    7618:	e8 83 e9 ff ff       	callq  5fa0 <void test_function<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    761d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    7622:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7629:	00 00 
    762b:	75 18                	jne    7645 <void test_type<long>()+0xc5>
    762d:	48 8b 35 44 49 00 00 	mov    0x4944(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    7634:	48 83 c4 30          	add    $0x30,%rsp
    7638:	5d                   	pop    %rbp
    7639:	41 5c                	pop    %r12
    763b:	4c 89 ef             	mov    %r13,%rdi
    763e:	41 5d                	pop    %r13
    7640:	e9 2b ad ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7645:	e8 56 ad ff ff       	callq  23a0 <__stack_chk_fail@plt>
    764a:	f3 0f 1e fa          	endbr64 
    764e:	49 89 c4             	mov    %rax,%r12
    7651:	e9 91 ae ff ff       	jmpq   24e7 <void test_type<long>() [clone .cold]>
    7656:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    765d:	00 00 00 

0000000000007660 <void test_type<__int128>()>:
    7660:	41 55                	push   %r13
    7662:	bf 0c 00 00 00       	mov    $0xc,%edi
    7667:	41 54                	push   %r12
    7669:	55                   	push   %rbp
    766a:	48 83 ec 30          	sub    $0x30,%rsp
    766e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7675:	00 00 
    7677:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    767c:	31 c0                	xor    %eax,%eax
    767e:	e8 8d b0 ff ff       	callq  2710 <std::setw(int)>
    7683:	4c 8b 2d 16 49 00 00 	mov    0x4916(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    768a:	89 c6                	mov    %eax,%esi
    768c:	4c 89 ef             	mov    %r13,%rdi
    768f:	e8 1c ad ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    7694:	48 89 e5             	mov    %rsp,%rbp
    7697:	49 89 c4             	mov    %rax,%r12
    769a:	48 89 ef             	mov    %rbp,%rdi
    769d:	e8 3e fb ff ff       	callq  71e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__int128>()>
    76a2:	48 89 ee             	mov    %rbp,%rsi
    76a5:	4c 89 e7             	mov    %r12,%rdi
    76a8:	e8 a3 ac ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    76ad:	48 89 ef             	mov    %rbp,%rdi
    76b0:	e8 fb ab ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    76b5:	48 8d 3d 14 c0 ff ff 	lea    -0x3fec(%rip),%rdi        # 36d0 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76bc:	e8 5f eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76c1:	48 8d 3d c8 c0 ff ff 	lea    -0x3f38(%rip),%rdi        # 3790 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76c8:	e8 53 eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76cd:	48 8d 3d 4c c1 ff ff 	lea    -0x3eb4(%rip),%rdi        # 3820 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76d4:	e8 47 eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76d9:	48 8d 3d 20 c2 ff ff 	lea    -0x3de0(%rip),%rdi        # 3900 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76e0:	e8 3b eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76e5:	48 8d 3d c4 c2 ff ff 	lea    -0x3d3c(%rip),%rdi        # 39b0 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76ec:	e8 2f eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76f1:	48 8d 3d 58 c3 ff ff 	lea    -0x3ca8(%rip),%rdi        # 3a50 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    76f8:	e8 23 eb ff ff       	callq  6220 <void test_function<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    76fd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    7702:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7709:	00 00 
    770b:	75 18                	jne    7725 <void test_type<__int128>()+0xc5>
    770d:	48 8b 35 64 48 00 00 	mov    0x4864(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    7714:	48 83 c4 30          	add    $0x30,%rsp
    7718:	5d                   	pop    %rbp
    7719:	41 5c                	pop    %r12
    771b:	4c 89 ef             	mov    %r13,%rdi
    771e:	41 5d                	pop    %r13
    7720:	e9 4b ac ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7725:	e8 76 ac ff ff       	callq  23a0 <__stack_chk_fail@plt>
    772a:	f3 0f 1e fa          	endbr64 
    772e:	49 89 c4             	mov    %rax,%r12
    7731:	e9 c4 ad ff ff       	jmpq   24fa <void test_type<__int128>() [clone .cold]>
    7736:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    773d:	00 00 00 

0000000000007740 <void test_type<float>()>:
    7740:	41 55                	push   %r13
    7742:	bf 0c 00 00 00       	mov    $0xc,%edi
    7747:	41 54                	push   %r12
    7749:	55                   	push   %rbp
    774a:	48 83 ec 30          	sub    $0x30,%rsp
    774e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7755:	00 00 
    7757:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    775c:	31 c0                	xor    %eax,%eax
    775e:	e8 ad af ff ff       	callq  2710 <std::setw(int)>
    7763:	4c 8b 2d 36 48 00 00 	mov    0x4836(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    776a:	89 c6                	mov    %eax,%esi
    776c:	4c 89 ef             	mov    %r13,%rdi
    776f:	e8 3c ac ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    7774:	48 89 e5             	mov    %rsp,%rbp
    7777:	49 89 c4             	mov    %rax,%r12
    777a:	48 89 ef             	mov    %rbp,%rdi
    777d:	e8 be fa ff ff       	callq  7240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<float>()>
    7782:	48 89 ee             	mov    %rbp,%rsi
    7785:	4c 89 e7             	mov    %r12,%rdi
    7788:	e8 c3 ab ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    778d:	48 89 ef             	mov    %rbp,%rdi
    7790:	e8 1b ab ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    7795:	48 8d 3d 64 c3 ff ff 	lea    -0x3c9c(%rip),%rdi        # 3b00 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>
    779c:	e8 cf ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77a1:	48 8d 3d e8 c3 ff ff 	lea    -0x3c18(%rip),%rdi        # 3b90 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>
    77a8:	e8 c3 ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77ad:	48 8d 3d 0c c6 ff ff 	lea    -0x39f4(%rip),%rdi        # 3dc0 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>
    77b4:	e8 b7 ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77b9:	48 8d 3d a0 c6 ff ff 	lea    -0x3960(%rip),%rdi        # 3e60 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>
    77c0:	e8 ab ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77c5:	48 8d 3d 14 c7 ff ff 	lea    -0x38ec(%rip),%rdi        # 3ee0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>
    77cc:	e8 9f ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77d1:	48 8d 3d 38 c9 ff ff 	lea    -0x36c8(%rip),%rdi        # 4110 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>
    77d8:	e8 93 ec ff ff       	callq  6470 <void test_function<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    77dd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    77e2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    77e9:	00 00 
    77eb:	75 18                	jne    7805 <void test_type<float>()+0xc5>
    77ed:	48 8b 35 84 47 00 00 	mov    0x4784(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    77f4:	48 83 c4 30          	add    $0x30,%rsp
    77f8:	5d                   	pop    %rbp
    77f9:	41 5c                	pop    %r12
    77fb:	4c 89 ef             	mov    %r13,%rdi
    77fe:	41 5d                	pop    %r13
    7800:	e9 6b ab ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7805:	e8 96 ab ff ff       	callq  23a0 <__stack_chk_fail@plt>
    780a:	f3 0f 1e fa          	endbr64 
    780e:	49 89 c4             	mov    %rax,%r12
    7811:	e9 f7 ac ff ff       	jmpq   250d <void test_type<float>() [clone .cold]>
    7816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    781d:	00 00 00 

0000000000007820 <void test_type<double>()>:
    7820:	41 55                	push   %r13
    7822:	bf 0c 00 00 00       	mov    $0xc,%edi
    7827:	41 54                	push   %r12
    7829:	55                   	push   %rbp
    782a:	48 83 ec 30          	sub    $0x30,%rsp
    782e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7835:	00 00 
    7837:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    783c:	31 c0                	xor    %eax,%eax
    783e:	e8 cd ae ff ff       	callq  2710 <std::setw(int)>
    7843:	4c 8b 2d 56 47 00 00 	mov    0x4756(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    784a:	89 c6                	mov    %eax,%esi
    784c:	4c 89 ef             	mov    %r13,%rdi
    784f:	e8 5c ab ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    7854:	48 89 e5             	mov    %rsp,%rbp
    7857:	49 89 c4             	mov    %rax,%r12
    785a:	48 89 ef             	mov    %rbp,%rdi
    785d:	e8 3e fa ff ff       	callq  72a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<double>()>
    7862:	48 89 ee             	mov    %rbp,%rsi
    7865:	4c 89 e7             	mov    %r12,%rdi
    7868:	e8 e3 aa ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    786d:	48 89 ef             	mov    %rbp,%rdi
    7870:	e8 3b aa ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    7875:	48 8d 3d 14 c9 ff ff 	lea    -0x36ec(%rip),%rdi        # 4190 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>
    787c:	e8 1f ef ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    7881:	48 8d 3d 98 c9 ff ff 	lea    -0x3668(%rip),%rdi        # 4220 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>
    7888:	e8 13 ef ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    788d:	48 8d 3d 7c ca ff ff 	lea    -0x3584(%rip),%rdi        # 4310 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>
    7894:	e8 07 ef ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    7899:	48 8d 3d 10 cb ff ff 	lea    -0x34f0(%rip),%rdi        # 43b0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>
    78a0:	e8 fb ee ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    78a5:	48 8d 3d 84 cb ff ff 	lea    -0x347c(%rip),%rdi        # 4430 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>
    78ac:	e8 ef ee ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    78b1:	48 8d 3d 58 cc ff ff 	lea    -0x33a8(%rip),%rdi        # 4510 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>
    78b8:	e8 e3 ee ff ff       	callq  67a0 <void test_function<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    78bd:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    78c2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    78c9:	00 00 
    78cb:	75 18                	jne    78e5 <void test_type<double>()+0xc5>
    78cd:	48 8b 35 a4 46 00 00 	mov    0x46a4(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    78d4:	48 83 c4 30          	add    $0x30,%rsp
    78d8:	5d                   	pop    %rbp
    78d9:	41 5c                	pop    %r12
    78db:	4c 89 ef             	mov    %r13,%rdi
    78de:	41 5d                	pop    %r13
    78e0:	e9 8b aa ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    78e5:	e8 b6 aa ff ff       	callq  23a0 <__stack_chk_fail@plt>
    78ea:	f3 0f 1e fa          	endbr64 
    78ee:	49 89 c4             	mov    %rax,%r12
    78f1:	e9 2a ac ff ff       	jmpq   2520 <void test_type<double>() [clone .cold]>
    78f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    78fd:	00 00 00 

0000000000007900 <void test_type<long double>()>:
    7900:	41 55                	push   %r13
    7902:	bf 0c 00 00 00       	mov    $0xc,%edi
    7907:	41 54                	push   %r12
    7909:	55                   	push   %rbp
    790a:	48 83 ec 30          	sub    $0x30,%rsp
    790e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7915:	00 00 
    7917:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    791c:	31 c0                	xor    %eax,%eax
    791e:	e8 ed ad ff ff       	callq  2710 <std::setw(int)>
    7923:	4c 8b 2d 76 46 00 00 	mov    0x4676(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    792a:	89 c6                	mov    %eax,%esi
    792c:	4c 89 ef             	mov    %r13,%rdi
    792f:	e8 7c aa ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    7934:	48 89 e5             	mov    %rsp,%rbp
    7937:	49 89 c4             	mov    %rax,%r12
    793a:	48 89 ef             	mov    %rbp,%rdi
    793d:	e8 be f9 ff ff       	callq  7300 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<long double>()>
    7942:	48 89 ee             	mov    %rbp,%rsi
    7945:	4c 89 e7             	mov    %r12,%rdi
    7948:	e8 03 aa ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    794d:	48 89 ef             	mov    %rbp,%rdi
    7950:	e8 5b a9 ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    7955:	48 8d 3d 34 cc ff ff 	lea    -0x33cc(%rip),%rdi        # 4590 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    795c:	e8 cf f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    7961:	48 8d 3d b8 cc ff ff 	lea    -0x3348(%rip),%rdi        # 4620 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    7968:	e8 c3 f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    796d:	48 8d 3d 0c cd ff ff 	lea    -0x32f4(%rip),%rdi        # 4680 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    7974:	e8 b7 f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    7979:	48 8d 3d 90 cd ff ff 	lea    -0x3270(%rip),%rdi        # 4710 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    7980:	e8 ab f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    7985:	48 8d 3d 04 ce ff ff 	lea    -0x31fc(%rip),%rdi        # 4790 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    798c:	e8 9f f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    7991:	48 8d 3d 68 ce ff ff 	lea    -0x3198(%rip),%rdi        # 4800 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    7998:	e8 93 f0 ff ff       	callq  6a30 <void test_function<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    799d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    79a2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    79a9:	00 00 
    79ab:	75 18                	jne    79c5 <void test_type<long double>()+0xc5>
    79ad:	48 8b 35 c4 45 00 00 	mov    0x45c4(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    79b4:	48 83 c4 30          	add    $0x30,%rsp
    79b8:	5d                   	pop    %rbp
    79b9:	41 5c                	pop    %r12
    79bb:	4c 89 ef             	mov    %r13,%rdi
    79be:	41 5d                	pop    %r13
    79c0:	e9 ab a9 ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    79c5:	e8 d6 a9 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    79ca:	f3 0f 1e fa          	endbr64 
    79ce:	49 89 c4             	mov    %rax,%r12
    79d1:	e9 5d ab ff ff       	jmpq   2533 <void test_type<long double>() [clone .cold]>
    79d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    79dd:	00 00 00 

00000000000079e0 <void test_type<__float128>()>:
    79e0:	41 55                	push   %r13
    79e2:	bf 0c 00 00 00       	mov    $0xc,%edi
    79e7:	41 54                	push   %r12
    79e9:	55                   	push   %rbp
    79ea:	48 83 ec 30          	sub    $0x30,%rsp
    79ee:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    79f5:	00 00 
    79f7:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    79fc:	31 c0                	xor    %eax,%eax
    79fe:	e8 0d ad ff ff       	callq  2710 <std::setw(int)>
    7a03:	4c 8b 2d 96 45 00 00 	mov    0x4596(%rip),%r13        # bfa0 <std::cout@GLIBCXX_3.4>
    7a0a:	89 c6                	mov    %eax,%esi
    7a0c:	4c 89 ef             	mov    %r13,%rdi
    7a0f:	e8 9c a9 ff ff       	callq  23b0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    7a14:	48 89 e5             	mov    %rsp,%rbp
    7a17:	49 89 c4             	mov    %rax,%r12
    7a1a:	48 89 ef             	mov    %rbp,%rdi
    7a1d:	e8 3e f9 ff ff       	callq  7360 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > ec::demangle<__float128>()>
    7a22:	48 89 ee             	mov    %rbp,%rsi
    7a25:	4c 89 e7             	mov    %r12,%rdi
    7a28:	e8 23 a9 ff ff       	callq  2350 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    7a2d:	48 89 ef             	mov    %rbp,%rdi
    7a30:	e8 7b a8 ff ff       	callq  22b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    7a35:	48 8d 3d 54 ce ff ff 	lea    -0x31ac(%rip),%rdi        # 4890 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a3c:	e8 3f f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a41:	48 8d 3d 38 cf ff ff 	lea    -0x30c8(%rip),%rdi        # 4980 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a48:	e8 33 f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a4d:	48 8d 3d cc cf ff ff 	lea    -0x3034(%rip),%rdi        # 4a20 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a54:	e8 27 f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a59:	48 8d 3d b0 d0 ff ff 	lea    -0x2f50(%rip),%rdi        # 4b10 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a60:	e8 1b f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a65:	48 8d 3d 74 d1 ff ff 	lea    -0x2e8c(%rip),%rdi        # 4be0 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a6c:	e8 0f f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a71:	48 8d 3d 18 d2 ff ff 	lea    -0x2de8(%rip),%rdi        # 4c90 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    7a78:	e8 03 f2 ff ff       	callq  6c80 <void test_function<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    7a7d:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    7a82:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    7a89:	00 00 
    7a8b:	75 18                	jne    7aa5 <void test_type<__float128>()+0xc5>
    7a8d:	48 8b 35 e4 44 00 00 	mov    0x44e4(%rip),%rsi        # bf78 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    7a94:	48 83 c4 30          	add    $0x30,%rsp
    7a98:	5d                   	pop    %rbp
    7a99:	41 5c                	pop    %r12
    7a9b:	4c 89 ef             	mov    %r13,%rdi
    7a9e:	41 5d                	pop    %r13
    7aa0:	e9 cb a8 ff ff       	jmpq   2370 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    7aa5:	e8 f6 a8 ff ff       	callq  23a0 <__stack_chk_fail@plt>
    7aaa:	f3 0f 1e fa          	endbr64 
    7aae:	49 89 c4             	mov    %rax,%r12
    7ab1:	e9 90 aa ff ff       	jmpq   2546 <void test_type<__float128>() [clone .cold]>
    7ab6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    7abd:	00 00 00 

0000000000007ac0 <__libc_csu_init>:
    7ac0:	f3 0f 1e fa          	endbr64 
    7ac4:	41 57                	push   %r15
    7ac6:	4c 8d 3d 53 41 00 00 	lea    0x4153(%rip),%r15        # bc20 <__frame_dummy_init_array_entry>
    7acd:	41 56                	push   %r14
    7acf:	49 89 d6             	mov    %rdx,%r14
    7ad2:	41 55                	push   %r13
    7ad4:	49 89 f5             	mov    %rsi,%r13
    7ad7:	41 54                	push   %r12
    7ad9:	41 89 fc             	mov    %edi,%r12d
    7adc:	55                   	push   %rbp
    7add:	48 8d 2d 4c 41 00 00 	lea    0x414c(%rip),%rbp        # bc30 <__do_global_dtors_aux_fini_array_entry>
    7ae4:	53                   	push   %rbx
    7ae5:	4c 29 fd             	sub    %r15,%rbp
    7ae8:	48 83 ec 08          	sub    $0x8,%rsp
    7aec:	e8 0f a5 ff ff       	callq  2000 <_init>
    7af1:	48 c1 fd 03          	sar    $0x3,%rbp
    7af5:	74 1f                	je     7b16 <__libc_csu_init+0x56>
    7af7:	31 db                	xor    %ebx,%ebx
    7af9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    7b00:	4c 89 f2             	mov    %r14,%rdx
    7b03:	4c 89 ee             	mov    %r13,%rsi
    7b06:	44 89 e7             	mov    %r12d,%edi
    7b09:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    7b0d:	48 83 c3 01          	add    $0x1,%rbx
    7b11:	48 39 dd             	cmp    %rbx,%rbp
    7b14:	75 ea                	jne    7b00 <__libc_csu_init+0x40>
    7b16:	48 83 c4 08          	add    $0x8,%rsp
    7b1a:	5b                   	pop    %rbx
    7b1b:	5d                   	pop    %rbp
    7b1c:	41 5c                	pop    %r12
    7b1e:	41 5d                	pop    %r13
    7b20:	41 5e                	pop    %r14
    7b22:	41 5f                	pop    %r15
    7b24:	c3                   	retq   
    7b25:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7b2c:	00 00 00 00 

0000000000007b30 <__libc_csu_fini>:
    7b30:	f3 0f 1e fa          	endbr64 
    7b34:	c3                   	retq   

Desensamblado de la secci贸n .fini:

0000000000007b38 <_fini>:
    7b38:	f3 0f 1e fa          	endbr64 
    7b3c:	48 83 ec 08          	sub    $0x8,%rsp
    7b40:	48 83 c4 08          	add    $0x8,%rsp
    7b44:	c3                   	retq   
