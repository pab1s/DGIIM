plot(insurance.net)
# Evaluation
res <- compute(insurance.net, test.insurance[, 1:8])
predTest <- res$net.result
r2(predTest, test.insurance$charges)
write.csv(norm.insurance, file = "norm-ins.csv", row.names = FALSE)
View(norm.insurance)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Insert charges
norm.insurance$charges = insurance$charges
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
trainIndexBC = createDataPartition(norm.wisc.bc$diagnosis, p = 0.7, list =FALSE)
train.insurance = norm.insurance[trainIndexIns, ]
test.insurance = norm.insurance[-trainIndexIns, ]
train.wisc.bc = norm.wisc.bc[trainIndexBC, ]
test.wisc.bc = norm.wisc.bc[-trainIndexBC, ]
write.csv(norm.insurance, file = "norm-ins.csv", row.names = FALSE)
# Modeling and evaluation -------------------------------------------------
# MODEL 1: Insurance
# Creation of the formula
n <- names(train.insurance)
insurance.formula <- as.formula(paste("charges ~", paste(n[!n %in% "charges"],collapse = " + ")))
insurance.formula
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse", linear.output = TRUE, hidden=c(3,2))
insurance.net$control$epochs = 200
insurance.net = neuralnet(insurance.net)
insurance.net
plot(insurance.net)
# Evaluation
res <- compute(insurance.net, test.insurance[, 1:8])
predTest <- res$net.result
r2(predTest, test.insurance$charges)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
act.fct = "relu", linear.output = TRUE, hidden=c(3,2))
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
act.fct = "logistic", linear.output = TRUE, hidden=c(3,2))
insurance.net$control$epochs = 200
insurance.net = neuralnet(insurance.net)
plot(insurance.net)
# Evaluation
res <- compute(insurance.net, test.insurance[, 1:8])
predTest <- res$net.result
r2(predTest, test.insurance$charges)
# MODEL 2: Breast Cancer
# Creation of the formula
n <- names(train.wisc.bc)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
act.fct = "linear", linear.output = TRUE, hidden=c(3,2))
?neuralnet
View(train.insurance)
plot(test.insurance$charges, predTest, col = "red",
main = 'Real vs Predicted')
abline(0, 1, lwd = 2)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "mse",
linear.output = TRUE, hidden=c(3,2))
insurance.formula
# Evaluation
?compute
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
norm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Insert charges
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
norm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Insert charges
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
dm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Insert charges
#norm.insurance$charges = insurance$charges
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
trainIndexBC = createDataPartition(norm.wisc.bc$diagnosis, p = 0.7, list =FALSE)
train.insurance = norm.insurance[trainIndexIns, ]
test.insurance = norm.insurance[-trainIndexIns, ]
train.wisc.bc = norm.wisc.bc[trainIndexBC, ]
test.wisc.bc = norm.wisc.bc[-trainIndexBC, ]
write.csv(norm.insurance, file = "norm-ins.csv", row.names = FALSE)
# Modeling and evaluation -------------------------------------------------
# MODEL 1: Insurance
# Creation of the formula
n <- names(train.insurance)
insurance.formula <- as.formula(paste("charges ~", paste(n[!n %in% "charges"],collapse = " + ")))
insurance.formula
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(3,2))
insurance.net$control$epochs = 200
insurance.net = neuralnet(insurance.net)
insurance.net$control$epochs = 200
plot(insurance.net)
# Evaluation
res <- compute(insurance.net, test.insurance[, 1:8])
predTest <- res$net.result
r2(predTest, test.insurance$charges)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute and Insert charges
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
dm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
trainIndexBC = createDataPartition(norm.wisc.bc$diagnosis, p = 0.7, list =FALSE)
train.insurance = norm.insurance[trainIndexIns, ]
test.insurance = norm.insurance[-trainIndexIns, ]
train.wisc.bc = norm.wisc.bc[trainIndexBC, ]
test.wisc.bc = norm.wisc.bc[-trainIndexBC, ]
# Modeling and evaluation -------------------------------------------------
# MODEL 1: Insurance
# Creation of the formula
n = names(train.insurance)
insurance.formula = as.formula(paste("charges ~", paste(n[!n %in% "charges"],collapse = " + ")))
insurance.formula
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(3,2))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance$charges)
# MODEL 2: Breast Cancer
# Creation of the formula
n = names(train.wisc.bc)
wisc.bc.formula = as.formula(paste("diagnosis ~", paste(n[!n %in% "diagnosis"],collapse = " + ")))
wisc.bc.formula
# Modeling
wisc.bc.net = neuralnet(wisc.bc.formula, data = train.wisc.bc, err.fct = "ce", linear.output = FALSE)
wisc.bc.net$net.result
plot(wisc.bc.net)
# Evaluation
res2 = compute(wisc.bc.net, test.wisc.bc[, 2:31])
predTest2 = res2$net.result
predTest2 = ifelse(predTest2 >= 0.5, 1, 0)
table(predTest2, test.wisc.bc$diagnosis)
r2(predTest, test.insurance$charges)
View(predTest)
View(test.insurance)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance$charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance$charges)
par(mfrow=c(1,2))
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
par(mfrow=c(1,2))
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN',pch=18,cex=0.7)
abline(0,1,lwd=2)
r2(predTest, test.insurance$charges)
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(5,3))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance$charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance$charges)
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN')
plot(test.insurance$charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
# MODEL 2: Breast Cancer
# Creation of the formula
n = names(train.wisc.bc)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute and Insert charges
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
dm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
trainIndexBC = createDataPartition(norm.wisc.bc$diagnosis, p = 0.7, list =FALSE)
train.insurance = norm.insurance[trainIndexIns, ]
test.insurance = norm.insurance[-trainIndexIns, ]
train.wisc.bc = norm.wisc.bc[trainIndexBC, ]
test.wisc.bc = norm.wisc.bc[-trainIndexBC, ]
# Modeling and evaluation -------------------------------------------------
# MODEL 1: Insurance
# Creation of the formula
n = names(train.insurance)
insurance.formula = as.formula(paste("charges ~", paste(n[!n %in% "charges"],collapse = " + ")))
insurance.formula
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(5,3))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance.charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance.charges)
plot(test.insurance.charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
# MODEL 2: Breast Cancer
# Creation of the formula
n = names(train.wisc.bc)
wisc.bc.formula = as.formula(paste("diagnosis ~", paste(n[!n %in% "diagnosis"],collapse = " + ")))
wisc.bc.formula
# Modeling
wisc.bc.net = neuralnet(wisc.bc.formula, data = train.wisc.bc, err.fct = "ce", linear.output = FALSE)
wisc.bc.net$net.result
plot(wisc.bc.net)
# Evaluation
res2 = compute(wisc.bc.net, test.wisc.bc[, 2:31])
predTest2 = res2$net.result
predTest2 = ifelse(predTest2 >= 0.5, 1, 0)
table(predTest2, test.wisc.bc$diagnosis)
r2(predTest, test.insurance.charges)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(7,4,2))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance.charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance.charges)
plot(test.insurance.charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
# MODEL 2: Breast Cancer
# Creation of the formula
n = names(train.wisc.bc)
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(3,2))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance.charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance.charges)
plot(test.insurance.charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
library(caret)
library(neuralnet)
# Define necessary functions ----------------------------------------------
# Normalization function
normalize <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
# Mean Square Error
MSE = function(y.true, y.pred) { sum((y.true - y.pred)^2)/length(y.true)}
# Coefficient of Determination
r2 = function(pred, actual) {
rss = sum((actual - pred)^2) ## residual sum of squares
tss = sum((actual - mean(actual)) ^ 2) ## total sum of squares
result = 1 - rss / tss
return(result)
}
# Preparing Data ----------------------------------------------------------
# Import datasets
insurance = read.csv("Insurance.csv", stringsAsFactors = T)
wisc.bc = read.csv("wisc_bc_data.csv", stringsAsFactors = T)
wisc.bc = wisc.bc[-1]
# Dummification of variables
dummies.insurance = dummyVars(charges ~ .,insurance, fullRank = T)
dm.insurance = as.data.frame(predict(dummies.insurance, newdata = insurance))
# Set to numerical the diagnosis attribute and Insert charges
wisc.bc$diagnosis = ifelse(wisc.bc$diagnosis == "M", 1, 0)
dm.insurance$charges = insurance$charges
# Normalization of data
norm.insurance = as.data.frame(lapply(dm.insurance, normalize))
norm.wisc.bc = as.data.frame(lapply(wisc.bc, normalize))
# Division in Training and Test sets
set.seed(99)
trainIndexIns = createDataPartition(norm.insurance$charges, p = 0.7, list =FALSE)
trainIndexBC = createDataPartition(norm.wisc.bc$diagnosis, p = 0.7, list =FALSE)
train.insurance = norm.insurance[trainIndexIns, ]
test.insurance = norm.insurance[-trainIndexIns, ]
train.wisc.bc = norm.wisc.bc[trainIndexBC, ]
test.wisc.bc = norm.wisc.bc[-trainIndexBC, ]
# Modeling and evaluation -------------------------------------------------
# MODEL 1: Insurance
# Creation of the formula
n = names(train.insurance)
insurance.formula = as.formula(paste("charges ~", paste(n[!n %in% "charges"],collapse = " + ")))
insurance.formula
# Modeling
insurance.net = neuralnet(insurance.formula, data = train.insurance, err.fct = "sse",
linear.output = TRUE, hidden=c(3,2))
insurance.net
plot(insurance.net)
# Evaluation
res = compute(insurance.net, test.insurance[, 1:8])
predTest = res$net.result
predTest = res$net.result*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
test.insurance.charges = test.insurance$charges*(max(insurance$charges)-min(insurance$charges))+min(insurance$charges)
r2(predTest, test.insurance.charges) # 0.8527
# Visualization
plot(test.insurance.charges,predTest,col='red',main='Real vs predicted NN')
abline(0,1,lwd=2)
# MODEL 2: Breast Cancer
# Creation of the formula
n = names(train.wisc.bc)
wisc.bc.formula = as.formula(paste("diagnosis ~", paste(n[!n %in% "diagnosis"],collapse = " + ")))
wisc.bc.formula
# Modeling
wisc.bc.net = neuralnet(wisc.bc.formula, data = train.wisc.bc, err.fct = "ce", linear.output = FALSE)
wisc.bc.net$net.result
plot(wisc.bc.net)
# Evaluation
res2 = compute(wisc.bc.net, test.wisc.bc[, 2:31])
predTest2 = res2$net.result
predTest2 = ifelse(predTest2 >= 0.5, 1, 0)
table(predTest2, test.wisc.bc$diagnosis)
r2(predTest, test.insurance.charges) # 0.8527
confusionMatrix(predTest2, test.wisc.bc$diagnosis, mode = "everything", positive="1")
table(predTest2, test.wisc.bc$diagnosis)
confusionMatrix(predTest2, test.wisc.bc$diagnosis, mode = "everything", positive="1")
View(predTest2)
tyoeof(predTest2)
typeof(predTest2)
typeof(test.wisc.bc$diagnosis)
length(test.wisc.bc$diagnosis)
length(predTest2)
m = as.matrix(predTest2)
View(m)
confusionMatrix(as.matrix(predTest2), as.matrix(test.wisc.bc$diagnosis), mode = "everything", positive="1")
confusionMatrix(as.factor(predTest2), as.factor(test.wisc.bc$diagnosis), mode = "everything", positive="1")
cor(predTest2, test.wisc.bc$diagnosis)
cor(predTest, test.insurance.charges) # Correlation coefficient = 0.9504
