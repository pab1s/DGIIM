
ijk2:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 7f 00 00 	mov    0x7fd9(%rip),%rax        # 8fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000001020 <.plt>:
    1020:	ff 35 0a 7f 00 00    	pushq  0x7f0a(%rip)        # 8f30 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 0b 7f 00 00 	bnd jmpq *0x7f0b(%rip)        # 8f38 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	pushq  $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmpq 1020 <.plt>
    112f:	90                   	nop

Desensamblado de la sección .plt.got:

0000000000001130 <__cxa_finalize@plt>:
    1130:	f3 0f 1e fa          	endbr64 
    1134:	f2 ff 25 85 7e 00 00 	bnd jmpq *0x7e85(%rip)        # 8fc0 <__cxa_finalize@GLIBC_2.2.5>
    113b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .plt.sec:

0000000000001140 <std::chrono::_V2::system_clock::now()@plt>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	f2 ff 25 f5 7d 00 00 	bnd jmpq *0x7df5(%rip)        # 8f40 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	f2 ff 25 ed 7d 00 00 	bnd jmpq *0x7ded(%rip)        # 8f48 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@GLIBCXX_3.4>
    115b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001160 <memset@plt>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	f2 ff 25 e5 7d 00 00 	bnd jmpq *0x7de5(%rip)        # 8f50 <memset@GLIBC_2.2.5>
    116b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001170 <__assert_fail@plt>:
    1170:	f3 0f 1e fa          	endbr64 
    1174:	f2 ff 25 dd 7d 00 00 	bnd jmpq *0x7ddd(%rip)        # 8f58 <__assert_fail@GLIBC_2.2.5>
    117b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001180 <__multf3@plt>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	f2 ff 25 d5 7d 00 00 	bnd jmpq *0x7dd5(%rip)        # 8f60 <__multf3@GCC_4.3.0>
    118b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001190 <__cxa_atexit@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 cd 7d 00 00 	bnd jmpq *0x7dcd(%rip)        # 8f68 <__cxa_atexit@GLIBC_2.2.5>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 c5 7d 00 00 	bnd jmpq *0x7dc5(%rip)        # 8f70 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 bd 7d 00 00 	bnd jmpq *0x7dbd(%rip)        # 8f78 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <__stack_chk_fail@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 b5 7d 00 00 	bnd jmpq *0x7db5(%rip)        # 8f80 <__stack_chk_fail@GLIBC_2.4>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 ad 7d 00 00 	bnd jmpq *0x7dad(%rip)        # 8f88 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@GLIBCXX_3.4>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <__addtf3@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 a5 7d 00 00 	bnd jmpq *0x7da5(%rip)        # 8f90 <__addtf3@GCC_4.3.0>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <std::ios_base::Init::Init()@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 9d 7d 00 00 	bnd jmpq *0x7d9d(%rip)        # 8f98 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 95 7d 00 00 	bnd jmpq *0x7d95(%rip)        # 8fa0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@GLIBCXX_3.4>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <memmove@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 8d 7d 00 00 	bnd jmpq *0x7d8d(%rip)        # 8fa8 <memmove@GLIBC_2.2.5>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <__eqtf2@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 85 7d 00 00 	bnd jmpq *0x7d85(%rip)        # 8fb0 <__eqtf2@GCC_4.3.0>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <std::ostream::operator<<(double)@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 7d 7d 00 00 	bnd jmpq *0x7d7d(%rip)        # 8fb8 <std::ostream::operator<<(double)@GLIBCXX_3.4>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .text:

0000000000001240 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
    1240:	48 83 ec 08          	sub    $0x8,%rsp
    1244:	48 8d 3d c6 7d 00 00 	lea    0x7dc6(%rip),%rdi        # 9011 <std::__ioinit>
    124b:	e8 a0 ff ff ff       	callq  11f0 <std::ios_base::Init::Init()@plt>
    1250:	48 8b 3d a1 7d 00 00 	mov    0x7da1(%rip),%rdi        # 8ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    1257:	48 8d 15 aa 7d 00 00 	lea    0x7daa(%rip),%rdx        # 9008 <__dso_handle>
    125e:	48 8d 35 ac 7d 00 00 	lea    0x7dac(%rip),%rsi        # 9011 <std::__ioinit>
    1265:	48 83 c4 08          	add    $0x8,%rsp
    1269:	e9 22 ff ff ff       	jmpq   1190 <__cxa_atexit@plt>
    126e:	66 90                	xchg   %ax,%ax

0000000000001270 <main>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	41 55                	push   %r13
    1276:	48 8d 15 15 51 00 00 	lea    0x5115(%rip),%rdx        # 6392 <_IO_stdin_used+0x392>
    127d:	c4 e1 f9 6e c2       	vmovq  %rdx,%xmm0
    1282:	41 54                	push   %r12
    1284:	48 8d 0d 12 51 00 00 	lea    0x5112(%rip),%rcx        # 639d <_IO_stdin_used+0x39d>
    128b:	48 8d 15 14 51 00 00 	lea    0x5114(%rip),%rdx        # 63a6 <_IO_stdin_used+0x3a6>
    1292:	55                   	push   %rbp
    1293:	53                   	push   %rbx
    1294:	48 83 ec 58          	sub    $0x58,%rsp
    1298:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    129f:	00 00 
    12a1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    12a6:	48 8d 05 ea 50 00 00 	lea    0x50ea(%rip),%rax        # 6397 <_IO_stdin_used+0x397>
    12ad:	48 8b 2d 1c 7d 00 00 	mov    0x7d1c(%rip),%rbp        # 8fd0 <std::cout@GLIBCXX_3.4>
    12b4:	48 89 e3             	mov    %rsp,%rbx
    12b7:	4c 8d 64 24 48       	lea    0x48(%rsp),%r12
    12bc:	c4 e3 f9 22 c0 01    	vpinsrq $0x1,%rax,%xmm0,%xmm0
    12c2:	c5 f9 7f 04 24       	vmovdqa %xmm0,(%rsp)
    12c7:	48 8d 05 d3 50 00 00 	lea    0x50d3(%rip),%rax        # 63a1 <_IO_stdin_used+0x3a1>
    12ce:	c4 e1 f9 6e c1       	vmovq  %rcx,%xmm0
    12d3:	c4 e3 f9 22 c0 01    	vpinsrq $0x1,%rax,%xmm0,%xmm0
    12d9:	c5 f9 7f 44 24 10    	vmovdqa %xmm0,0x10(%rsp)
    12df:	48 8d 05 c7 50 00 00 	lea    0x50c7(%rip),%rax        # 63ad <_IO_stdin_used+0x3ad>
    12e6:	c4 e1 f9 6e c2       	vmovq  %rdx,%xmm0
    12eb:	c4 e3 f9 22 c0 01    	vpinsrq $0x1,%rax,%xmm0,%xmm0
    12f1:	48 8d 0d bc 50 00 00 	lea    0x50bc(%rip),%rcx        # 63b4 <_IO_stdin_used+0x3b4>
    12f8:	48 8d 05 b4 50 00 00 	lea    0x50b4(%rip),%rax        # 63b3 <_IO_stdin_used+0x3b3>
    12ff:	c5 f9 7f 44 24 20    	vmovdqa %xmm0,0x20(%rsp)
    1305:	c4 e1 f9 6e c1       	vmovq  %rcx,%xmm0
    130a:	c4 e3 f9 22 c0 01    	vpinsrq $0x1,%rax,%xmm0,%xmm0
    1310:	48 8d 05 a4 50 00 00 	lea    0x50a4(%rip),%rax        # 63bb <_IO_stdin_used+0x3bb>
    1317:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    131c:	c5 f9 7f 44 24 30    	vmovdqa %xmm0,0x30(%rsp)
    1322:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1328:	e8 d3 2b 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    132d:	89 c6                	mov    %eax,%esi
    132f:	48 89 ef             	mov    %rbp,%rdi
    1332:	e8 99 fe ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    1337:	48 8b 33             	mov    (%rbx),%rsi
    133a:	48 89 c7             	mov    %rax,%rdi
    133d:	48 83 c3 08          	add    $0x8,%rbx
    1341:	e8 5a fe ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    1346:	49 39 dc             	cmp    %rbx,%r12
    1349:	75 dd                	jne    1328 <main+0xb8>
    134b:	4c 8b 2d 76 7c 00 00 	mov    0x7c76(%rip),%r13        # 8fc8 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    1352:	48 89 ef             	mov    %rbp,%rdi
    1355:	4c 89 ee             	mov    %r13,%rsi
    1358:	e8 53 fe ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    135d:	bb 09 00 00 00       	mov    $0x9,%ebx
    1362:	4c 8d 25 5a 50 00 00 	lea    0x505a(%rip),%r12        # 63c3 <_IO_stdin_used+0x3c3>
    1369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1370:	e8 8b 2b 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    1375:	89 c6                	mov    %eax,%esi
    1377:	48 89 ef             	mov    %rbp,%rdi
    137a:	e8 51 fe ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    137f:	48 89 c7             	mov    %rax,%rdi
    1382:	4c 89 e6             	mov    %r12,%rsi
    1385:	e8 16 fe ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    138a:	ff cb                	dec    %ebx
    138c:	75 e2                	jne    1370 <main+0x100>
    138e:	4c 89 ee             	mov    %r13,%rsi
    1391:	48 89 ef             	mov    %rbp,%rdi
    1394:	e8 17 fe ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    1399:	e8 62 2b 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    139e:	89 c6                	mov    %eax,%esi
    13a0:	48 89 ef             	mov    %rbp,%rdi
    13a3:	e8 28 fe ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    13a8:	48 89 c7             	mov    %rax,%rdi
    13ab:	48 8d 35 19 50 00 00 	lea    0x5019(%rip),%rsi        # 63cb <_IO_stdin_used+0x3cb>
    13b2:	e8 e9 fd ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    13b7:	48 8d 3d 62 04 00 00 	lea    0x462(%rip),%rdi        # 1820 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>
    13be:	e8 ad 34 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    13c3:	48 8d 3d e6 04 00 00 	lea    0x4e6(%rip),%rdi        # 18b0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>
    13ca:	e8 21 37 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    13cf:	48 8d 3d 6a 05 00 00 	lea    0x56a(%rip),%rdi        # 1940 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>
    13d6:	e8 15 3a 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    13db:	48 8d 3d ee 05 00 00 	lea    0x5ee(%rip),%rdi        # 19d0 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    13e2:	e8 69 3c 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    13e7:	48 8d 3d a2 06 00 00 	lea    0x6a2(%rip),%rdi        # 1a90 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>
    13ee:	e8 8d 3e 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    13f3:	48 8d 3d 26 07 00 00 	lea    0x726(%rip),%rdi        # 1b20 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>
    13fa:	e8 91 41 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    13ff:	48 8d 3d aa 07 00 00 	lea    0x7aa(%rip),%rdi        # 1bb0 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    1406:	e8 e5 43 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    140b:	48 8d 3d 2e 08 00 00 	lea    0x82e(%rip),%rdi        # 1c40 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1412:	e8 09 46 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1417:	4c 89 ee             	mov    %r13,%rsi
    141a:	48 89 ef             	mov    %rbp,%rdi
    141d:	e8 8e fd ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    1422:	e8 d9 2a 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    1427:	89 c6                	mov    %eax,%esi
    1429:	48 89 ef             	mov    %rbp,%rdi
    142c:	e8 9f fd ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    1431:	48 89 c7             	mov    %rax,%rdi
    1434:	48 8d 35 94 4f 00 00 	lea    0x4f94(%rip),%rsi        # 63cf <_IO_stdin_used+0x3cf>
    143b:	e8 60 fd ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    1440:	48 8d 3d e9 08 00 00 	lea    0x8e9(%rip),%rdi        # 1d30 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>
    1447:	e8 24 34 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    144c:	48 8d 3d 3d 0a 00 00 	lea    0xa3d(%rip),%rdi        # 1e90 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>
    1453:	e8 98 36 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    1458:	48 8d 3d 61 0c 00 00 	lea    0xc61(%rip),%rdi        # 20c0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>
    145f:	e8 8c 39 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1464:	48 8d 3d 65 0d 00 00 	lea    0xd65(%rip),%rdi        # 21d0 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    146b:	e8 e0 3b 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1470:	48 8d 3d e9 0d 00 00 	lea    0xde9(%rip),%rdi        # 2260 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>
    1477:	e8 04 3e 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    147c:	48 8d 3d 0d 10 00 00 	lea    0x100d(%rip),%rdi        # 2490 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>
    1483:	e8 08 41 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1488:	48 8d 3d f1 10 00 00 	lea    0x10f1(%rip),%rdi        # 2580 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    148f:	e8 5c 43 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    1494:	48 8d 3d 45 11 00 00 	lea    0x1145(%rip),%rdi        # 25e0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    149b:	e8 80 45 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    14a0:	4c 89 ee             	mov    %r13,%rsi
    14a3:	48 89 ef             	mov    %rbp,%rdi
    14a6:	e8 05 fd ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    14ab:	e8 50 2a 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    14b0:	89 c6                	mov    %eax,%esi
    14b2:	48 89 ef             	mov    %rbp,%rdi
    14b5:	e8 16 fd ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    14ba:	48 89 c7             	mov    %rax,%rdi
    14bd:	48 8d 35 0f 4f 00 00 	lea    0x4f0f(%rip),%rsi        # 63d3 <_IO_stdin_used+0x3d3>
    14c4:	e8 d7 fc ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    14c9:	48 8d 3d b0 11 00 00 	lea    0x11b0(%rip),%rdi        # 2680 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>
    14d0:	e8 9b 33 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    14d5:	48 8d 3d 34 12 00 00 	lea    0x1234(%rip),%rdi        # 2710 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>
    14dc:	e8 0f 36 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    14e1:	48 8d 3d c8 12 00 00 	lea    0x12c8(%rip),%rdi        # 27b0 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>
    14e8:	e8 03 39 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    14ed:	48 8d 3d 5c 13 00 00 	lea    0x135c(%rip),%rdi        # 2850 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    14f4:	e8 57 3b 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    14f9:	48 8d 3d 30 14 00 00 	lea    0x1430(%rip),%rdi        # 2930 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>
    1500:	e8 7b 3d 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    1505:	48 8d 3d c4 14 00 00 	lea    0x14c4(%rip),%rdi        # 29d0 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>
    150c:	e8 7f 40 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1511:	48 8d 3d 58 15 00 00 	lea    0x1558(%rip),%rdi        # 2a70 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    1518:	e8 d3 42 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    151d:	48 8d 3d dc 15 00 00 	lea    0x15dc(%rip),%rdi        # 2b00 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1524:	e8 f7 44 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    1529:	4c 89 ee             	mov    %r13,%rsi
    152c:	48 89 ef             	mov    %rbp,%rdi
    152f:	e8 7c fc ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    1534:	e8 c7 29 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    1539:	89 c6                	mov    %eax,%esi
    153b:	48 89 ef             	mov    %rbp,%rdi
    153e:	e8 8d fc ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    1543:	48 89 c7             	mov    %rax,%rdi
    1546:	48 8d 35 8a 4e 00 00 	lea    0x4e8a(%rip),%rsi        # 63d7 <_IO_stdin_used+0x3d7>
    154d:	e8 4e fc ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    1552:	48 8d 3d 97 16 00 00 	lea    0x1697(%rip),%rdi        # 2bf0 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>
    1559:	e8 12 33 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    155e:	48 8d 3d 0b 17 00 00 	lea    0x170b(%rip),%rdi        # 2c70 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>
    1565:	e8 86 35 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    156a:	48 8d 3d 7f 17 00 00 	lea    0x177f(%rip),%rdi        # 2cf0 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>
    1571:	e8 7a 38 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1576:	48 8d 3d f3 17 00 00 	lea    0x17f3(%rip),%rdi        # 2d70 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    157d:	e8 ce 3a 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1582:	48 8d 3d 97 18 00 00 	lea    0x1897(%rip),%rdi        # 2e20 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>
    1589:	e8 f2 3c 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    158e:	48 8d 3d 0b 19 00 00 	lea    0x190b(%rip),%rdi        # 2ea0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>
    1595:	e8 f6 3f 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    159a:	48 8d 3d 7f 19 00 00 	lea    0x197f(%rip),%rdi        # 2f20 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    15a1:	e8 4a 42 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    15a6:	48 8d 3d f3 19 00 00 	lea    0x19f3(%rip),%rdi        # 2fa0 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    15ad:	e8 6e 44 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    15b2:	4c 89 ee             	mov    %r13,%rsi
    15b5:	48 89 ef             	mov    %rbp,%rdi
    15b8:	e8 f3 fb ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    15bd:	e8 3e 29 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    15c2:	89 c6                	mov    %eax,%esi
    15c4:	48 89 ef             	mov    %rbp,%rdi
    15c7:	e8 04 fc ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    15cc:	48 89 c7             	mov    %rax,%rdi
    15cf:	48 8d 35 05 4e 00 00 	lea    0x4e05(%rip),%rsi        # 63db <_IO_stdin_used+0x3db>
    15d6:	e8 c5 fb ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    15db:	48 8d 3d 8e 1a 00 00 	lea    0x1a8e(%rip),%rdi        # 3070 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>
    15e2:	e8 89 32 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    15e7:	48 8d 3d e2 1b 00 00 	lea    0x1be2(%rip),%rdi        # 31d0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>
    15ee:	e8 fd 34 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    15f3:	48 8d 3d 06 1e 00 00 	lea    0x1e06(%rip),%rdi        # 3400 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>
    15fa:	e8 f1 37 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    15ff:	48 8d 3d fa 1e 00 00 	lea    0x1efa(%rip),%rdi        # 3500 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    1606:	e8 45 3a 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    160b:	48 8d 3d 8e 1f 00 00 	lea    0x1f8e(%rip),%rdi        # 35a0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>
    1612:	e8 69 3c 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    1617:	48 8d 3d b2 21 00 00 	lea    0x21b2(%rip),%rdi        # 37d0 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>
    161e:	e8 6d 3f 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    1623:	48 8d 3d 86 22 00 00 	lea    0x2286(%rip),%rdi        # 38b0 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    162a:	e8 c1 41 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    162f:	48 8d 3d ea 22 00 00 	lea    0x22ea(%rip),%rdi        # 3920 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    1636:	e8 e5 43 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    163b:	4c 89 ee             	mov    %r13,%rsi
    163e:	48 89 ef             	mov    %rbp,%rdi
    1641:	e8 6a fb ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    1646:	e8 b5 28 00 00       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    164b:	89 c6                	mov    %eax,%esi
    164d:	48 89 ef             	mov    %rbp,%rdi
    1650:	e8 7b fb ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    1655:	48 89 c7             	mov    %rax,%rdi
    1658:	48 8d 35 80 4d 00 00 	lea    0x4d80(%rip),%rsi        # 63df <_IO_stdin_used+0x3df>
    165f:	e8 3c fb ff ff       	callq  11a0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    1664:	48 8d 3d 65 23 00 00 	lea    0x2365(%rip),%rdi        # 39d0 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>
    166b:	e8 00 32 00 00       	callq  4870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>
    1670:	48 8d 3d d9 23 00 00 	lea    0x23d9(%rip),%rdi        # 3a50 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>
    1677:	e8 74 34 00 00       	callq  4af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>
    167c:	48 8d 3d 4d 24 00 00 	lea    0x244d(%rip),%rdi        # 3ad0 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>
    1683:	e8 68 37 00 00       	callq  4df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>
    1688:	48 8d 3d c1 24 00 00 	lea    0x24c1(%rip),%rdi        # 3b50 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>
    168f:	e8 bc 39 00 00       	callq  5050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>
    1694:	48 8d 3d 65 25 00 00 	lea    0x2565(%rip),%rdi        # 3c00 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>
    169b:	e8 e0 3b 00 00       	callq  5280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>
    16a0:	48 8d 3d d9 25 00 00 	lea    0x25d9(%rip),%rdi        # 3c80 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>
    16a7:	e8 e4 3e 00 00       	callq  5590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>
    16ac:	48 8d 3d 4d 26 00 00 	lea    0x264d(%rip),%rdi        # 3d00 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>
    16b3:	e8 38 41 00 00       	callq  57f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>
    16b8:	48 8d 3d d1 26 00 00 	lea    0x26d1(%rip),%rdi        # 3d90 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>
    16bf:	e8 5c 43 00 00       	callq  5a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>
    16c4:	4c 89 ee             	mov    %r13,%rsi
    16c7:	48 89 ef             	mov    %rbp,%rdi
    16ca:	e8 e1 fa ff ff       	callq  11b0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    16cf:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    16d4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    16db:	00 00 
    16dd:	75 0d                	jne    16ec <main+0x47c>
    16df:	48 83 c4 58          	add    $0x58,%rsp
    16e3:	5b                   	pop    %rbx
    16e4:	5d                   	pop    %rbp
    16e5:	41 5c                	pop    %r12
    16e7:	31 c0                	xor    %eax,%eax
    16e9:	41 5d                	pop    %r13
    16eb:	c3                   	retq   
    16ec:	e8 cf fa ff ff       	callq  11c0 <__stack_chk_fail@plt>
    16f1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    16f8:	00 00 00 00 
    16fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001700 <_GLOBAL__sub_I__ZN2ec8demangleB5cxx11EPKc>:
    1700:	f3 0f 1e fa          	endbr64 
    1704:	e9 37 fb ff ff       	jmpq   1240 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>
    1709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001710 <_start>:
    1710:	f3 0f 1e fa          	endbr64 
    1714:	31 ed                	xor    %ebp,%ebp
    1716:	49 89 d1             	mov    %rdx,%r9
    1719:	5e                   	pop    %rsi
    171a:	48 89 e2             	mov    %rsp,%rdx
    171d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1721:	50                   	push   %rax
    1722:	54                   	push   %rsp
    1723:	4c 8d 05 96 45 00 00 	lea    0x4596(%rip),%r8        # 5cc0 <__libc_csu_fini>
    172a:	48 8d 0d 1f 45 00 00 	lea    0x451f(%rip),%rcx        # 5c50 <__libc_csu_init>
    1731:	48 8d 3d 38 fb ff ff 	lea    -0x4c8(%rip),%rdi        # 1270 <main>
    1738:	ff 15 a2 78 00 00    	callq  *0x78a2(%rip)        # 8fe0 <__libc_start_main@GLIBC_2.2.5>
    173e:	f4                   	hlt    
    173f:	90                   	nop

0000000000001740 <deregister_tm_clones>:
    1740:	48 8d 3d c9 78 00 00 	lea    0x78c9(%rip),%rdi        # 9010 <__TMC_END__>
    1747:	48 8d 05 c2 78 00 00 	lea    0x78c2(%rip),%rax        # 9010 <__TMC_END__>
    174e:	48 39 f8             	cmp    %rdi,%rax
    1751:	74 15                	je     1768 <deregister_tm_clones+0x28>
    1753:	48 8b 05 7e 78 00 00 	mov    0x787e(%rip),%rax        # 8fd8 <_ITM_deregisterTMCloneTable>
    175a:	48 85 c0             	test   %rax,%rax
    175d:	74 09                	je     1768 <deregister_tm_clones+0x28>
    175f:	ff e0                	jmpq   *%rax
    1761:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1768:	c3                   	retq   
    1769:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001770 <register_tm_clones>:
    1770:	48 8d 3d 99 78 00 00 	lea    0x7899(%rip),%rdi        # 9010 <__TMC_END__>
    1777:	48 8d 35 92 78 00 00 	lea    0x7892(%rip),%rsi        # 9010 <__TMC_END__>
    177e:	48 29 fe             	sub    %rdi,%rsi
    1781:	48 89 f0             	mov    %rsi,%rax
    1784:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1788:	48 c1 f8 03          	sar    $0x3,%rax
    178c:	48 01 c6             	add    %rax,%rsi
    178f:	48 d1 fe             	sar    %rsi
    1792:	74 14                	je     17a8 <register_tm_clones+0x38>
    1794:	48 8b 05 55 78 00 00 	mov    0x7855(%rip),%rax        # 8ff0 <_ITM_registerTMCloneTable>
    179b:	48 85 c0             	test   %rax,%rax
    179e:	74 08                	je     17a8 <register_tm_clones+0x38>
    17a0:	ff e0                	jmpq   *%rax
    17a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    17a8:	c3                   	retq   
    17a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000017b0 <__do_global_dtors_aux>:
    17b0:	f3 0f 1e fa          	endbr64 
    17b4:	80 3d 55 78 00 00 00 	cmpb   $0x0,0x7855(%rip)        # 9010 <__TMC_END__>
    17bb:	75 2b                	jne    17e8 <__do_global_dtors_aux+0x38>
    17bd:	55                   	push   %rbp
    17be:	48 83 3d fa 77 00 00 	cmpq   $0x0,0x77fa(%rip)        # 8fc0 <__cxa_finalize@GLIBC_2.2.5>
    17c5:	00 
    17c6:	48 89 e5             	mov    %rsp,%rbp
    17c9:	74 0c                	je     17d7 <__do_global_dtors_aux+0x27>
    17cb:	48 8b 3d 36 78 00 00 	mov    0x7836(%rip),%rdi        # 9008 <__dso_handle>
    17d2:	e8 59 f9 ff ff       	callq  1130 <__cxa_finalize@plt>
    17d7:	e8 64 ff ff ff       	callq  1740 <deregister_tm_clones>
    17dc:	c6 05 2d 78 00 00 01 	movb   $0x1,0x782d(%rip)        # 9010 <__TMC_END__>
    17e3:	5d                   	pop    %rbp
    17e4:	c3                   	retq   
    17e5:	0f 1f 00             	nopl   (%rax)
    17e8:	c3                   	retq   
    17e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000017f0 <frame_dummy>:
    17f0:	f3 0f 1e fa          	endbr64 
    17f4:	e9 77 ff ff ff       	jmpq   1770 <register_tm_clones>
    17f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001800 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>:
    1800:	89 f8                	mov    %edi,%eax
    1802:	21 f0                	and    %esi,%eax
    1804:	c3                   	retq   
    1805:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    180c:	00 00 00 00 

0000000000001810 <std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>:
    1810:	89 f8                	mov    %edi,%eax
    1812:	09 f0                	or     %esi,%eax
    1814:	c3                   	retq   
    1815:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    181c:	00 00 00 00 

0000000000001820 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])>:
    1820:	f3 0f 1e fa          	endbr64 
    1824:	41 54                	push   %r12
    1826:	49 89 fb             	mov    %rdi,%r11
    1829:	4c 8d a2 00 80 00 00 	lea    0x8000(%rdx),%r12
    1830:	55                   	push   %rbp
    1831:	4c 8d 92 00 81 00 00 	lea    0x8100(%rdx),%r10
    1838:	31 ed                	xor    %ebp,%ebp
    183a:	53                   	push   %rbx
    183b:	48 89 f3             	mov    %rsi,%rbx
    183e:	49 89 e9             	mov    %rbp,%r9
    1841:	49 c1 e1 08          	shl    $0x8,%r9
    1845:	4c 89 e7             	mov    %r12,%rdi
    1848:	49 01 d9             	add    %rbx,%r9
    184b:	4d 89 d8             	mov    %r11,%r8
    184e:	41 0f b7 30          	movzwl (%r8),%esi
    1852:	48 8d 87 00 80 ff ff 	lea    -0x8000(%rdi),%rax
    1859:	4c 89 c9             	mov    %r9,%rcx
    185c:	0f 1f 40 00          	nopl   0x0(%rax)
    1860:	0f b7 11             	movzwl (%rcx),%edx
    1863:	48 05 00 01 00 00    	add    $0x100,%rax
    1869:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    1870:	ff 
    1871:	48 83 c1 02          	add    $0x2,%rcx
    1875:	01 d6                	add    %edx,%esi
    1877:	66 41 89 30          	mov    %si,(%r8)
    187b:	48 39 c7             	cmp    %rax,%rdi
    187e:	75 e0                	jne    1860 <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    1880:	48 83 c7 02          	add    $0x2,%rdi
    1884:	49 83 c0 02          	add    $0x2,%r8
    1888:	49 39 fa             	cmp    %rdi,%r10
    188b:	75 c1                	jne    184e <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x2e>
    188d:	48 ff c5             	inc    %rbp
    1890:	49 81 c3 00 01 00 00 	add    $0x100,%r11
    1897:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    189e:	75 9e                	jne    183e <void ijk<short>(short (*) [128], short (*) [128], short (*) [128])+0x1e>
    18a0:	5b                   	pop    %rbx
    18a1:	5d                   	pop    %rbp
    18a2:	41 5c                	pop    %r12
    18a4:	c3                   	retq   
    18a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    18ac:	00 00 00 00 

00000000000018b0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])>:
    18b0:	f3 0f 1e fa          	endbr64 
    18b4:	41 54                	push   %r12
    18b6:	49 89 fb             	mov    %rdi,%r11
    18b9:	4c 8d a2 00 00 01 00 	lea    0x10000(%rdx),%r12
    18c0:	55                   	push   %rbp
    18c1:	4c 8d 92 00 02 01 00 	lea    0x10200(%rdx),%r10
    18c8:	31 ed                	xor    %ebp,%ebp
    18ca:	53                   	push   %rbx
    18cb:	48 89 f3             	mov    %rsi,%rbx
    18ce:	49 89 e9             	mov    %rbp,%r9
    18d1:	49 c1 e1 09          	shl    $0x9,%r9
    18d5:	4c 89 e7             	mov    %r12,%rdi
    18d8:	49 01 d9             	add    %rbx,%r9
    18db:	4d 89 d8             	mov    %r11,%r8
    18de:	41 8b 30             	mov    (%r8),%esi
    18e1:	48 8d 87 00 00 ff ff 	lea    -0x10000(%rdi),%rax
    18e8:	4c 89 c9             	mov    %r9,%rcx
    18eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    18f0:	8b 11                	mov    (%rcx),%edx
    18f2:	48 05 00 02 00 00    	add    $0x200,%rax
    18f8:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    18ff:	48 83 c1 04          	add    $0x4,%rcx
    1903:	01 d6                	add    %edx,%esi
    1905:	41 89 30             	mov    %esi,(%r8)
    1908:	48 39 c7             	cmp    %rax,%rdi
    190b:	75 e3                	jne    18f0 <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x40>
    190d:	48 83 c7 04          	add    $0x4,%rdi
    1911:	49 83 c0 04          	add    $0x4,%r8
    1915:	49 39 fa             	cmp    %rdi,%r10
    1918:	75 c4                	jne    18de <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x2e>
    191a:	48 ff c5             	inc    %rbp
    191d:	49 81 c3 00 02 00 00 	add    $0x200,%r11
    1924:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    192b:	75 a1                	jne    18ce <void ijk<int>(int (*) [128], int (*) [128], int (*) [128])+0x1e>
    192d:	5b                   	pop    %rbx
    192e:	5d                   	pop    %rbp
    192f:	41 5c                	pop    %r12
    1931:	c3                   	retq   
    1932:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1939:	00 00 00 00 
    193d:	0f 1f 00             	nopl   (%rax)

0000000000001940 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])>:
    1940:	f3 0f 1e fa          	endbr64 
    1944:	41 54                	push   %r12
    1946:	49 89 fb             	mov    %rdi,%r11
    1949:	4c 8d a2 00 00 02 00 	lea    0x20000(%rdx),%r12
    1950:	55                   	push   %rbp
    1951:	4c 8d 92 00 04 02 00 	lea    0x20400(%rdx),%r10
    1958:	31 ed                	xor    %ebp,%ebp
    195a:	53                   	push   %rbx
    195b:	48 89 f3             	mov    %rsi,%rbx
    195e:	49 89 e9             	mov    %rbp,%r9
    1961:	49 c1 e1 0a          	shl    $0xa,%r9
    1965:	4c 89 e7             	mov    %r12,%rdi
    1968:	49 01 d9             	add    %rbx,%r9
    196b:	4d 89 d8             	mov    %r11,%r8
    196e:	49 8b 30             	mov    (%r8),%rsi
    1971:	48 8d 87 00 00 fe ff 	lea    -0x20000(%rdi),%rax
    1978:	4c 89 c9             	mov    %r9,%rcx
    197b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1980:	48 8b 11             	mov    (%rcx),%rdx
    1983:	48 05 00 04 00 00    	add    $0x400,%rax
    1989:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    1990:	ff 
    1991:	48 83 c1 08          	add    $0x8,%rcx
    1995:	48 01 d6             	add    %rdx,%rsi
    1998:	49 89 30             	mov    %rsi,(%r8)
    199b:	48 39 c7             	cmp    %rax,%rdi
    199e:	75 e0                	jne    1980 <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x40>
    19a0:	48 83 c7 08          	add    $0x8,%rdi
    19a4:	49 83 c0 08          	add    $0x8,%r8
    19a8:	49 39 fa             	cmp    %rdi,%r10
    19ab:	75 c1                	jne    196e <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    19ad:	48 ff c5             	inc    %rbp
    19b0:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    19b7:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    19be:	75 9e                	jne    195e <void ijk<long>(long (*) [128], long (*) [128], long (*) [128])+0x1e>
    19c0:	5b                   	pop    %rbx
    19c1:	5d                   	pop    %rbp
    19c2:	41 5c                	pop    %r12
    19c4:	c3                   	retq   
    19c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    19cc:	00 00 00 00 

00000000000019d0 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    19d0:	f3 0f 1e fa          	endbr64 
    19d4:	41 57                	push   %r15
    19d6:	45 31 ff             	xor    %r15d,%r15d
    19d9:	41 56                	push   %r14
    19db:	49 89 f6             	mov    %rsi,%r14
    19de:	41 55                	push   %r13
    19e0:	49 89 fd             	mov    %rdi,%r13
    19e3:	41 54                	push   %r12
    19e5:	4c 8d a2 00 08 04 00 	lea    0x40800(%rdx),%r12
    19ec:	55                   	push   %rbp
    19ed:	53                   	push   %rbx
    19ee:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    19f5:	48 89 5c 24 f0       	mov    %rbx,-0x10(%rsp)
    19fa:	4c 89 fd             	mov    %r15,%rbp
    19fd:	48 c1 e5 0b          	shl    $0xb,%rbp
    1a01:	48 8b 7c 24 f0       	mov    -0x10(%rsp),%rdi
    1a06:	4c 01 f5             	add    %r14,%rbp
    1a09:	4c 89 eb             	mov    %r13,%rbx
    1a0c:	4c 8b 13             	mov    (%rbx),%r10
    1a0f:	4c 8b 5b 08          	mov    0x8(%rbx),%r11
    1a13:	48 8d 87 00 00 fc ff 	lea    -0x40000(%rdi),%rax
    1a1a:	48 89 ee             	mov    %rbp,%rsi
    1a1d:	0f 1f 00             	nopl   (%rax)
    1a20:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    1a24:	48 8b 16             	mov    (%rsi),%rdx
    1a27:	48 0f af 08          	imul   (%rax),%rcx
    1a2b:	49 89 c8             	mov    %rcx,%r8
    1a2e:	48 8b 48 08          	mov    0x8(%rax),%rcx
    1a32:	48 0f af d1          	imul   %rcx,%rdx
    1a36:	49 8d 0c 10          	lea    (%r8,%rdx,1),%rcx
    1a3a:	48 8b 10             	mov    (%rax),%rdx
    1a3d:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    1a42:	49 01 c9             	add    %rcx,%r9
    1a45:	4d 01 c2             	add    %r8,%r10
    1a48:	4d 11 cb             	adc    %r9,%r11
    1a4b:	48 05 00 08 00 00    	add    $0x800,%rax
    1a51:	4c 89 13             	mov    %r10,(%rbx)
    1a54:	4c 89 5b 08          	mov    %r11,0x8(%rbx)
    1a58:	48 83 c6 10          	add    $0x10,%rsi
    1a5c:	48 39 c7             	cmp    %rax,%rdi
    1a5f:	75 bf                	jne    1a20 <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x50>
    1a61:	48 83 c7 10          	add    $0x10,%rdi
    1a65:	48 83 c3 10          	add    $0x10,%rbx
    1a69:	49 39 fc             	cmp    %rdi,%r12
    1a6c:	75 9e                	jne    1a0c <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x3c>
    1a6e:	49 ff c7             	inc    %r15
    1a71:	49 81 c5 00 08 00 00 	add    $0x800,%r13
    1a78:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    1a7f:	0f 85 75 ff ff ff    	jne    19fa <void ijk<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x2a>
    1a85:	5b                   	pop    %rbx
    1a86:	5d                   	pop    %rbp
    1a87:	41 5c                	pop    %r12
    1a89:	41 5d                	pop    %r13
    1a8b:	41 5e                	pop    %r14
    1a8d:	41 5f                	pop    %r15
    1a8f:	c3                   	retq   

0000000000001a90 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])>:
    1a90:	f3 0f 1e fa          	endbr64 
    1a94:	53                   	push   %rbx
    1a95:	49 89 f3             	mov    %rsi,%r11
    1a98:	49 89 f9             	mov    %rdi,%r9
    1a9b:	45 31 d2             	xor    %r10d,%r10d
    1a9e:	48 8d 9a 00 00 01 00 	lea    0x10000(%rdx),%rbx
    1aa5:	4c 8d 82 00 02 01 00 	lea    0x10200(%rdx),%r8
    1aac:	4c 89 d7             	mov    %r10,%rdi
    1aaf:	48 c1 e7 09          	shl    $0x9,%rdi
    1ab3:	48 89 d9             	mov    %rbx,%rcx
    1ab6:	4c 01 df             	add    %r11,%rdi
    1ab9:	4c 89 ce             	mov    %r9,%rsi
    1abc:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    1ac0:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    1ac7:	48 89 fa             	mov    %rdi,%rdx
    1aca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1ad0:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    1ad4:	48 05 00 02 00 00    	add    $0x200,%rax
    1ada:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    1ae1:	ff ff 
    1ae3:	48 83 c2 04          	add    $0x4,%rdx
    1ae7:	c5 fa 11 06          	vmovss %xmm0,(%rsi)
    1aeb:	48 39 c1             	cmp    %rax,%rcx
    1aee:	75 e0                	jne    1ad0 <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x40>
    1af0:	48 83 c1 04          	add    $0x4,%rcx
    1af4:	48 83 c6 04          	add    $0x4,%rsi
    1af8:	49 39 c8             	cmp    %rcx,%r8
    1afb:	75 bf                	jne    1abc <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x2c>
    1afd:	49 ff c2             	inc    %r10
    1b00:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    1b07:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    1b0e:	75 9c                	jne    1aac <void ijk<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c>
    1b10:	5b                   	pop    %rbx
    1b11:	c3                   	retq   
    1b12:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1b19:	00 00 00 00 
    1b1d:	0f 1f 00             	nopl   (%rax)

0000000000001b20 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])>:
    1b20:	f3 0f 1e fa          	endbr64 
    1b24:	53                   	push   %rbx
    1b25:	49 89 f3             	mov    %rsi,%r11
    1b28:	49 89 f9             	mov    %rdi,%r9
    1b2b:	45 31 d2             	xor    %r10d,%r10d
    1b2e:	48 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%rbx
    1b35:	4c 8d 82 00 04 02 00 	lea    0x20400(%rdx),%r8
    1b3c:	4c 89 d7             	mov    %r10,%rdi
    1b3f:	48 c1 e7 0a          	shl    $0xa,%rdi
    1b43:	48 89 d9             	mov    %rbx,%rcx
    1b46:	4c 01 df             	add    %r11,%rdi
    1b49:	4c 89 ce             	mov    %r9,%rsi
    1b4c:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    1b50:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    1b57:	48 89 fa             	mov    %rdi,%rdx
    1b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1b60:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    1b64:	48 05 00 04 00 00    	add    $0x400,%rax
    1b6a:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    1b71:	ff ff 
    1b73:	48 83 c2 08          	add    $0x8,%rdx
    1b77:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    1b7b:	48 39 c1             	cmp    %rax,%rcx
    1b7e:	75 e0                	jne    1b60 <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x40>
    1b80:	48 83 c1 08          	add    $0x8,%rcx
    1b84:	48 83 c6 08          	add    $0x8,%rsi
    1b88:	49 39 c8             	cmp    %rcx,%r8
    1b8b:	75 bf                	jne    1b4c <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x2c>
    1b8d:	49 ff c2             	inc    %r10
    1b90:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    1b97:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    1b9e:	75 9c                	jne    1b3c <void ijk<double>(double (*) [128], double (*) [128], double (*) [128])+0x1c>
    1ba0:	5b                   	pop    %rbx
    1ba1:	c3                   	retq   
    1ba2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1ba9:	00 00 00 00 
    1bad:	0f 1f 00             	nopl   (%rax)

0000000000001bb0 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    1bb0:	f3 0f 1e fa          	endbr64 
    1bb4:	53                   	push   %rbx
    1bb5:	49 89 f3             	mov    %rsi,%r11
    1bb8:	49 89 f9             	mov    %rdi,%r9
    1bbb:	45 31 d2             	xor    %r10d,%r10d
    1bbe:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    1bc5:	4c 8d 82 00 08 04 00 	lea    0x40800(%rdx),%r8
    1bcc:	4c 89 d7             	mov    %r10,%rdi
    1bcf:	48 c1 e7 0b          	shl    $0xb,%rdi
    1bd3:	48 89 d9             	mov    %rbx,%rcx
    1bd6:	4c 01 df             	add    %r11,%rdi
    1bd9:	4c 89 ce             	mov    %r9,%rsi
    1bdc:	db 2e                	fldt   (%rsi)
    1bde:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    1be5:	48 89 fa             	mov    %rdi,%rdx
    1be8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1bef:	00 
    1bf0:	db 2a                	fldt   (%rdx)
    1bf2:	48 05 00 08 00 00    	add    $0x800,%rax
    1bf8:	48 83 c2 10          	add    $0x10,%rdx
    1bfc:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    1c02:	de c9                	fmulp  %st,%st(1)
    1c04:	de c1                	faddp  %st,%st(1)
    1c06:	d9 c0                	fld    %st(0)
    1c08:	db 3e                	fstpt  (%rsi)
    1c0a:	48 39 c1             	cmp    %rax,%rcx
    1c0d:	75 e1                	jne    1bf0 <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    1c0f:	dd d8                	fstp   %st(0)
    1c11:	48 83 c1 10          	add    $0x10,%rcx
    1c15:	48 83 c6 10          	add    $0x10,%rsi
    1c19:	49 39 c8             	cmp    %rcx,%r8
    1c1c:	75 be                	jne    1bdc <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2c>
    1c1e:	49 ff c2             	inc    %r10
    1c21:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    1c28:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    1c2f:	75 9b                	jne    1bcc <void ijk<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1c>
    1c31:	5b                   	pop    %rbx
    1c32:	c3                   	retq   
    1c33:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1c3a:	00 00 00 00 
    1c3e:	66 90                	xchg   %ax,%ax

0000000000001c40 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    1c40:	f3 0f 1e fa          	endbr64 
    1c44:	41 57                	push   %r15
    1c46:	48 89 d0             	mov    %rdx,%rax
    1c49:	48 8d 92 00 00 04 00 	lea    0x40000(%rdx),%rdx
    1c50:	41 56                	push   %r14
    1c52:	41 55                	push   %r13
    1c54:	4c 8d a8 00 08 04 00 	lea    0x40800(%rax),%r13
    1c5b:	41 54                	push   %r12
    1c5d:	55                   	push   %rbp
    1c5e:	53                   	push   %rbx
    1c5f:	48 83 ec 38          	sub    $0x38,%rsp
    1c63:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
    1c68:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    1c6d:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    1c74:	00 00 
    1c76:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
    1c7b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
    1c80:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx
    1c85:	49 c1 e4 0b          	shl    $0xb,%r12
    1c89:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
    1c8e:	4c 03 64 24 20       	add    0x20(%rsp),%r12
    1c93:	c5 f9 6f 55 00       	vmovdqa 0x0(%rbp),%xmm2
    1c98:	4c 8d bb 00 00 fc ff 	lea    -0x40000(%rbx),%r15
    1c9f:	4d 89 e6             	mov    %r12,%r14
    1ca2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1ca8:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    1cad:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    1cb2:	c5 f9 7f 14 24       	vmovdqa %xmm2,(%rsp)
    1cb7:	e8 c4 f4 ff ff       	callq  1180 <__multf3@plt>
    1cbc:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    1cc1:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    1cc5:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    1cc9:	e8 12 f5 ff ff       	callq  11e0 <__addtf3@plt>
    1cce:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    1cd5:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    1cd9:	c5 f9 7f 45 00       	vmovdqa %xmm0,0x0(%rbp)
    1cde:	49 83 c6 10          	add    $0x10,%r14
    1ce2:	4c 39 fb             	cmp    %r15,%rbx
    1ce5:	75 c1                	jne    1ca8 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x68>
    1ce7:	48 83 c3 10          	add    $0x10,%rbx
    1ceb:	48 83 c5 10          	add    $0x10,%rbp
    1cef:	49 39 dd             	cmp    %rbx,%r13
    1cf2:	75 9f                	jne    1c93 <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x53>
    1cf4:	48 ff 44 24 10       	incq   0x10(%rsp)
    1cf9:	48 81 44 24 18 00 08 	addq   $0x800,0x18(%rsp)
    1d00:	00 00 
    1d02:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    1d07:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    1d0d:	0f 85 68 ff ff ff    	jne    1c7b <void ijk<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3b>
    1d13:	48 83 c4 38          	add    $0x38,%rsp
    1d17:	5b                   	pop    %rbx
    1d18:	5d                   	pop    %rbp
    1d19:	41 5c                	pop    %r12
    1d1b:	41 5d                	pop    %r13
    1d1d:	41 5e                	pop    %r14
    1d1f:	41 5f                	pop    %r15
    1d21:	c3                   	retq   
    1d22:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1d29:	00 00 00 00 
    1d2d:	0f 1f 00             	nopl   (%rax)

0000000000001d30 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])>:
    1d30:	f3 0f 1e fa          	endbr64 
    1d34:	55                   	push   %rbp
    1d35:	49 89 f3             	mov    %rsi,%r11
    1d38:	48 89 f9             	mov    %rdi,%rcx
    1d3b:	48 89 e5             	mov    %rsp,%rbp
    1d3e:	41 54                	push   %r12
    1d40:	49 81 c3 02 80 00 00 	add    $0x8002,%r11
    1d47:	49 89 d4             	mov    %rdx,%r12
    1d4a:	53                   	push   %rbx
    1d4b:	4c 8d 92 00 80 00 00 	lea    0x8000(%rdx),%r10
    1d52:	48 8d 5e 02          	lea    0x2(%rsi),%rbx
    1d56:	4c 89 e6             	mov    %r12,%rsi
    1d59:	48 8d 7b fe          	lea    -0x2(%rbx),%rdi
    1d5d:	49 89 d8             	mov    %rbx,%r8
    1d60:	4c 8d 89 00 01 00 00 	lea    0x100(%rcx),%r9
    1d67:	e9 c6 00 00 00       	jmpq   1e32 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x102>
    1d6c:	48 8d 56 02          	lea    0x2(%rsi),%rdx
    1d70:	48 89 c8             	mov    %rcx,%rax
    1d73:	48 29 d0             	sub    %rdx,%rax
    1d76:	48 83 f8 1c          	cmp    $0x1c,%rax
    1d7a:	0f 86 ca 00 00 00    	jbe    1e4a <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x11a>
    1d80:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    1d85:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    1d89:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    1d8d:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    1d91:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    1d96:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    1d9b:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    1da0:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    1da5:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    1daa:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    1daf:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    1db4:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    1db9:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    1dbe:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    1dc5:	00 
    1dc6:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    1dcd:	00 
    1dce:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    1dd5:	00 
    1dd6:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    1ddd:	00 
    1dde:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    1de5:	00 
    1de6:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    1ded:	00 
    1dee:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    1df5:	00 
    1df6:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    1dfd:	00 
    1dfe:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    1e05:	00 
    1e06:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    1e0d:	00 
    1e0e:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    1e15:	00 
    1e16:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    1e1d:	00 
    1e1e:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    1e25:	49 83 c0 02          	add    $0x2,%r8
    1e29:	48 83 c7 02          	add    $0x2,%rdi
    1e2d:	4c 39 d6             	cmp    %r10,%rsi
    1e30:	74 37                	je     1e69 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x139>
    1e32:	49 8d 40 fe          	lea    -0x2(%r8),%rax
    1e36:	4c 39 c8             	cmp    %r9,%rax
    1e39:	0f 93 c2             	setae  %dl
    1e3c:	4c 39 c1             	cmp    %r8,%rcx
    1e3f:	0f 93 c0             	setae  %al
    1e42:	08 c2                	or     %al,%dl
    1e44:	0f 85 22 ff ff ff    	jne    1d6c <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x3c>
    1e4a:	31 c0                	xor    %eax,%eax
    1e4c:	0f 1f 40 00          	nopl   0x0(%rax)
    1e50:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    1e54:	66 0f af 17          	imul   (%rdi),%dx
    1e58:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    1e5c:	48 ff c0             	inc    %rax
    1e5f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    1e65:	75 e9                	jne    1e50 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x120>
    1e67:	eb b5                	jmp    1e1e <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0xee>
    1e69:	48 81 c3 00 01 00 00 	add    $0x100,%rbx
    1e70:	4c 39 db             	cmp    %r11,%rbx
    1e73:	74 08                	je     1e7d <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x14d>
    1e75:	4c 89 c9             	mov    %r9,%rcx
    1e78:	e9 d9 fe ff ff       	jmpq   1d56 <void ikj<short>(short (*) [128], short (*) [128], short (*) [128])+0x26>
    1e7d:	c5 f8 77             	vzeroupper 
    1e80:	5b                   	pop    %rbx
    1e81:	41 5c                	pop    %r12
    1e83:	5d                   	pop    %rbp
    1e84:	c3                   	retq   
    1e85:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1e8c:	00 00 00 00 

0000000000001e90 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])>:
    1e90:	f3 0f 1e fa          	endbr64 
    1e94:	55                   	push   %rbp
    1e95:	49 89 f3             	mov    %rsi,%r11
    1e98:	48 89 f9             	mov    %rdi,%rcx
    1e9b:	48 89 e5             	mov    %rsp,%rbp
    1e9e:	41 54                	push   %r12
    1ea0:	49 81 c3 04 00 01 00 	add    $0x10004,%r11
    1ea7:	49 89 d4             	mov    %rdx,%r12
    1eaa:	53                   	push   %rbx
    1eab:	4c 8d 92 00 00 01 00 	lea    0x10000(%rdx),%r10
    1eb2:	48 8d 5e 04          	lea    0x4(%rsi),%rbx
    1eb6:	4c 89 e6             	mov    %r12,%rsi
    1eb9:	48 8d 7b fc          	lea    -0x4(%rbx),%rdi
    1ebd:	49 89 d8             	mov    %rbx,%r8
    1ec0:	4c 8d 89 00 02 00 00 	lea    0x200(%rcx),%r9
    1ec7:	e9 96 01 00 00       	jmpq   2062 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1d2>
    1ecc:	48 8d 56 04          	lea    0x4(%rsi),%rdx
    1ed0:	48 89 c8             	mov    %rcx,%rax
    1ed3:	48 29 d0             	sub    %rdx,%rax
    1ed6:	48 83 f8 18          	cmp    $0x18,%rax
    1eda:	0f 86 9a 01 00 00    	jbe    207a <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ea>
    1ee0:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    1ee5:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    1eea:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    1eee:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    1ef2:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    1ef8:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    1efd:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    1f02:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    1f08:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    1f0d:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    1f12:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    1f18:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    1f1d:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    1f22:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    1f29:	00 00 
    1f2b:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    1f32:	00 
    1f33:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    1f3a:	00 
    1f3b:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    1f42:	00 00 
    1f44:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    1f4b:	00 
    1f4c:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    1f53:	00 
    1f54:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    1f5b:	00 00 
    1f5d:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    1f64:	00 
    1f65:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    1f6c:	00 
    1f6d:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    1f74:	00 00 
    1f76:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    1f7d:	00 
    1f7e:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    1f85:	00 
    1f86:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    1f8d:	00 00 
    1f8f:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    1f96:	00 
    1f97:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    1f9e:	00 
    1f9f:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    1fa6:	00 00 
    1fa8:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    1faf:	00 
    1fb0:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    1fb7:	00 
    1fb8:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    1fbf:	00 00 
    1fc1:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    1fc8:	00 
    1fc9:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    1fd0:	00 
    1fd1:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    1fd8:	00 00 
    1fda:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    1fe1:	00 
    1fe2:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    1fe9:	00 
    1fea:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    1ff1:	00 00 
    1ff3:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    1ffa:	00 
    1ffb:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    2002:	00 
    2003:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    200a:	00 00 
    200c:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    2013:	00 
    2014:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    201b:	00 
    201c:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    2023:	00 00 
    2025:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    202c:	00 
    202d:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    2034:	00 
    2035:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    203c:	00 00 
    203e:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    2045:	00 
    2046:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    204d:	00 
    204e:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    2055:	49 83 c0 04          	add    $0x4,%r8
    2059:	48 83 c7 04          	add    $0x4,%rdi
    205d:	49 39 f2             	cmp    %rsi,%r10
    2060:	74 34                	je     2096 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x206>
    2062:	49 8d 40 fc          	lea    -0x4(%r8),%rax
    2066:	4c 39 c8             	cmp    %r9,%rax
    2069:	0f 93 c2             	setae  %dl
    206c:	4c 39 c1             	cmp    %r8,%rcx
    206f:	0f 93 c0             	setae  %al
    2072:	08 c2                	or     %al,%dl
    2074:	0f 85 52 fe ff ff    	jne    1ecc <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x3c>
    207a:	31 c0                	xor    %eax,%eax
    207c:	0f 1f 40 00          	nopl   0x0(%rax)
    2080:	8b 17                	mov    (%rdi),%edx
    2082:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    2086:	01 14 81             	add    %edx,(%rcx,%rax,4)
    2089:	48 ff c0             	inc    %rax
    208c:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2092:	75 ec                	jne    2080 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1f0>
    2094:	eb b8                	jmp    204e <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x1be>
    2096:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    209d:	4c 39 db             	cmp    %r11,%rbx
    20a0:	74 08                	je     20aa <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x21a>
    20a2:	4c 89 c9             	mov    %r9,%rcx
    20a5:	e9 0c fe ff ff       	jmpq   1eb6 <void ikj<int>(int (*) [128], int (*) [128], int (*) [128])+0x26>
    20aa:	c5 f8 77             	vzeroupper 
    20ad:	5b                   	pop    %rbx
    20ae:	41 5c                	pop    %r12
    20b0:	5d                   	pop    %rbp
    20b1:	c3                   	retq   
    20b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    20b9:	00 00 00 00 
    20bd:	0f 1f 00             	nopl   (%rax)

00000000000020c0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])>:
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	55                   	push   %rbp
    20c5:	4c 8d 9a 00 00 02 00 	lea    0x20000(%rdx),%r11
    20cc:	48 89 e5             	mov    %rsp,%rbp
    20cf:	41 56                	push   %r14
    20d1:	45 31 f6             	xor    %r14d,%r14d
    20d4:	41 55                	push   %r13
    20d6:	49 89 d5             	mov    %rdx,%r13
    20d9:	41 54                	push   %r12
    20db:	49 89 fc             	mov    %rdi,%r12
    20de:	53                   	push   %rbx
    20df:	48 8d 5e 08          	lea    0x8(%rsi),%rbx
    20e3:	48 89 fe             	mov    %rdi,%rsi
    20e6:	4c 89 e9             	mov    %r13,%rcx
    20e9:	4c 8d 43 f8          	lea    -0x8(%rbx),%r8
    20ed:	4b 8d 3c f4          	lea    (%r12,%r14,8),%rdi
    20f1:	49 89 d9             	mov    %rbx,%r9
    20f4:	4c 8d 96 00 04 00 00 	lea    0x400(%rsi),%r10
    20fb:	49 8d 41 f8          	lea    -0x8(%r9),%rax
    20ff:	4c 39 d0             	cmp    %r10,%rax
    2102:	0f 93 c2             	setae  %dl
    2105:	4c 39 ce             	cmp    %r9,%rsi
    2108:	0f 93 c0             	setae  %al
    210b:	08 c2                	or     %al,%dl
    210d:	0f 84 8a 00 00 00    	je     219d <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xdd>
    2113:	48 8d 51 08          	lea    0x8(%rcx),%rdx
    2117:	48 89 f0             	mov    %rsi,%rax
    211a:	48 29 d0             	sub    %rdx,%rax
    211d:	48 83 f8 10          	cmp    $0x10,%rax
    2121:	76 7a                	jbe    219d <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xdd>
    2123:	c4 c2 7d 59 18       	vpbroadcastq (%r8),%ymm3
    2128:	31 c0                	xor    %eax,%eax
    212a:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    212f:	90                   	nop
    2130:	c5 fe 6f 14 01       	vmovdqu (%rcx,%rax,1),%ymm2
    2135:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    213a:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    213e:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    2142:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    2146:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    214a:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    214f:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    2153:	c5 fd d4 04 07       	vpaddq (%rdi,%rax,1),%ymm0,%ymm0
    2158:	c5 fe 7f 04 07       	vmovdqu %ymm0,(%rdi,%rax,1)
    215d:	48 83 c0 20          	add    $0x20,%rax
    2161:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    2167:	75 c7                	jne    2130 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x70>
    2169:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2170:	49 83 c1 08          	add    $0x8,%r9
    2174:	49 83 c0 08          	add    $0x8,%r8
    2178:	4c 39 d9             	cmp    %r11,%rcx
    217b:	0f 85 7a ff ff ff    	jne    20fb <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x3b>
    2181:	49 83 ee 80          	sub    $0xffffffffffffff80,%r14
    2185:	48 81 c3 00 04 00 00 	add    $0x400,%rbx
    218c:	49 81 fe 00 40 00 00 	cmp    $0x4000,%r14
    2193:	74 24                	je     21b9 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xf9>
    2195:	4c 89 d6             	mov    %r10,%rsi
    2198:	e9 49 ff ff ff       	jmpq   20e6 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0x26>
    219d:	31 c0                	xor    %eax,%eax
    219f:	90                   	nop
    21a0:	49 8b 10             	mov    (%r8),%rdx
    21a3:	48 0f af 14 c1       	imul   (%rcx,%rax,8),%rdx
    21a8:	48 01 14 c6          	add    %rdx,(%rsi,%rax,8)
    21ac:	48 ff c0             	inc    %rax
    21af:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    21b5:	75 e9                	jne    21a0 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xe0>
    21b7:	eb b0                	jmp    2169 <void ikj<long>(long (*) [128], long (*) [128], long (*) [128])+0xa9>
    21b9:	c5 f8 77             	vzeroupper 
    21bc:	5b                   	pop    %rbx
    21bd:	41 5c                	pop    %r12
    21bf:	41 5d                	pop    %r13
    21c1:	41 5e                	pop    %r14
    21c3:	5d                   	pop    %rbp
    21c4:	c3                   	retq   
    21c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    21cc:	00 00 00 00 

00000000000021d0 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	55                   	push   %rbp
    21d5:	49 89 d3             	mov    %rdx,%r11
    21d8:	49 89 f0             	mov    %rsi,%r8
    21db:	53                   	push   %rbx
    21dc:	49 89 fa             	mov    %rdi,%r10
    21df:	48 8d 9e 00 00 04 00 	lea    0x40000(%rsi),%rbx
    21e6:	4d 89 d9             	mov    %r11,%r9
    21e9:	49 8d a8 00 08 00 00 	lea    0x800(%r8),%rbp
    21f0:	31 c0                	xor    %eax,%eax
    21f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    21f8:	49 8b 48 08          	mov    0x8(%r8),%rcx
    21fc:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    2200:	48 0f af d1          	imul   %rcx,%rdx
    2204:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    2209:	49 0f af 08          	imul   (%r8),%rcx
    220d:	48 01 d1             	add    %rdx,%rcx
    2210:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    2214:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    2219:	48 01 cf             	add    %rcx,%rdi
    221c:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    2220:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    2225:	48 83 c0 10          	add    $0x10,%rax
    2229:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    222f:	75 c7                	jne    21f8 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x28>
    2231:	49 83 c0 10          	add    $0x10,%r8
    2235:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    223c:	4c 39 c5             	cmp    %r8,%rbp
    223f:	75 af                	jne    21f0 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x20>
    2241:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    2248:	48 39 dd             	cmp    %rbx,%rbp
    224b:	74 05                	je     2252 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x82>
    224d:	49 89 e8             	mov    %rbp,%r8
    2250:	eb 94                	jmp    21e6 <void ikj<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x16>
    2252:	5b                   	pop    %rbx
    2253:	5d                   	pop    %rbp
    2254:	c3                   	retq   
    2255:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    225c:	00 00 00 00 

0000000000002260 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])>:
    2260:	f3 0f 1e fa          	endbr64 
    2264:	55                   	push   %rbp
    2265:	49 89 f3             	mov    %rsi,%r11
    2268:	49 81 c3 04 00 01 00 	add    $0x10004,%r11
    226f:	48 89 e5             	mov    %rsp,%rbp
    2272:	41 54                	push   %r12
    2274:	49 89 d4             	mov    %rdx,%r12
    2277:	4d 8d 94 24 00 00 01 	lea    0x10000(%r12),%r10
    227e:	00 
    227f:	53                   	push   %rbx
    2280:	48 89 fa             	mov    %rdi,%rdx
    2283:	48 8d 5e 04          	lea    0x4(%rsi),%rbx
    2287:	4c 89 e1             	mov    %r12,%rcx
    228a:	48 8d 73 fc          	lea    -0x4(%rbx),%rsi
    228e:	48 89 df             	mov    %rbx,%rdi
    2291:	4c 8d 8a 00 02 00 00 	lea    0x200(%rdx),%r9
    2298:	e9 96 01 00 00       	jmpq   2433 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1d3>
    229d:	4c 8d 41 04          	lea    0x4(%rcx),%r8
    22a1:	48 89 d0             	mov    %rdx,%rax
    22a4:	4c 29 c0             	sub    %r8,%rax
    22a7:	48 83 f8 18          	cmp    $0x18,%rax
    22ab:	0f 86 9c 01 00 00    	jbe    244d <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1ed>
    22b1:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    22b6:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    22ba:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    22bf:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    22c3:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    22c8:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    22ce:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    22d3:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    22d8:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    22de:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    22e3:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    22e8:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    22ee:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    22f3:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    22fa:	00 
    22fb:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    2302:	00 00 
    2304:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    230b:	00 
    230c:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    2313:	00 
    2314:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    231b:	00 00 
    231d:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    2324:	00 
    2325:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    232c:	00 
    232d:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    2334:	00 00 
    2336:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    233d:	00 
    233e:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    2345:	00 
    2346:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    234d:	00 00 
    234f:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    2356:	00 
    2357:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    235e:	00 
    235f:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    2366:	00 00 
    2368:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    236f:	00 
    2370:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    2377:	00 
    2378:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    237f:	00 00 
    2381:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    2388:	00 
    2389:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    2390:	00 
    2391:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    2398:	00 00 
    239a:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    23a1:	00 
    23a2:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    23a9:	00 
    23aa:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    23b1:	00 
    23b2:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    23b9:	00 00 
    23bb:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    23c2:	00 
    23c3:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    23ca:	00 
    23cb:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    23d2:	00 00 
    23d4:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    23db:	00 
    23dc:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    23e3:	00 
    23e4:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    23eb:	00 00 
    23ed:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    23f4:	00 
    23f5:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    23fc:	00 
    23fd:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    2404:	00 00 
    2406:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    240d:	00 
    240e:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    2415:	00 00 
    2417:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    241e:	00 
    241f:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    2426:	48 83 c7 04          	add    $0x4,%rdi
    242a:	48 83 c6 04          	add    $0x4,%rsi
    242e:	49 39 ca             	cmp    %rcx,%r10
    2431:	74 3e                	je     2471 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x211>
    2433:	48 8d 47 fc          	lea    -0x4(%rdi),%rax
    2437:	4c 39 c8             	cmp    %r9,%rax
    243a:	41 0f 93 c0          	setae  %r8b
    243e:	48 39 fa             	cmp    %rdi,%rdx
    2441:	0f 93 c0             	setae  %al
    2444:	41 08 c0             	or     %al,%r8b
    2447:	0f 85 50 fe ff ff    	jne    229d <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x3d>
    244d:	31 c0                	xor    %eax,%eax
    244f:	90                   	nop
    2450:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    2455:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    2459:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    245f:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    2464:	48 ff c0             	inc    %rax
    2467:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    246d:	75 e1                	jne    2450 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1f0>
    246f:	eb ae                	jmp    241f <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x1bf>
    2471:	48 81 c3 00 02 00 00 	add    $0x200,%rbx
    2478:	4c 39 db             	cmp    %r11,%rbx
    247b:	74 08                	je     2485 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x225>
    247d:	4c 89 ca             	mov    %r9,%rdx
    2480:	e9 02 fe ff ff       	jmpq   2287 <void ikj<float>(float (*) [128], float (*) [128], float (*) [128])+0x27>
    2485:	c5 f8 77             	vzeroupper 
    2488:	5b                   	pop    %rbx
    2489:	41 5c                	pop    %r12
    248b:	5d                   	pop    %rbp
    248c:	c3                   	retq   
    248d:	0f 1f 00             	nopl   (%rax)

0000000000002490 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	55                   	push   %rbp
    2495:	4c 8d 5e 08          	lea    0x8(%rsi),%r11
    2499:	48 89 f9             	mov    %rdi,%rcx
    249c:	48 89 e5             	mov    %rsp,%rbp
    249f:	41 56                	push   %r14
    24a1:	4c 8d 92 00 00 02 00 	lea    0x20000(%rdx),%r10
    24a8:	41 55                	push   %r13
    24aa:	45 31 ed             	xor    %r13d,%r13d
    24ad:	41 54                	push   %r12
    24af:	49 89 d4             	mov    %rdx,%r12
    24b2:	53                   	push   %rbx
    24b3:	48 89 fb             	mov    %rdi,%rbx
    24b6:	4c 89 e2             	mov    %r12,%rdx
    24b9:	49 8d 7b f8          	lea    -0x8(%r11),%rdi
    24bd:	4a 8d 34 eb          	lea    (%rbx,%r13,8),%rsi
    24c1:	4d 89 d8             	mov    %r11,%r8
    24c4:	4c 8d 89 00 04 00 00 	lea    0x400(%rcx),%r9
    24cb:	49 8d 40 f8          	lea    -0x8(%r8),%rax
    24cf:	4c 39 c8             	cmp    %r9,%rax
    24d2:	41 0f 93 c6          	setae  %r14b
    24d6:	4c 39 c1             	cmp    %r8,%rcx
    24d9:	0f 93 c0             	setae  %al
    24dc:	41 08 c6             	or     %al,%r14b
    24df:	74 6b                	je     254c <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xbc>
    24e1:	4c 8d 72 08          	lea    0x8(%rdx),%r14
    24e5:	48 89 c8             	mov    %rcx,%rax
    24e8:	4c 29 f0             	sub    %r14,%rax
    24eb:	48 83 f8 10          	cmp    $0x10,%rax
    24ef:	76 5b                	jbe    254c <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xbc>
    24f1:	c4 e2 7d 19 0f       	vbroadcastsd (%rdi),%ymm1
    24f6:	31 c0                	xor    %eax,%eax
    24f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    24ff:	00 
    2500:	c5 fd 10 04 02       	vmovupd (%rdx,%rax,1),%ymm0
    2505:	c4 e2 f5 a8 04 06    	vfmadd213pd (%rsi,%rax,1),%ymm1,%ymm0
    250b:	c5 fd 11 04 06       	vmovupd %ymm0,(%rsi,%rax,1)
    2510:	48 83 c0 20          	add    $0x20,%rax
    2514:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    251a:	75 e4                	jne    2500 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x70>
    251c:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    2523:	49 83 c0 08          	add    $0x8,%r8
    2527:	48 83 c7 08          	add    $0x8,%rdi
    252b:	4c 39 d2             	cmp    %r10,%rdx
    252e:	75 9b                	jne    24cb <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x3b>
    2530:	49 83 ed 80          	sub    $0xffffffffffffff80,%r13
    2534:	49 81 c3 00 04 00 00 	add    $0x400,%r11
    253b:	49 81 fd 00 40 00 00 	cmp    $0x4000,%r13
    2542:	74 2d                	je     2571 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xe1>
    2544:	4c 89 c9             	mov    %r9,%rcx
    2547:	e9 6a ff ff ff       	jmpq   24b6 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x26>
    254c:	31 c0                	xor    %eax,%eax
    254e:	66 90                	xchg   %ax,%ax
    2550:	c5 fb 10 14 c1       	vmovsd (%rcx,%rax,8),%xmm2
    2555:	c5 fb 10 07          	vmovsd (%rdi),%xmm0
    2559:	c4 e2 e9 99 04 c2    	vfmadd132sd (%rdx,%rax,8),%xmm2,%xmm0
    255f:	c5 fb 11 04 c1       	vmovsd %xmm0,(%rcx,%rax,8)
    2564:	48 ff c0             	inc    %rax
    2567:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    256d:	75 e1                	jne    2550 <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0xc0>
    256f:	eb ab                	jmp    251c <void ikj<double>(double (*) [128], double (*) [128], double (*) [128])+0x8c>
    2571:	c5 f8 77             	vzeroupper 
    2574:	5b                   	pop    %rbx
    2575:	41 5c                	pop    %r12
    2577:	41 5d                	pop    %r13
    2579:	41 5e                	pop    %r14
    257b:	5d                   	pop    %rbp
    257c:	c3                   	retq   
    257d:	0f 1f 00             	nopl   (%rax)

0000000000002580 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	49 89 d0             	mov    %rdx,%r8
    2587:	48 89 f1             	mov    %rsi,%rcx
    258a:	48 89 fa             	mov    %rdi,%rdx
    258d:	4c 8d 8e 00 00 04 00 	lea    0x40000(%rsi),%r9
    2594:	4c 89 c6             	mov    %r8,%rsi
    2597:	48 8d b9 00 08 00 00 	lea    0x800(%rcx),%rdi
    259e:	31 c0                	xor    %eax,%eax
    25a0:	db 29                	fldt   (%rcx)
    25a2:	db 2c 06             	fldt   (%rsi,%rax,1)
    25a5:	de c9                	fmulp  %st,%st(1)
    25a7:	db 2c 02             	fldt   (%rdx,%rax,1)
    25aa:	de c1                	faddp  %st,%st(1)
    25ac:	db 3c 02             	fstpt  (%rdx,%rax,1)
    25af:	48 83 c0 10          	add    $0x10,%rax
    25b3:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    25b9:	75 e5                	jne    25a0 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x20>
    25bb:	48 83 c1 10          	add    $0x10,%rcx
    25bf:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    25c6:	48 39 cf             	cmp    %rcx,%rdi
    25c9:	75 d3                	jne    259e <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1e>
    25cb:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    25d2:	4c 39 cf             	cmp    %r9,%rdi
    25d5:	74 05                	je     25dc <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x5c>
    25d7:	48 89 f9             	mov    %rdi,%rcx
    25da:	eb b8                	jmp    2594 <void ikj<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x14>
    25dc:	c3                   	retq   
    25dd:	0f 1f 00             	nopl   (%rax)

00000000000025e0 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	41 57                	push   %r15
    25e6:	41 56                	push   %r14
    25e8:	4c 8d b6 00 00 04 00 	lea    0x40000(%rsi),%r14
    25ef:	41 55                	push   %r13
    25f1:	41 54                	push   %r12
    25f3:	55                   	push   %rbp
    25f4:	48 89 f5             	mov    %rsi,%rbp
    25f7:	53                   	push   %rbx
    25f8:	48 89 fb             	mov    %rdi,%rbx
    25fb:	48 83 ec 18          	sub    $0x18,%rsp
    25ff:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    2604:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
    2609:	4c 8d ad 00 08 00 00 	lea    0x800(%rbp),%r13
    2610:	45 31 ff             	xor    %r15d,%r15d
    2613:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2618:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    261e:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    2623:	e8 58 eb ff ff       	callq  1180 <__multf3@plt>
    2628:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    262c:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    2632:	e8 a9 eb ff ff       	callq  11e0 <__addtf3@plt>
    2637:	c4 a1 79 7f 04 3b    	vmovdqa %xmm0,(%rbx,%r15,1)
    263d:	49 83 c7 10          	add    $0x10,%r15
    2641:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    2648:	75 ce                	jne    2618 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x38>
    264a:	48 83 c5 10          	add    $0x10,%rbp
    264e:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    2655:	49 39 ed             	cmp    %rbp,%r13
    2658:	75 b6                	jne    2610 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x30>
    265a:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    2661:	4d 39 f5             	cmp    %r14,%r13
    2664:	74 05                	je     266b <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x8b>
    2666:	4c 89 ed             	mov    %r13,%rbp
    2669:	eb 99                	jmp    2604 <void ikj<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x24>
    266b:	48 83 c4 18          	add    $0x18,%rsp
    266f:	5b                   	pop    %rbx
    2670:	5d                   	pop    %rbp
    2671:	41 5c                	pop    %r12
    2673:	41 5d                	pop    %r13
    2675:	41 5e                	pop    %r14
    2677:	41 5f                	pop    %r15
    2679:	c3                   	retq   
    267a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002680 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2680:	f3 0f 1e fa          	endbr64 
    2684:	41 56                	push   %r14
    2686:	4c 8d 82 00 80 00 00 	lea    0x8000(%rdx),%r8
    268d:	49 89 f6             	mov    %rsi,%r14
    2690:	41 55                	push   %r13
    2692:	4c 8d af 00 80 00 00 	lea    0x8000(%rdi),%r13
    2699:	41 54                	push   %r12
    269b:	49 89 d4             	mov    %rdx,%r12
    269e:	55                   	push   %rbp
    269f:	31 ed                	xor    %ebp,%ebp
    26a1:	53                   	push   %rbx
    26a2:	48 89 fb             	mov    %rdi,%rbx
    26a5:	4c 8d 54 2d 00       	lea    0x0(%rbp,%rbp,1),%r10
    26aa:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    26ae:	4d 89 f1             	mov    %r14,%r9
    26b1:	4d 01 ea             	add    %r13,%r10
    26b4:	48 89 df             	mov    %rbx,%rdi
    26b7:	0f b7 37             	movzwl (%rdi),%esi
    26ba:	4c 89 d8             	mov    %r11,%rax
    26bd:	4c 89 c9             	mov    %r9,%rcx
    26c0:	0f b7 11             	movzwl (%rcx),%edx
    26c3:	48 05 00 01 00 00    	add    $0x100,%rax
    26c9:	66 0f af 90 00 ff ff 	imul   -0x100(%rax),%dx
    26d0:	ff 
    26d1:	48 83 c1 02          	add    $0x2,%rcx
    26d5:	01 d6                	add    %edx,%esi
    26d7:	66 89 37             	mov    %si,(%rdi)
    26da:	49 39 c0             	cmp    %rax,%r8
    26dd:	75 e1                	jne    26c0 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    26df:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    26e6:	49 81 c1 00 01 00 00 	add    $0x100,%r9
    26ed:	49 39 fa             	cmp    %rdi,%r10
    26f0:	75 c5                	jne    26b7 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x37>
    26f2:	48 ff c5             	inc    %rbp
    26f5:	48 83 c3 02          	add    $0x2,%rbx
    26f9:	49 83 c0 02          	add    $0x2,%r8
    26fd:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    2704:	75 9f                	jne    26a5 <void jik<short>(short (*) [128], short (*) [128], short (*) [128])+0x25>
    2706:	5b                   	pop    %rbx
    2707:	5d                   	pop    %rbp
    2708:	41 5c                	pop    %r12
    270a:	41 5d                	pop    %r13
    270c:	41 5e                	pop    %r14
    270e:	c3                   	retq   
    270f:	90                   	nop

0000000000002710 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2710:	f3 0f 1e fa          	endbr64 
    2714:	41 56                	push   %r14
    2716:	4c 8d 82 00 00 01 00 	lea    0x10000(%rdx),%r8
    271d:	49 89 f6             	mov    %rsi,%r14
    2720:	41 55                	push   %r13
    2722:	4c 8d af 00 00 01 00 	lea    0x10000(%rdi),%r13
    2729:	41 54                	push   %r12
    272b:	49 89 d4             	mov    %rdx,%r12
    272e:	55                   	push   %rbp
    272f:	31 ed                	xor    %ebp,%ebp
    2731:	53                   	push   %rbx
    2732:	48 89 fb             	mov    %rdi,%rbx
    2735:	4c 8d 14 ad 00 00 00 	lea    0x0(,%rbp,4),%r10
    273c:	00 
    273d:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    2741:	4d 89 f1             	mov    %r14,%r9
    2744:	4d 01 ea             	add    %r13,%r10
    2747:	48 89 df             	mov    %rbx,%rdi
    274a:	8b 37                	mov    (%rdi),%esi
    274c:	4c 89 d8             	mov    %r11,%rax
    274f:	4c 89 c9             	mov    %r9,%rcx
    2752:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2758:	8b 11                	mov    (%rcx),%edx
    275a:	48 05 00 02 00 00    	add    $0x200,%rax
    2760:	0f af 90 00 fe ff ff 	imul   -0x200(%rax),%edx
    2767:	48 83 c1 04          	add    $0x4,%rcx
    276b:	01 d6                	add    %edx,%esi
    276d:	89 37                	mov    %esi,(%rdi)
    276f:	4c 39 c0             	cmp    %r8,%rax
    2772:	75 e4                	jne    2758 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x48>
    2774:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    277b:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    2782:	4c 39 d7             	cmp    %r10,%rdi
    2785:	75 c3                	jne    274a <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x3a>
    2787:	48 ff c5             	inc    %rbp
    278a:	48 83 c3 04          	add    $0x4,%rbx
    278e:	4c 8d 40 04          	lea    0x4(%rax),%r8
    2792:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    2799:	75 9a                	jne    2735 <void jik<int>(int (*) [128], int (*) [128], int (*) [128])+0x25>
    279b:	5b                   	pop    %rbx
    279c:	5d                   	pop    %rbp
    279d:	41 5c                	pop    %r12
    279f:	41 5d                	pop    %r13
    27a1:	41 5e                	pop    %r14
    27a3:	c3                   	retq   
    27a4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    27ab:	00 00 00 00 
    27af:	90                   	nop

00000000000027b0 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])>:
    27b0:	f3 0f 1e fa          	endbr64 
    27b4:	41 56                	push   %r14
    27b6:	4c 8d 82 00 00 02 00 	lea    0x20000(%rdx),%r8
    27bd:	49 89 f6             	mov    %rsi,%r14
    27c0:	41 55                	push   %r13
    27c2:	4c 8d af 00 00 02 00 	lea    0x20000(%rdi),%r13
    27c9:	41 54                	push   %r12
    27cb:	49 89 d4             	mov    %rdx,%r12
    27ce:	55                   	push   %rbp
    27cf:	31 ed                	xor    %ebp,%ebp
    27d1:	53                   	push   %rbx
    27d2:	48 89 fb             	mov    %rdi,%rbx
    27d5:	4c 8d 14 ed 00 00 00 	lea    0x0(,%rbp,8),%r10
    27dc:	00 
    27dd:	4f 8d 1c 14          	lea    (%r12,%r10,1),%r11
    27e1:	4d 89 f1             	mov    %r14,%r9
    27e4:	4d 01 ea             	add    %r13,%r10
    27e7:	48 89 df             	mov    %rbx,%rdi
    27ea:	48 8b 37             	mov    (%rdi),%rsi
    27ed:	4c 89 d8             	mov    %r11,%rax
    27f0:	4c 89 c9             	mov    %r9,%rcx
    27f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    27f8:	48 8b 11             	mov    (%rcx),%rdx
    27fb:	48 05 00 04 00 00    	add    $0x400,%rax
    2801:	48 0f af 90 00 fc ff 	imul   -0x400(%rax),%rdx
    2808:	ff 
    2809:	48 83 c1 08          	add    $0x8,%rcx
    280d:	48 01 d6             	add    %rdx,%rsi
    2810:	48 89 37             	mov    %rsi,(%rdi)
    2813:	4c 39 c0             	cmp    %r8,%rax
    2816:	75 e0                	jne    27f8 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x48>
    2818:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    281f:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    2826:	4c 39 d7             	cmp    %r10,%rdi
    2829:	75 bf                	jne    27ea <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x3a>
    282b:	48 ff c5             	inc    %rbp
    282e:	48 83 c3 08          	add    $0x8,%rbx
    2832:	4c 8d 40 08          	lea    0x8(%rax),%r8
    2836:	48 81 fd 80 00 00 00 	cmp    $0x80,%rbp
    283d:	75 96                	jne    27d5 <void jik<long>(long (*) [128], long (*) [128], long (*) [128])+0x25>
    283f:	5b                   	pop    %rbx
    2840:	5d                   	pop    %rbp
    2841:	41 5c                	pop    %r12
    2843:	41 5d                	pop    %r13
    2845:	41 5e                	pop    %r14
    2847:	c3                   	retq   
    2848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    284f:	00 

0000000000002850 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    2850:	f3 0f 1e fa          	endbr64 
    2854:	41 57                	push   %r15
    2856:	48 8d 87 00 00 04 00 	lea    0x40000(%rdi),%rax
    285d:	45 31 ff             	xor    %r15d,%r15d
    2860:	41 56                	push   %r14
    2862:	49 89 fe             	mov    %rdi,%r14
    2865:	41 55                	push   %r13
    2867:	41 54                	push   %r12
    2869:	55                   	push   %rbp
    286a:	53                   	push   %rbx
    286b:	48 8d 9a 00 00 04 00 	lea    0x40000(%rdx),%rbx
    2872:	48 89 74 24 e0       	mov    %rsi,-0x20(%rsp)
    2877:	48 89 54 24 e8       	mov    %rdx,-0x18(%rsp)
    287c:	48 89 44 24 f0       	mov    %rax,-0x10(%rsp)
    2881:	48 8b 44 24 e8       	mov    -0x18(%rsp),%rax
    2886:	4d 89 fc             	mov    %r15,%r12
    2889:	49 c1 e4 04          	shl    $0x4,%r12
    288d:	48 8b 6c 24 e0       	mov    -0x20(%rsp),%rbp
    2892:	4e 8d 2c 20          	lea    (%rax,%r12,1),%r13
    2896:	4c 89 f7             	mov    %r14,%rdi
    2899:	4c 03 64 24 f0       	add    -0x10(%rsp),%r12
    289e:	4c 8b 17             	mov    (%rdi),%r10
    28a1:	4c 8b 5f 08          	mov    0x8(%rdi),%r11
    28a5:	4c 89 e8             	mov    %r13,%rax
    28a8:	48 89 ee             	mov    %rbp,%rsi
    28ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    28b0:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
    28b4:	48 8b 10             	mov    (%rax),%rdx
    28b7:	48 0f af d1          	imul   %rcx,%rdx
    28bb:	48 8b 48 08          	mov    0x8(%rax),%rcx
    28bf:	48 0f af 0e          	imul   (%rsi),%rcx
    28c3:	48 01 d1             	add    %rdx,%rcx
    28c6:	48 8b 10             	mov    (%rax),%rdx
    28c9:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    28ce:	49 01 c9             	add    %rcx,%r9
    28d1:	4d 01 c2             	add    %r8,%r10
    28d4:	4d 11 cb             	adc    %r9,%r11
    28d7:	48 05 00 08 00 00    	add    $0x800,%rax
    28dd:	4c 89 17             	mov    %r10,(%rdi)
    28e0:	4c 89 5f 08          	mov    %r11,0x8(%rdi)
    28e4:	48 83 c6 10          	add    $0x10,%rsi
    28e8:	48 39 d8             	cmp    %rbx,%rax
    28eb:	75 c3                	jne    28b0 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x60>
    28ed:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    28f4:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    28fb:	4c 39 e7             	cmp    %r12,%rdi
    28fe:	75 9e                	jne    289e <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x4e>
    2900:	49 ff c7             	inc    %r15
    2903:	49 83 c6 10          	add    $0x10,%r14
    2907:	48 8d 58 10          	lea    0x10(%rax),%rbx
    290b:	49 81 ff 80 00 00 00 	cmp    $0x80,%r15
    2912:	0f 85 69 ff ff ff    	jne    2881 <void jik<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x31>
    2918:	5b                   	pop    %rbx
    2919:	5d                   	pop    %rbp
    291a:	41 5c                	pop    %r12
    291c:	41 5d                	pop    %r13
    291e:	41 5e                	pop    %r14
    2920:	41 5f                	pop    %r15
    2922:	c3                   	retq   
    2923:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    292a:	00 00 00 00 
    292e:	66 90                	xchg   %ax,%ax

0000000000002930 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])>:
    2930:	f3 0f 1e fa          	endbr64 
    2934:	41 54                	push   %r12
    2936:	49 89 fa             	mov    %rdi,%r10
    2939:	49 89 f4             	mov    %rsi,%r12
    293c:	55                   	push   %rbp
    293d:	48 8d b2 00 00 01 00 	lea    0x10000(%rdx),%rsi
    2944:	45 31 db             	xor    %r11d,%r11d
    2947:	53                   	push   %rbx
    2948:	48 8d af 00 00 01 00 	lea    0x10000(%rdi),%rbp
    294f:	48 89 d3             	mov    %rdx,%rbx
    2952:	4e 8d 04 9d 00 00 00 	lea    0x0(,%r11,4),%r8
    2959:	00 
    295a:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    295e:	4c 89 e7             	mov    %r12,%rdi
    2961:	49 01 e8             	add    %rbp,%r8
    2964:	4c 89 d1             	mov    %r10,%rcx
    2967:	c5 fa 10 01          	vmovss (%rcx),%xmm0
    296b:	4c 89 c8             	mov    %r9,%rax
    296e:	48 89 fa             	mov    %rdi,%rdx
    2971:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2978:	c5 fa 10 0a          	vmovss (%rdx),%xmm1
    297c:	48 05 00 02 00 00    	add    $0x200,%rax
    2982:	c4 e2 71 b9 80 00 fe 	vfmadd231ss -0x200(%rax),%xmm1,%xmm0
    2989:	ff ff 
    298b:	48 83 c2 04          	add    $0x4,%rdx
    298f:	c5 fa 11 01          	vmovss %xmm0,(%rcx)
    2993:	48 39 f0             	cmp    %rsi,%rax
    2996:	75 e0                	jne    2978 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x48>
    2998:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    299f:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    29a6:	4c 39 c1             	cmp    %r8,%rcx
    29a9:	75 bc                	jne    2967 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x37>
    29ab:	49 ff c3             	inc    %r11
    29ae:	49 83 c2 04          	add    $0x4,%r10
    29b2:	48 8d 70 04          	lea    0x4(%rax),%rsi
    29b6:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    29bd:	75 93                	jne    2952 <void jik<float>(float (*) [128], float (*) [128], float (*) [128])+0x22>
    29bf:	5b                   	pop    %rbx
    29c0:	5d                   	pop    %rbp
    29c1:	41 5c                	pop    %r12
    29c3:	c3                   	retq   
    29c4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    29cb:	00 00 00 00 
    29cf:	90                   	nop

00000000000029d0 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])>:
    29d0:	f3 0f 1e fa          	endbr64 
    29d4:	41 54                	push   %r12
    29d6:	49 89 fa             	mov    %rdi,%r10
    29d9:	49 89 f4             	mov    %rsi,%r12
    29dc:	55                   	push   %rbp
    29dd:	48 8d b2 00 00 02 00 	lea    0x20000(%rdx),%rsi
    29e4:	45 31 db             	xor    %r11d,%r11d
    29e7:	53                   	push   %rbx
    29e8:	48 8d af 00 00 02 00 	lea    0x20000(%rdi),%rbp
    29ef:	48 89 d3             	mov    %rdx,%rbx
    29f2:	4e 8d 04 dd 00 00 00 	lea    0x0(,%r11,8),%r8
    29f9:	00 
    29fa:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    29fe:	4c 89 e7             	mov    %r12,%rdi
    2a01:	49 01 e8             	add    %rbp,%r8
    2a04:	4c 89 d1             	mov    %r10,%rcx
    2a07:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    2a0b:	4c 89 c8             	mov    %r9,%rax
    2a0e:	48 89 fa             	mov    %rdi,%rdx
    2a11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2a18:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    2a1c:	48 05 00 04 00 00    	add    $0x400,%rax
    2a22:	c4 e2 f1 b9 80 00 fc 	vfmadd231sd -0x400(%rax),%xmm1,%xmm0
    2a29:	ff ff 
    2a2b:	48 83 c2 08          	add    $0x8,%rdx
    2a2f:	c5 fb 11 01          	vmovsd %xmm0,(%rcx)
    2a33:	48 39 f0             	cmp    %rsi,%rax
    2a36:	75 e0                	jne    2a18 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x48>
    2a38:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2a3f:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    2a46:	4c 39 c1             	cmp    %r8,%rcx
    2a49:	75 bc                	jne    2a07 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x37>
    2a4b:	49 ff c3             	inc    %r11
    2a4e:	49 83 c2 08          	add    $0x8,%r10
    2a52:	48 8d 70 08          	lea    0x8(%rax),%rsi
    2a56:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    2a5d:	75 93                	jne    29f2 <void jik<double>(double (*) [128], double (*) [128], double (*) [128])+0x22>
    2a5f:	5b                   	pop    %rbx
    2a60:	5d                   	pop    %rbp
    2a61:	41 5c                	pop    %r12
    2a63:	c3                   	retq   
    2a64:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2a6b:	00 00 00 00 
    2a6f:	90                   	nop

0000000000002a70 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    2a70:	f3 0f 1e fa          	endbr64 
    2a74:	41 54                	push   %r12
    2a76:	49 89 fa             	mov    %rdi,%r10
    2a79:	49 89 f4             	mov    %rsi,%r12
    2a7c:	55                   	push   %rbp
    2a7d:	48 8d b2 00 00 04 00 	lea    0x40000(%rdx),%rsi
    2a84:	45 31 db             	xor    %r11d,%r11d
    2a87:	53                   	push   %rbx
    2a88:	48 8d af 00 00 04 00 	lea    0x40000(%rdi),%rbp
    2a8f:	48 89 d3             	mov    %rdx,%rbx
    2a92:	4d 89 d8             	mov    %r11,%r8
    2a95:	49 c1 e0 04          	shl    $0x4,%r8
    2a99:	4e 8d 0c 03          	lea    (%rbx,%r8,1),%r9
    2a9d:	4c 89 e7             	mov    %r12,%rdi
    2aa0:	49 01 e8             	add    %rbp,%r8
    2aa3:	4c 89 d1             	mov    %r10,%rcx
    2aa6:	db 29                	fldt   (%rcx)
    2aa8:	4c 89 c8             	mov    %r9,%rax
    2aab:	48 89 fa             	mov    %rdi,%rdx
    2aae:	66 90                	xchg   %ax,%ax
    2ab0:	db 2a                	fldt   (%rdx)
    2ab2:	48 05 00 08 00 00    	add    $0x800,%rax
    2ab8:	48 83 c2 10          	add    $0x10,%rdx
    2abc:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    2ac2:	de c9                	fmulp  %st,%st(1)
    2ac4:	de c1                	faddp  %st,%st(1)
    2ac6:	d9 c0                	fld    %st(0)
    2ac8:	db 39                	fstpt  (%rcx)
    2aca:	48 39 f0             	cmp    %rsi,%rax
    2acd:	75 e1                	jne    2ab0 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    2acf:	dd d8                	fstp   %st(0)
    2ad1:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    2ad8:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    2adf:	4c 39 c1             	cmp    %r8,%rcx
    2ae2:	75 c2                	jne    2aa6 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x36>
    2ae4:	49 ff c3             	inc    %r11
    2ae7:	49 83 c2 10          	add    $0x10,%r10
    2aeb:	48 8d 70 10          	lea    0x10(%rax),%rsi
    2aef:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    2af6:	75 9a                	jne    2a92 <void jik<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x22>
    2af8:	5b                   	pop    %rbx
    2af9:	5d                   	pop    %rbp
    2afa:	41 5c                	pop    %r12
    2afc:	c3                   	retq   
    2afd:	0f 1f 00             	nopl   (%rax)

0000000000002b00 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    2b00:	f3 0f 1e fa          	endbr64 
    2b04:	41 57                	push   %r15
    2b06:	48 89 f8             	mov    %rdi,%rax
    2b09:	48 05 00 00 04 00    	add    $0x40000,%rax
    2b0f:	41 56                	push   %r14
    2b11:	41 55                	push   %r13
    2b13:	41 54                	push   %r12
    2b15:	55                   	push   %rbp
    2b16:	48 8d aa 00 00 04 00 	lea    0x40000(%rdx),%rbp
    2b1d:	53                   	push   %rbx
    2b1e:	48 83 ec 48          	sub    $0x48,%rsp
    2b22:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    2b27:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    2b2c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
    2b31:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    2b38:	00 00 
    2b3a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    2b3f:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    2b44:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
    2b49:	49 c1 e5 04          	shl    $0x4,%r13
    2b4d:	4c 01 e8             	add    %r13,%rax
    2b50:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2b55:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
    2b5a:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
    2b5f:	4c 03 6c 24 38       	add    0x38(%rsp),%r13
    2b64:	c5 f9 6f 13          	vmovdqa (%rbx),%xmm2
    2b68:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
    2b6d:	4d 89 e6             	mov    %r12,%r14
    2b70:	c4 c1 79 6f 0f       	vmovdqa (%r15),%xmm1
    2b75:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    2b7a:	c5 f9 7f 14 24       	vmovdqa %xmm2,(%rsp)
    2b7f:	e8 fc e5 ff ff       	callq  1180 <__multf3@plt>
    2b84:	c5 f9 6f 14 24       	vmovdqa (%rsp),%xmm2
    2b89:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    2b8d:	c5 f9 6f c2          	vmovdqa %xmm2,%xmm0
    2b91:	e8 4a e6 ff ff       	callq  11e0 <__addtf3@plt>
    2b96:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    2b9d:	c5 f9 6f d0          	vmovdqa %xmm0,%xmm2
    2ba1:	c5 f9 7f 03          	vmovdqa %xmm0,(%rbx)
    2ba5:	49 83 c6 10          	add    $0x10,%r14
    2ba9:	49 39 ef             	cmp    %rbp,%r15
    2bac:	75 c2                	jne    2b70 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x70>
    2bae:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    2bb5:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    2bbc:	4c 39 eb             	cmp    %r13,%rbx
    2bbf:	75 a3                	jne    2b64 <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x64>
    2bc1:	48 ff 44 24 18       	incq   0x18(%rsp)
    2bc6:	48 83 44 24 20 10    	addq   $0x10,0x20(%rsp)
    2bcc:	49 8d 6f 10          	lea    0x10(%r15),%rbp
    2bd0:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2bd5:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    2bdb:	0f 85 5e ff ff ff    	jne    2b3f <void jik<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3f>
    2be1:	48 83 c4 48          	add    $0x48,%rsp
    2be5:	5b                   	pop    %rbx
    2be6:	5d                   	pop    %rbp
    2be7:	41 5c                	pop    %r12
    2be9:	41 5d                	pop    %r13
    2beb:	41 5e                	pop    %r14
    2bed:	41 5f                	pop    %r15
    2bef:	c3                   	retq   

0000000000002bf0 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])>:
    2bf0:	f3 0f 1e fa          	endbr64 
    2bf4:	55                   	push   %rbp
    2bf5:	48 89 f8             	mov    %rdi,%rax
    2bf8:	48 89 f5             	mov    %rsi,%rbp
    2bfb:	53                   	push   %rbx
    2bfc:	48 8d bf 00 80 00 00 	lea    0x8000(%rdi),%rdi
    2c03:	48 89 d3             	mov    %rdx,%rbx
    2c06:	4c 8d 98 00 81 00 00 	lea    0x8100(%rax),%r11
    2c0d:	4c 8d 8e 00 01 00 00 	lea    0x100(%rsi),%r9
    2c14:	49 89 e8             	mov    %rbp,%r8
    2c17:	48 89 de             	mov    %rbx,%rsi
    2c1a:	4c 8d 97 00 80 ff ff 	lea    -0x8000(%rdi),%r10
    2c21:	4c 89 d0             	mov    %r10,%rax
    2c24:	4c 89 c1             	mov    %r8,%rcx
    2c27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2c2e:	00 00 
    2c30:	0f b7 11             	movzwl (%rcx),%edx
    2c33:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    2c3a:	66 0f af 16          	imul   (%rsi),%dx
    2c3e:	66 01 10             	add    %dx,(%rax)
    2c41:	48 05 00 01 00 00    	add    $0x100,%rax
    2c47:	48 39 c7             	cmp    %rax,%rdi
    2c4a:	75 e4                	jne    2c30 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x40>
    2c4c:	49 83 c0 02          	add    $0x2,%r8
    2c50:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    2c57:	4d 39 c1             	cmp    %r8,%r9
    2c5a:	75 c5                	jne    2c21 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x31>
    2c5c:	48 83 c7 02          	add    $0x2,%rdi
    2c60:	48 83 c3 02          	add    $0x2,%rbx
    2c64:	49 39 fb             	cmp    %rdi,%r11
    2c67:	75 ab                	jne    2c14 <void jki<short>(short (*) [128], short (*) [128], short (*) [128])+0x24>
    2c69:	5b                   	pop    %rbx
    2c6a:	5d                   	pop    %rbp
    2c6b:	c3                   	retq   
    2c6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002c70 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])>:
    2c70:	f3 0f 1e fa          	endbr64 
    2c74:	55                   	push   %rbp
    2c75:	48 89 f8             	mov    %rdi,%rax
    2c78:	48 89 f5             	mov    %rsi,%rbp
    2c7b:	53                   	push   %rbx
    2c7c:	48 8d bf 00 00 01 00 	lea    0x10000(%rdi),%rdi
    2c83:	48 89 d3             	mov    %rdx,%rbx
    2c86:	4c 8d 98 00 02 01 00 	lea    0x10200(%rax),%r11
    2c8d:	4c 8d 8e 00 02 00 00 	lea    0x200(%rsi),%r9
    2c94:	49 89 e8             	mov    %rbp,%r8
    2c97:	48 89 de             	mov    %rbx,%rsi
    2c9a:	4c 8d 97 00 00 ff ff 	lea    -0x10000(%rdi),%r10
    2ca1:	4c 89 d0             	mov    %r10,%rax
    2ca4:	4c 89 c1             	mov    %r8,%rcx
    2ca7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2cae:	00 00 
    2cb0:	8b 11                	mov    (%rcx),%edx
    2cb2:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    2cb9:	0f af 16             	imul   (%rsi),%edx
    2cbc:	01 10                	add    %edx,(%rax)
    2cbe:	48 05 00 02 00 00    	add    $0x200,%rax
    2cc4:	48 39 f8             	cmp    %rdi,%rax
    2cc7:	75 e7                	jne    2cb0 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x40>
    2cc9:	49 83 c0 04          	add    $0x4,%r8
    2ccd:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    2cd4:	4d 39 c8             	cmp    %r9,%r8
    2cd7:	75 c8                	jne    2ca1 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x31>
    2cd9:	48 8d 78 04          	lea    0x4(%rax),%rdi
    2cdd:	48 83 c3 04          	add    $0x4,%rbx
    2ce1:	4c 39 df             	cmp    %r11,%rdi
    2ce4:	75 ae                	jne    2c94 <void jki<int>(int (*) [128], int (*) [128], int (*) [128])+0x24>
    2ce6:	5b                   	pop    %rbx
    2ce7:	5d                   	pop    %rbp
    2ce8:	c3                   	retq   
    2ce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002cf0 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])>:
    2cf0:	f3 0f 1e fa          	endbr64 
    2cf4:	55                   	push   %rbp
    2cf5:	48 89 f8             	mov    %rdi,%rax
    2cf8:	48 89 f5             	mov    %rsi,%rbp
    2cfb:	53                   	push   %rbx
    2cfc:	48 8d bf 00 00 02 00 	lea    0x20000(%rdi),%rdi
    2d03:	48 89 d3             	mov    %rdx,%rbx
    2d06:	4c 8d 98 00 04 02 00 	lea    0x20400(%rax),%r11
    2d0d:	4c 8d 8e 00 04 00 00 	lea    0x400(%rsi),%r9
    2d14:	49 89 e8             	mov    %rbp,%r8
    2d17:	48 89 de             	mov    %rbx,%rsi
    2d1a:	4c 8d 97 00 00 fe ff 	lea    -0x20000(%rdi),%r10
    2d21:	4c 89 d0             	mov    %r10,%rax
    2d24:	4c 89 c1             	mov    %r8,%rcx
    2d27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2d2e:	00 00 
    2d30:	48 8b 11             	mov    (%rcx),%rdx
    2d33:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2d3a:	48 0f af 16          	imul   (%rsi),%rdx
    2d3e:	48 01 10             	add    %rdx,(%rax)
    2d41:	48 05 00 04 00 00    	add    $0x400,%rax
    2d47:	48 39 f8             	cmp    %rdi,%rax
    2d4a:	75 e4                	jne    2d30 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x40>
    2d4c:	49 83 c0 08          	add    $0x8,%r8
    2d50:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    2d57:	4d 39 c8             	cmp    %r9,%r8
    2d5a:	75 c5                	jne    2d21 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x31>
    2d5c:	48 8d 78 08          	lea    0x8(%rax),%rdi
    2d60:	48 83 c3 08          	add    $0x8,%rbx
    2d64:	4c 39 df             	cmp    %r11,%rdi
    2d67:	75 ab                	jne    2d14 <void jki<long>(long (*) [128], long (*) [128], long (*) [128])+0x24>
    2d69:	5b                   	pop    %rbx
    2d6a:	5d                   	pop    %rbp
    2d6b:	c3                   	retq   
    2d6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002d70 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    2d70:	f3 0f 1e fa          	endbr64 
    2d74:	41 57                	push   %r15
    2d76:	4c 8d 97 00 00 04 00 	lea    0x40000(%rdi),%r10
    2d7d:	41 56                	push   %r14
    2d7f:	4c 8d b7 00 08 04 00 	lea    0x40800(%rdi),%r14
    2d86:	41 55                	push   %r13
    2d88:	49 89 d5             	mov    %rdx,%r13
    2d8b:	41 54                	push   %r12
    2d8d:	49 89 f4             	mov    %rsi,%r12
    2d90:	55                   	push   %rbp
    2d91:	53                   	push   %rbx
    2d92:	48 8d 9e 00 08 00 00 	lea    0x800(%rsi),%rbx
    2d99:	4d 89 e3             	mov    %r12,%r11
    2d9c:	4c 89 ef             	mov    %r13,%rdi
    2d9f:	49 8d aa 00 00 fc ff 	lea    -0x40000(%r10),%rbp
    2da6:	48 89 e9             	mov    %rbp,%rcx
    2da9:	4c 89 de             	mov    %r11,%rsi
    2dac:	0f 1f 40 00          	nopl   0x0(%rax)
    2db0:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    2db4:	48 8b 07             	mov    (%rdi),%rax
    2db7:	48 0f af c2          	imul   %rdx,%rax
    2dbb:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    2dbf:	48 0f af 16          	imul   (%rsi),%rdx
    2dc3:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    2dc7:	48 8b 07             	mov    (%rdi),%rax
    2dca:	48 89 c2             	mov    %rax,%rdx
    2dcd:	c4 62 bb f6 0e       	mulx   (%rsi),%r8,%r9
    2dd2:	4d 01 f9             	add    %r15,%r9
    2dd5:	4c 01 01             	add    %r8,(%rcx)
    2dd8:	4c 11 49 08          	adc    %r9,0x8(%rcx)
    2ddc:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    2de3:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    2dea:	4c 39 d1             	cmp    %r10,%rcx
    2ded:	75 c1                	jne    2db0 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    2def:	49 83 c3 10          	add    $0x10,%r11
    2df3:	48 81 c7 00 08 00 00 	add    $0x800,%rdi
    2dfa:	49 39 db             	cmp    %rbx,%r11
    2dfd:	75 a7                	jne    2da6 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x36>
    2dff:	4c 8d 51 10          	lea    0x10(%rcx),%r10
    2e03:	49 83 c5 10          	add    $0x10,%r13
    2e07:	4d 39 f2             	cmp    %r14,%r10
    2e0a:	75 8d                	jne    2d99 <void jki<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x29>
    2e0c:	5b                   	pop    %rbx
    2e0d:	5d                   	pop    %rbp
    2e0e:	41 5c                	pop    %r12
    2e10:	41 5d                	pop    %r13
    2e12:	41 5e                	pop    %r14
    2e14:	41 5f                	pop    %r15
    2e16:	c3                   	retq   
    2e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2e1e:	00 00 

0000000000002e20 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])>:
    2e20:	f3 0f 1e fa          	endbr64 
    2e24:	53                   	push   %rbx
    2e25:	48 89 f3             	mov    %rsi,%rbx
    2e28:	49 89 d3             	mov    %rdx,%r11
    2e2b:	48 8d b7 00 00 01 00 	lea    0x10000(%rdi),%rsi
    2e32:	4c 8d 97 00 02 01 00 	lea    0x10200(%rdi),%r10
    2e39:	4c 8d 83 00 02 00 00 	lea    0x200(%rbx),%r8
    2e40:	48 89 df             	mov    %rbx,%rdi
    2e43:	4c 89 d9             	mov    %r11,%rcx
    2e46:	4c 8d 8e 00 00 ff ff 	lea    -0x10000(%rsi),%r9
    2e4d:	4c 89 c8             	mov    %r9,%rax
    2e50:	48 89 fa             	mov    %rdi,%rdx
    2e53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2e58:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    2e5c:	c5 fa 10 08          	vmovss (%rax),%xmm1
    2e60:	48 05 00 02 00 00    	add    $0x200,%rax
    2e66:	c4 e2 71 99 01       	vfmadd132ss (%rcx),%xmm1,%xmm0
    2e6b:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    2e72:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    2e79:	ff 
    2e7a:	48 39 f0             	cmp    %rsi,%rax
    2e7d:	75 d9                	jne    2e58 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x38>
    2e7f:	48 83 c7 04          	add    $0x4,%rdi
    2e83:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    2e8a:	4c 39 c7             	cmp    %r8,%rdi
    2e8d:	75 be                	jne    2e4d <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x2d>
    2e8f:	48 8d 70 04          	lea    0x4(%rax),%rsi
    2e93:	49 83 c3 04          	add    $0x4,%r11
    2e97:	4c 39 d6             	cmp    %r10,%rsi
    2e9a:	75 a4                	jne    2e40 <void jki<float>(float (*) [128], float (*) [128], float (*) [128])+0x20>
    2e9c:	5b                   	pop    %rbx
    2e9d:	c3                   	retq   
    2e9e:	66 90                	xchg   %ax,%ax

0000000000002ea0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])>:
    2ea0:	f3 0f 1e fa          	endbr64 
    2ea4:	53                   	push   %rbx
    2ea5:	48 89 f3             	mov    %rsi,%rbx
    2ea8:	49 89 d3             	mov    %rdx,%r11
    2eab:	48 8d b7 00 00 02 00 	lea    0x20000(%rdi),%rsi
    2eb2:	4c 8d 97 00 04 02 00 	lea    0x20400(%rdi),%r10
    2eb9:	4c 8d 83 00 04 00 00 	lea    0x400(%rbx),%r8
    2ec0:	48 89 df             	mov    %rbx,%rdi
    2ec3:	4c 89 d9             	mov    %r11,%rcx
    2ec6:	4c 8d 8e 00 00 fe ff 	lea    -0x20000(%rsi),%r9
    2ecd:	4c 89 c8             	mov    %r9,%rax
    2ed0:	48 89 fa             	mov    %rdi,%rdx
    2ed3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2ed8:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    2edc:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    2ee0:	48 05 00 04 00 00    	add    $0x400,%rax
    2ee6:	c4 e2 f1 99 01       	vfmadd132sd (%rcx),%xmm1,%xmm0
    2eeb:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    2ef2:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    2ef9:	ff 
    2efa:	48 39 f0             	cmp    %rsi,%rax
    2efd:	75 d9                	jne    2ed8 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x38>
    2eff:	48 83 c7 08          	add    $0x8,%rdi
    2f03:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    2f0a:	4c 39 c7             	cmp    %r8,%rdi
    2f0d:	75 be                	jne    2ecd <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x2d>
    2f0f:	48 8d 70 08          	lea    0x8(%rax),%rsi
    2f13:	49 83 c3 08          	add    $0x8,%r11
    2f17:	4c 39 d6             	cmp    %r10,%rsi
    2f1a:	75 a4                	jne    2ec0 <void jki<double>(double (*) [128], double (*) [128], double (*) [128])+0x20>
    2f1c:	5b                   	pop    %rbx
    2f1d:	c3                   	retq   
    2f1e:	66 90                	xchg   %ax,%ax

0000000000002f20 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    2f20:	f3 0f 1e fa          	endbr64 
    2f24:	53                   	push   %rbx
    2f25:	48 89 f3             	mov    %rsi,%rbx
    2f28:	49 89 d3             	mov    %rdx,%r11
    2f2b:	48 8d b7 00 00 04 00 	lea    0x40000(%rdi),%rsi
    2f32:	4c 8d 97 00 08 04 00 	lea    0x40800(%rdi),%r10
    2f39:	4c 8d 83 00 08 00 00 	lea    0x800(%rbx),%r8
    2f40:	48 89 df             	mov    %rbx,%rdi
    2f43:	4c 89 d9             	mov    %r11,%rcx
    2f46:	4c 8d 8e 00 00 fc ff 	lea    -0x40000(%rsi),%r9
    2f4d:	4c 89 c8             	mov    %r9,%rax
    2f50:	48 89 fa             	mov    %rdi,%rdx
    2f53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2f58:	db 2a                	fldt   (%rdx)
    2f5a:	48 05 00 08 00 00    	add    $0x800,%rax
    2f60:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    2f67:	db 29                	fldt   (%rcx)
    2f69:	de c9                	fmulp  %st,%st(1)
    2f6b:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    2f71:	de c1                	faddp  %st,%st(1)
    2f73:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    2f79:	48 39 f0             	cmp    %rsi,%rax
    2f7c:	75 da                	jne    2f58 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x38>
    2f7e:	48 83 c7 10          	add    $0x10,%rdi
    2f82:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    2f89:	4c 39 c7             	cmp    %r8,%rdi
    2f8c:	75 bf                	jne    2f4d <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2d>
    2f8e:	48 8d 70 10          	lea    0x10(%rax),%rsi
    2f92:	49 83 c3 10          	add    $0x10,%r11
    2f96:	4c 39 d6             	cmp    %r10,%rsi
    2f99:	75 a5                	jne    2f40 <void jki<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x20>
    2f9b:	5b                   	pop    %rbx
    2f9c:	c3                   	retq   
    2f9d:	0f 1f 00             	nopl   (%rax)

0000000000002fa0 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    2fa0:	f3 0f 1e fa          	endbr64 
    2fa4:	41 57                	push   %r15
    2fa6:	48 89 f8             	mov    %rdi,%rax
    2fa9:	48 05 00 08 04 00    	add    $0x40800,%rax
    2faf:	41 56                	push   %r14
    2fb1:	41 55                	push   %r13
    2fb3:	41 54                	push   %r12
    2fb5:	4c 8d a7 00 00 04 00 	lea    0x40000(%rdi),%r12
    2fbc:	55                   	push   %rbp
    2fbd:	53                   	push   %rbx
    2fbe:	48 83 ec 28          	sub    $0x28,%rsp
    2fc2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2fc7:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    2fce:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
    2fd3:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    2fd8:	48 89 04 24          	mov    %rax,(%rsp)
    2fdc:	4c 8b 6c 24 18       	mov    0x18(%rsp),%r13
    2fe1:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
    2fe6:	4d 8d bc 24 00 00 fc 	lea    -0x40000(%r12),%r15
    2fed:	ff 
    2fee:	4c 89 fb             	mov    %r15,%rbx
    2ff1:	4d 89 ee             	mov    %r13,%r14
    2ff4:	0f 1f 40 00          	nopl   0x0(%rax)
    2ff8:	c5 f9 6f 4d 00       	vmovdqa 0x0(%rbp),%xmm1
    2ffd:	c4 c1 79 6f 06       	vmovdqa (%r14),%xmm0
    3002:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    3009:	e8 72 e1 ff ff       	callq  1180 <__multf3@plt>
    300e:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    3012:	c5 f9 6f 83 00 f8 ff 	vmovdqa -0x800(%rbx),%xmm0
    3019:	ff 
    301a:	49 81 c6 00 08 00 00 	add    $0x800,%r14
    3021:	e8 ba e1 ff ff       	callq  11e0 <__addtf3@plt>
    3026:	c5 f9 7f 83 00 f8 ff 	vmovdqa %xmm0,-0x800(%rbx)
    302d:	ff 
    302e:	4c 39 e3             	cmp    %r12,%rbx
    3031:	75 c5                	jne    2ff8 <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x58>
    3033:	49 83 c5 10          	add    $0x10,%r13
    3037:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    303e:	4c 3b 2c 24          	cmp    (%rsp),%r13
    3042:	75 aa                	jne    2fee <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x4e>
    3044:	4c 8d 63 10          	lea    0x10(%rbx),%r12
    3048:	48 83 44 24 08 10    	addq   $0x10,0x8(%rsp)
    304e:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    3053:	75 87                	jne    2fdc <void jki<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x3c>
    3055:	48 83 c4 28          	add    $0x28,%rsp
    3059:	5b                   	pop    %rbx
    305a:	5d                   	pop    %rbp
    305b:	41 5c                	pop    %r12
    305d:	41 5d                	pop    %r13
    305f:	41 5e                	pop    %r14
    3061:	41 5f                	pop    %r15
    3063:	c3                   	retq   
    3064:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    306b:	00 00 00 00 
    306f:	90                   	nop

0000000000003070 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])>:
    3070:	f3 0f 1e fa          	endbr64 
    3074:	55                   	push   %rbp
    3075:	4c 8d 8e 00 80 00 00 	lea    0x8000(%rsi),%r9
    307c:	49 89 fa             	mov    %rdi,%r10
    307f:	48 89 e5             	mov    %rsp,%rbp
    3082:	48 89 d6             	mov    %rdx,%rsi
    3085:	53                   	push   %rbx
    3086:	31 db                	xor    %ebx,%ebx
    3088:	4d 89 d0             	mov    %r10,%r8
    308b:	49 8d b9 00 80 ff ff 	lea    -0x8000(%r9),%rdi
    3092:	4c 8d 5e 02          	lea    0x2(%rsi),%r11
    3096:	e9 ba 00 00 00       	jmpq   3155 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe5>
    309b:	48 89 c8             	mov    %rcx,%rax
    309e:	4c 29 d8             	sub    %r11,%rax
    30a1:	48 83 f8 1c          	cmp    $0x1c,%rax
    30a5:	0f 86 cc 00 00 00    	jbe    3177 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x107>
    30ab:	c4 e2 7d 79 07       	vpbroadcastw (%rdi),%ymm0
    30b0:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    30b7:	c5 fd d5 0e          	vpmullw (%rsi),%ymm0,%ymm1
    30bb:	c5 f5 fd 09          	vpaddw (%rcx),%ymm1,%ymm1
    30bf:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    30c3:	c5 fd d5 4e 20       	vpmullw 0x20(%rsi),%ymm0,%ymm1
    30c8:	c5 f5 fd 49 20       	vpaddw 0x20(%rcx),%ymm1,%ymm1
    30cd:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    30d2:	c5 fd d5 4e 40       	vpmullw 0x40(%rsi),%ymm0,%ymm1
    30d7:	c5 f5 fd 49 40       	vpaddw 0x40(%rcx),%ymm1,%ymm1
    30dc:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    30e1:	c5 fd d5 4e 60       	vpmullw 0x60(%rsi),%ymm0,%ymm1
    30e6:	c5 f5 fd 49 60       	vpaddw 0x60(%rcx),%ymm1,%ymm1
    30eb:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    30f0:	c5 fd d5 8e 80 00 00 	vpmullw 0x80(%rsi),%ymm0,%ymm1
    30f7:	00 
    30f8:	c5 f5 fd 89 80 00 00 	vpaddw 0x80(%rcx),%ymm1,%ymm1
    30ff:	00 
    3100:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    3107:	00 
    3108:	c5 fd d5 8e a0 00 00 	vpmullw 0xa0(%rsi),%ymm0,%ymm1
    310f:	00 
    3110:	c5 f5 fd 89 a0 00 00 	vpaddw 0xa0(%rcx),%ymm1,%ymm1
    3117:	00 
    3118:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    311f:	00 
    3120:	c5 fd d5 8e c0 00 00 	vpmullw 0xc0(%rsi),%ymm0,%ymm1
    3127:	00 
    3128:	c5 f5 fd 89 c0 00 00 	vpaddw 0xc0(%rcx),%ymm1,%ymm1
    312f:	00 
    3130:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    3137:	00 
    3138:	c5 fd d5 86 e0 00 00 	vpmullw 0xe0(%rsi),%ymm0,%ymm0
    313f:	00 
    3140:	c5 fd fd 81 e0 00 00 	vpaddw 0xe0(%rcx),%ymm0,%ymm0
    3147:	00 
    3148:	c5 fe 7f 81 e0 00 00 	vmovdqu %ymm0,0xe0(%rcx)
    314f:	00 
    3150:	49 39 f9             	cmp    %rdi,%r9
    3153:	74 4e                	je     31a3 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x133>
    3155:	4c 89 c1             	mov    %r8,%rcx
    3158:	48 8d 47 02          	lea    0x2(%rdi),%rax
    315c:	49 81 c0 00 01 00 00 	add    $0x100,%r8
    3163:	48 39 c1             	cmp    %rax,%rcx
    3166:	0f 93 c2             	setae  %dl
    3169:	4c 39 c7             	cmp    %r8,%rdi
    316c:	0f 93 c0             	setae  %al
    316f:	08 c2                	or     %al,%dl
    3171:	0f 85 24 ff ff ff    	jne    309b <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x2b>
    3177:	31 c0                	xor    %eax,%eax
    3179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3180:	0f b7 14 46          	movzwl (%rsi,%rax,2),%edx
    3184:	66 0f af 17          	imul   (%rdi),%dx
    3188:	66 01 14 41          	add    %dx,(%rcx,%rax,2)
    318c:	48 ff c0             	inc    %rax
    318f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3195:	75 e9                	jne    3180 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x110>
    3197:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
    319e:	49 39 f9             	cmp    %rdi,%r9
    31a1:	75 b2                	jne    3155 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0xe5>
    31a3:	48 ff c3             	inc    %rbx
    31a6:	49 83 c1 02          	add    $0x2,%r9
    31aa:	48 81 c6 00 01 00 00 	add    $0x100,%rsi
    31b1:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    31b8:	0f 85 ca fe ff ff    	jne    3088 <void kij<short>(short (*) [128], short (*) [128], short (*) [128])+0x18>
    31be:	c5 f8 77             	vzeroupper 
    31c1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    31c5:	c9                   	leaveq 
    31c6:	c3                   	retq   
    31c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    31ce:	00 00 

00000000000031d0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])>:
    31d0:	f3 0f 1e fa          	endbr64 
    31d4:	55                   	push   %rbp
    31d5:	49 89 f0             	mov    %rsi,%r8
    31d8:	49 89 fb             	mov    %rdi,%r11
    31db:	48 89 e5             	mov    %rsp,%rbp
    31de:	41 54                	push   %r12
    31e0:	48 89 d6             	mov    %rdx,%rsi
    31e3:	45 31 e4             	xor    %r12d,%r12d
    31e6:	53                   	push   %rbx
    31e7:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    31ee:	4c 89 c3             	mov    %r8,%rbx
    31f1:	4d 89 d8             	mov    %r11,%r8
    31f4:	48 89 df             	mov    %rbx,%rdi
    31f7:	4c 8d 56 04          	lea    0x4(%rsi),%r10
    31fb:	e9 8a 01 00 00       	jmpq   338a <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ba>
    3200:	48 89 c8             	mov    %rcx,%rax
    3203:	4c 29 d0             	sub    %r10,%rax
    3206:	48 83 f8 18          	cmp    $0x18,%rax
    320a:	0f 86 9c 01 00 00    	jbe    33ac <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1dc>
    3210:	c4 e2 7d 58 07       	vpbroadcastd (%rdi),%ymm0
    3215:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    321c:	c4 e2 7d 40 0e       	vpmulld (%rsi),%ymm0,%ymm1
    3221:	c5 f5 fe 09          	vpaddd (%rcx),%ymm1,%ymm1
    3225:	c5 fe 7f 09          	vmovdqu %ymm1,(%rcx)
    3229:	c4 e2 7d 40 4e 20    	vpmulld 0x20(%rsi),%ymm0,%ymm1
    322f:	c5 f5 fe 49 20       	vpaddd 0x20(%rcx),%ymm1,%ymm1
    3234:	c5 fe 7f 49 20       	vmovdqu %ymm1,0x20(%rcx)
    3239:	c4 e2 7d 40 4e 40    	vpmulld 0x40(%rsi),%ymm0,%ymm1
    323f:	c5 f5 fe 49 40       	vpaddd 0x40(%rcx),%ymm1,%ymm1
    3244:	c5 fe 7f 49 40       	vmovdqu %ymm1,0x40(%rcx)
    3249:	c4 e2 7d 40 4e 60    	vpmulld 0x60(%rsi),%ymm0,%ymm1
    324f:	c5 f5 fe 49 60       	vpaddd 0x60(%rcx),%ymm1,%ymm1
    3254:	c5 fe 7f 49 60       	vmovdqu %ymm1,0x60(%rcx)
    3259:	c4 e2 7d 40 8e 80 00 	vpmulld 0x80(%rsi),%ymm0,%ymm1
    3260:	00 00 
    3262:	c5 f5 fe 89 80 00 00 	vpaddd 0x80(%rcx),%ymm1,%ymm1
    3269:	00 
    326a:	c5 fe 7f 89 80 00 00 	vmovdqu %ymm1,0x80(%rcx)
    3271:	00 
    3272:	c4 e2 7d 40 8e a0 00 	vpmulld 0xa0(%rsi),%ymm0,%ymm1
    3279:	00 00 
    327b:	c5 f5 fe 89 a0 00 00 	vpaddd 0xa0(%rcx),%ymm1,%ymm1
    3282:	00 
    3283:	c5 fe 7f 89 a0 00 00 	vmovdqu %ymm1,0xa0(%rcx)
    328a:	00 
    328b:	c4 e2 7d 40 8e c0 00 	vpmulld 0xc0(%rsi),%ymm0,%ymm1
    3292:	00 00 
    3294:	c5 f5 fe 89 c0 00 00 	vpaddd 0xc0(%rcx),%ymm1,%ymm1
    329b:	00 
    329c:	c5 fe 7f 89 c0 00 00 	vmovdqu %ymm1,0xc0(%rcx)
    32a3:	00 
    32a4:	c4 e2 7d 40 8e e0 00 	vpmulld 0xe0(%rsi),%ymm0,%ymm1
    32ab:	00 00 
    32ad:	c5 f5 fe 89 e0 00 00 	vpaddd 0xe0(%rcx),%ymm1,%ymm1
    32b4:	00 
    32b5:	c5 fe 7f 89 e0 00 00 	vmovdqu %ymm1,0xe0(%rcx)
    32bc:	00 
    32bd:	c4 e2 7d 40 8e 00 01 	vpmulld 0x100(%rsi),%ymm0,%ymm1
    32c4:	00 00 
    32c6:	c5 f5 fe 89 00 01 00 	vpaddd 0x100(%rcx),%ymm1,%ymm1
    32cd:	00 
    32ce:	c5 fe 7f 89 00 01 00 	vmovdqu %ymm1,0x100(%rcx)
    32d5:	00 
    32d6:	c4 e2 7d 40 8e 20 01 	vpmulld 0x120(%rsi),%ymm0,%ymm1
    32dd:	00 00 
    32df:	c5 f5 fe 89 20 01 00 	vpaddd 0x120(%rcx),%ymm1,%ymm1
    32e6:	00 
    32e7:	c5 fe 7f 89 20 01 00 	vmovdqu %ymm1,0x120(%rcx)
    32ee:	00 
    32ef:	c4 e2 7d 40 8e 40 01 	vpmulld 0x140(%rsi),%ymm0,%ymm1
    32f6:	00 00 
    32f8:	c5 f5 fe 89 40 01 00 	vpaddd 0x140(%rcx),%ymm1,%ymm1
    32ff:	00 
    3300:	c5 fe 7f 89 40 01 00 	vmovdqu %ymm1,0x140(%rcx)
    3307:	00 
    3308:	c4 e2 7d 40 8e 60 01 	vpmulld 0x160(%rsi),%ymm0,%ymm1
    330f:	00 00 
    3311:	c5 f5 fe 89 60 01 00 	vpaddd 0x160(%rcx),%ymm1,%ymm1
    3318:	00 
    3319:	c5 fe 7f 89 60 01 00 	vmovdqu %ymm1,0x160(%rcx)
    3320:	00 
    3321:	c4 e2 7d 40 8e 80 01 	vpmulld 0x180(%rsi),%ymm0,%ymm1
    3328:	00 00 
    332a:	c5 f5 fe 89 80 01 00 	vpaddd 0x180(%rcx),%ymm1,%ymm1
    3331:	00 
    3332:	c5 fe 7f 89 80 01 00 	vmovdqu %ymm1,0x180(%rcx)
    3339:	00 
    333a:	c4 e2 7d 40 8e a0 01 	vpmulld 0x1a0(%rsi),%ymm0,%ymm1
    3341:	00 00 
    3343:	c5 f5 fe 89 a0 01 00 	vpaddd 0x1a0(%rcx),%ymm1,%ymm1
    334a:	00 
    334b:	c5 fe 7f 89 a0 01 00 	vmovdqu %ymm1,0x1a0(%rcx)
    3352:	00 
    3353:	c4 e2 7d 40 8e c0 01 	vpmulld 0x1c0(%rsi),%ymm0,%ymm1
    335a:	00 00 
    335c:	c5 f5 fe 89 c0 01 00 	vpaddd 0x1c0(%rcx),%ymm1,%ymm1
    3363:	00 
    3364:	c5 fe 7f 89 c0 01 00 	vmovdqu %ymm1,0x1c0(%rcx)
    336b:	00 
    336c:	c4 e2 7d 40 86 e0 01 	vpmulld 0x1e0(%rsi),%ymm0,%ymm0
    3373:	00 00 
    3375:	c5 fd fe 81 e0 01 00 	vpaddd 0x1e0(%rcx),%ymm0,%ymm0
    337c:	00 
    337d:	c5 fe 7f 81 e0 01 00 	vmovdqu %ymm0,0x1e0(%rcx)
    3384:	00 
    3385:	4d 39 c1             	cmp    %r8,%r9
    3388:	74 46                	je     33d0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x200>
    338a:	4c 89 c1             	mov    %r8,%rcx
    338d:	48 8d 47 04          	lea    0x4(%rdi),%rax
    3391:	49 81 c0 00 02 00 00 	add    $0x200,%r8
    3398:	48 39 c1             	cmp    %rax,%rcx
    339b:	0f 93 c2             	setae  %dl
    339e:	4c 39 c7             	cmp    %r8,%rdi
    33a1:	0f 93 c0             	setae  %al
    33a4:	08 c2                	or     %al,%dl
    33a6:	0f 85 54 fe ff ff    	jne    3200 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x30>
    33ac:	31 c0                	xor    %eax,%eax
    33ae:	66 90                	xchg   %ax,%ax
    33b0:	8b 17                	mov    (%rdi),%edx
    33b2:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    33b6:	01 14 81             	add    %edx,(%rcx,%rax,4)
    33b9:	48 ff c0             	inc    %rax
    33bc:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    33c2:	75 ec                	jne    33b0 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1e0>
    33c4:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    33cb:	4d 39 c1             	cmp    %r8,%r9
    33ce:	75 ba                	jne    338a <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x1ba>
    33d0:	49 ff c4             	inc    %r12
    33d3:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    33da:	48 83 c3 04          	add    $0x4,%rbx
    33de:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    33e5:	0f 85 06 fe ff ff    	jne    31f1 <void kij<int>(int (*) [128], int (*) [128], int (*) [128])+0x21>
    33eb:	c5 f8 77             	vzeroupper 
    33ee:	5b                   	pop    %rbx
    33ef:	41 5c                	pop    %r12
    33f1:	5d                   	pop    %rbp
    33f2:	c3                   	retq   
    33f3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    33fa:	00 00 00 00 
    33fe:	66 90                	xchg   %ax,%ax

0000000000003400 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3400:	f3 0f 1e fa          	endbr64 
    3404:	55                   	push   %rbp
    3405:	48 89 f0             	mov    %rsi,%rax
    3408:	4c 8d 8e 00 00 02 00 	lea    0x20000(%rsi),%r9
    340f:	48 89 e5             	mov    %rsp,%rbp
    3412:	49 89 fa             	mov    %rdi,%r10
    3415:	53                   	push   %rbx
    3416:	48 89 d6             	mov    %rdx,%rsi
    3419:	48 8d 98 00 04 02 00 	lea    0x20400(%rax),%rbx
    3420:	4d 89 d0             	mov    %r10,%r8
    3423:	49 8d b9 00 00 fe ff 	lea    -0x20000(%r9),%rdi
    342a:	4c 8d 5e 08          	lea    0x8(%rsi),%r11
    342e:	4c 89 c2             	mov    %r8,%rdx
    3431:	48 8d 47 08          	lea    0x8(%rdi),%rax
    3435:	49 81 c0 00 04 00 00 	add    $0x400,%r8
    343c:	48 39 c2             	cmp    %rax,%rdx
    343f:	0f 93 c1             	setae  %cl
    3442:	4c 39 c7             	cmp    %r8,%rdi
    3445:	0f 93 c0             	setae  %al
    3448:	08 c1                	or     %al,%cl
    344a:	74 7e                	je     34ca <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xca>
    344c:	48 89 d0             	mov    %rdx,%rax
    344f:	4c 29 d8             	sub    %r11,%rax
    3452:	48 83 f8 10          	cmp    $0x10,%rax
    3456:	76 72                	jbe    34ca <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xca>
    3458:	c4 e2 7d 59 1f       	vpbroadcastq (%rdi),%ymm3
    345d:	31 c0                	xor    %eax,%eax
    345f:	c5 dd 73 d3 20       	vpsrlq $0x20,%ymm3,%ymm4
    3464:	0f 1f 40 00          	nopl   0x0(%rax)
    3468:	c5 fe 6f 14 06       	vmovdqu (%rsi,%rax,1),%ymm2
    346d:	c5 fd 73 d2 20       	vpsrlq $0x20,%ymm2,%ymm0
    3472:	c5 ed f4 cb          	vpmuludq %ymm3,%ymm2,%ymm1
    3476:	c5 fd f4 c3          	vpmuludq %ymm3,%ymm0,%ymm0
    347a:	c5 dd f4 d2          	vpmuludq %ymm2,%ymm4,%ymm2
    347e:	c5 fd d4 c2          	vpaddq %ymm2,%ymm0,%ymm0
    3482:	c5 fd 73 f0 20       	vpsllq $0x20,%ymm0,%ymm0
    3487:	c5 f5 d4 c0          	vpaddq %ymm0,%ymm1,%ymm0
    348b:	c5 fd d4 04 02       	vpaddq (%rdx,%rax,1),%ymm0,%ymm0
    3490:	c5 fe 7f 04 02       	vmovdqu %ymm0,(%rdx,%rax,1)
    3495:	48 83 c0 20          	add    $0x20,%rax
    3499:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    349f:	75 c7                	jne    3468 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x68>
    34a1:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    34a8:	4c 39 cf             	cmp    %r9,%rdi
    34ab:	75 81                	jne    342e <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    34ad:	4c 8d 4f 08          	lea    0x8(%rdi),%r9
    34b1:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    34b8:	49 39 d9             	cmp    %rbx,%r9
    34bb:	0f 85 5f ff ff ff    	jne    3420 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x20>
    34c1:	c5 f8 77             	vzeroupper 
    34c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    34c8:	c9                   	leaveq 
    34c9:	c3                   	retq   
    34ca:	31 c0                	xor    %eax,%eax
    34cc:	0f 1f 40 00          	nopl   0x0(%rax)
    34d0:	48 8b 0f             	mov    (%rdi),%rcx
    34d3:	48 0f af 0c c6       	imul   (%rsi,%rax,8),%rcx
    34d8:	48 01 0c c2          	add    %rcx,(%rdx,%rax,8)
    34dc:	48 ff c0             	inc    %rax
    34df:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    34e5:	75 e9                	jne    34d0 <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xd0>
    34e7:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    34ee:	4c 39 cf             	cmp    %r9,%rdi
    34f1:	0f 85 37 ff ff ff    	jne    342e <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0x2e>
    34f7:	eb b4                	jmp    34ad <void kij<long>(long (*) [128], long (*) [128], long (*) [128])+0xad>
    34f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003500 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3500:	f3 0f 1e fa          	endbr64 
    3504:	41 54                	push   %r12
    3506:	49 89 d1             	mov    %rdx,%r9
    3509:	49 89 fc             	mov    %rdi,%r12
    350c:	55                   	push   %rbp
    350d:	48 8d ae 00 08 00 00 	lea    0x800(%rsi),%rbp
    3514:	53                   	push   %rbx
    3515:	48 89 f3             	mov    %rsi,%rbx
    3518:	4d 89 e2             	mov    %r12,%r10
    351b:	49 89 d8             	mov    %rbx,%r8
    351e:	4c 8d 9b 00 00 04 00 	lea    0x40000(%rbx),%r11
    3525:	31 c0                	xor    %eax,%eax
    3527:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    352e:	00 00 
    3530:	49 8b 48 08          	mov    0x8(%r8),%rcx
    3534:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    3538:	48 0f af d1          	imul   %rcx,%rdx
    353c:	49 8b 4c 01 08       	mov    0x8(%r9,%rax,1),%rcx
    3541:	49 0f af 08          	imul   (%r8),%rcx
    3545:	48 01 d1             	add    %rdx,%rcx
    3548:	49 8b 14 01          	mov    (%r9,%rax,1),%rdx
    354c:	c4 c2 cb f6 38       	mulx   (%r8),%rsi,%rdi
    3551:	48 01 cf             	add    %rcx,%rdi
    3554:	49 01 34 02          	add    %rsi,(%r10,%rax,1)
    3558:	49 11 7c 02 08       	adc    %rdi,0x8(%r10,%rax,1)
    355d:	48 83 c0 10          	add    $0x10,%rax
    3561:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    3567:	75 c7                	jne    3530 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x30>
    3569:	49 81 c0 00 08 00 00 	add    $0x800,%r8
    3570:	49 81 c2 00 08 00 00 	add    $0x800,%r10
    3577:	4d 39 d8             	cmp    %r11,%r8
    357a:	75 a9                	jne    3525 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    357c:	48 83 c3 10          	add    $0x10,%rbx
    3580:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3587:	48 39 dd             	cmp    %rbx,%rbp
    358a:	75 8c                	jne    3518 <void kij<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x18>
    358c:	5b                   	pop    %rbx
    358d:	5d                   	pop    %rbp
    358e:	41 5c                	pop    %r12
    3590:	c3                   	retq   
    3591:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3598:	00 00 00 00 
    359c:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000035a0 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])>:
    35a0:	f3 0f 1e fa          	endbr64 
    35a4:	55                   	push   %rbp
    35a5:	49 89 fb             	mov    %rdi,%r11
    35a8:	48 89 d1             	mov    %rdx,%rcx
    35ab:	48 89 e5             	mov    %rsp,%rbp
    35ae:	41 54                	push   %r12
    35b0:	4c 8d 8f 00 00 01 00 	lea    0x10000(%rdi),%r9
    35b7:	45 31 e4             	xor    %r12d,%r12d
    35ba:	53                   	push   %rbx
    35bb:	48 89 f3             	mov    %rsi,%rbx
    35be:	4c 89 df             	mov    %r11,%rdi
    35c1:	48 89 de             	mov    %rbx,%rsi
    35c4:	4c 8d 51 04          	lea    0x4(%rcx),%r10
    35c8:	e9 8a 01 00 00       	jmpq   3757 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b7>
    35cd:	48 89 d0             	mov    %rdx,%rax
    35d0:	4c 29 d0             	sub    %r10,%rax
    35d3:	48 83 f8 18          	cmp    $0x18,%rax
    35d7:	0f 86 9e 01 00 00    	jbe    377b <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1db>
    35dd:	c4 e2 7d 18 06       	vbroadcastss (%rsi),%ymm0
    35e2:	c5 fc 10 09          	vmovups (%rcx),%ymm1
    35e6:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    35ed:	c4 e2 7d a8 0a       	vfmadd213ps (%rdx),%ymm0,%ymm1
    35f2:	c5 fc 11 0a          	vmovups %ymm1,(%rdx)
    35f6:	c5 fc 10 49 20       	vmovups 0x20(%rcx),%ymm1
    35fb:	c4 e2 7d a8 4a 20    	vfmadd213ps 0x20(%rdx),%ymm0,%ymm1
    3601:	c5 fc 11 4a 20       	vmovups %ymm1,0x20(%rdx)
    3606:	c5 fc 10 49 40       	vmovups 0x40(%rcx),%ymm1
    360b:	c4 e2 7d a8 4a 40    	vfmadd213ps 0x40(%rdx),%ymm0,%ymm1
    3611:	c5 fc 11 4a 40       	vmovups %ymm1,0x40(%rdx)
    3616:	c5 fc 10 49 60       	vmovups 0x60(%rcx),%ymm1
    361b:	c4 e2 7d a8 4a 60    	vfmadd213ps 0x60(%rdx),%ymm0,%ymm1
    3621:	c5 fc 11 4a 60       	vmovups %ymm1,0x60(%rdx)
    3626:	c5 fc 10 89 80 00 00 	vmovups 0x80(%rcx),%ymm1
    362d:	00 
    362e:	c4 e2 7d a8 8a 80 00 	vfmadd213ps 0x80(%rdx),%ymm0,%ymm1
    3635:	00 00 
    3637:	c5 fc 11 8a 80 00 00 	vmovups %ymm1,0x80(%rdx)
    363e:	00 
    363f:	c5 fc 10 89 a0 00 00 	vmovups 0xa0(%rcx),%ymm1
    3646:	00 
    3647:	c4 e2 7d a8 8a a0 00 	vfmadd213ps 0xa0(%rdx),%ymm0,%ymm1
    364e:	00 00 
    3650:	c5 fc 11 8a a0 00 00 	vmovups %ymm1,0xa0(%rdx)
    3657:	00 
    3658:	c5 fc 10 89 c0 00 00 	vmovups 0xc0(%rcx),%ymm1
    365f:	00 
    3660:	c4 e2 7d a8 8a c0 00 	vfmadd213ps 0xc0(%rdx),%ymm0,%ymm1
    3667:	00 00 
    3669:	c5 fc 11 8a c0 00 00 	vmovups %ymm1,0xc0(%rdx)
    3670:	00 
    3671:	c5 fc 10 89 e0 00 00 	vmovups 0xe0(%rcx),%ymm1
    3678:	00 
    3679:	c4 e2 7d a8 8a e0 00 	vfmadd213ps 0xe0(%rdx),%ymm0,%ymm1
    3680:	00 00 
    3682:	c5 fc 11 8a e0 00 00 	vmovups %ymm1,0xe0(%rdx)
    3689:	00 
    368a:	c5 fc 10 89 00 01 00 	vmovups 0x100(%rcx),%ymm1
    3691:	00 
    3692:	c4 e2 7d a8 8a 00 01 	vfmadd213ps 0x100(%rdx),%ymm0,%ymm1
    3699:	00 00 
    369b:	c5 fc 11 8a 00 01 00 	vmovups %ymm1,0x100(%rdx)
    36a2:	00 
    36a3:	c5 fc 10 89 20 01 00 	vmovups 0x120(%rcx),%ymm1
    36aa:	00 
    36ab:	c4 e2 7d a8 8a 20 01 	vfmadd213ps 0x120(%rdx),%ymm0,%ymm1
    36b2:	00 00 
    36b4:	c5 fc 11 8a 20 01 00 	vmovups %ymm1,0x120(%rdx)
    36bb:	00 
    36bc:	c5 fc 10 89 40 01 00 	vmovups 0x140(%rcx),%ymm1
    36c3:	00 
    36c4:	c4 e2 7d a8 8a 40 01 	vfmadd213ps 0x140(%rdx),%ymm0,%ymm1
    36cb:	00 00 
    36cd:	c5 fc 10 9a e0 01 00 	vmovups 0x1e0(%rdx),%ymm3
    36d4:	00 
    36d5:	c5 fc 11 8a 40 01 00 	vmovups %ymm1,0x140(%rdx)
    36dc:	00 
    36dd:	c5 fc 10 89 60 01 00 	vmovups 0x160(%rcx),%ymm1
    36e4:	00 
    36e5:	c4 e2 7d a8 8a 60 01 	vfmadd213ps 0x160(%rdx),%ymm0,%ymm1
    36ec:	00 00 
    36ee:	c5 fc 11 8a 60 01 00 	vmovups %ymm1,0x160(%rdx)
    36f5:	00 
    36f6:	c5 fc 10 89 80 01 00 	vmovups 0x180(%rcx),%ymm1
    36fd:	00 
    36fe:	c4 e2 7d a8 8a 80 01 	vfmadd213ps 0x180(%rdx),%ymm0,%ymm1
    3705:	00 00 
    3707:	c5 fc 11 8a 80 01 00 	vmovups %ymm1,0x180(%rdx)
    370e:	00 
    370f:	c5 fc 10 89 a0 01 00 	vmovups 0x1a0(%rcx),%ymm1
    3716:	00 
    3717:	c4 e2 7d a8 8a a0 01 	vfmadd213ps 0x1a0(%rdx),%ymm0,%ymm1
    371e:	00 00 
    3720:	c5 fc 11 8a a0 01 00 	vmovups %ymm1,0x1a0(%rdx)
    3727:	00 
    3728:	c5 fc 10 89 c0 01 00 	vmovups 0x1c0(%rcx),%ymm1
    372f:	00 
    3730:	c4 e2 7d a8 8a c0 01 	vfmadd213ps 0x1c0(%rdx),%ymm0,%ymm1
    3737:	00 00 
    3739:	c5 fc 11 8a c0 01 00 	vmovups %ymm1,0x1c0(%rdx)
    3740:	00 
    3741:	c4 e2 65 98 81 e0 01 	vfmadd132ps 0x1e0(%rcx),%ymm3,%ymm0
    3748:	00 00 
    374a:	c5 fc 11 82 e0 01 00 	vmovups %ymm0,0x1e0(%rdx)
    3751:	00 
    3752:	49 39 f9             	cmp    %rdi,%r9
    3755:	74 54                	je     37ab <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x20b>
    3757:	48 89 fa             	mov    %rdi,%rdx
    375a:	48 8d 46 04          	lea    0x4(%rsi),%rax
    375e:	48 81 c7 00 02 00 00 	add    $0x200,%rdi
    3765:	48 39 c2             	cmp    %rax,%rdx
    3768:	41 0f 93 c0          	setae  %r8b
    376c:	48 39 fe             	cmp    %rdi,%rsi
    376f:	0f 93 c0             	setae  %al
    3772:	41 08 c0             	or     %al,%r8b
    3775:	0f 85 52 fe ff ff    	jne    35cd <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x2d>
    377b:	31 c0                	xor    %eax,%eax
    377d:	0f 1f 00             	nopl   (%rax)
    3780:	c5 fa 10 14 82       	vmovss (%rdx,%rax,4),%xmm2
    3785:	c5 fa 10 06          	vmovss (%rsi),%xmm0
    3789:	c4 e2 69 99 04 81    	vfmadd132ss (%rcx,%rax,4),%xmm2,%xmm0
    378f:	c5 fa 11 04 82       	vmovss %xmm0,(%rdx,%rax,4)
    3794:	48 ff c0             	inc    %rax
    3797:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    379d:	75 e1                	jne    3780 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1e0>
    379f:	48 81 c6 00 02 00 00 	add    $0x200,%rsi
    37a6:	49 39 f9             	cmp    %rdi,%r9
    37a9:	75 ac                	jne    3757 <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1b7>
    37ab:	49 ff c4             	inc    %r12
    37ae:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    37b5:	48 83 c3 04          	add    $0x4,%rbx
    37b9:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    37c0:	0f 85 f8 fd ff ff    	jne    35be <void kij<float>(float (*) [128], float (*) [128], float (*) [128])+0x1e>
    37c6:	c5 f8 77             	vzeroupper 
    37c9:	5b                   	pop    %rbx
    37ca:	41 5c                	pop    %r12
    37cc:	5d                   	pop    %rbp
    37cd:	c3                   	retq   
    37ce:	66 90                	xchg   %ax,%ax

00000000000037d0 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])>:
    37d0:	f3 0f 1e fa          	endbr64 
    37d4:	55                   	push   %rbp
    37d5:	49 89 fa             	mov    %rdi,%r10
    37d8:	4c 8d 8e 00 00 02 00 	lea    0x20000(%rsi),%r9
    37df:	48 89 e5             	mov    %rsp,%rbp
    37e2:	48 89 d1             	mov    %rdx,%rcx
    37e5:	53                   	push   %rbx
    37e6:	48 8d 9e 00 04 02 00 	lea    0x20400(%rsi),%rbx
    37ed:	4c 89 d7             	mov    %r10,%rdi
    37f0:	49 8d b1 00 00 fe ff 	lea    -0x20000(%r9),%rsi
    37f7:	4c 8d 59 08          	lea    0x8(%rcx),%r11
    37fb:	48 89 fa             	mov    %rdi,%rdx
    37fe:	48 8d 46 08          	lea    0x8(%rsi),%rax
    3802:	48 81 c7 00 04 00 00 	add    $0x400,%rdi
    3809:	48 39 c2             	cmp    %rax,%rdx
    380c:	41 0f 93 c0          	setae  %r8b
    3810:	48 39 fe             	cmp    %rdi,%rsi
    3813:	0f 93 c0             	setae  %al
    3816:	41 08 c0             	or     %al,%r8b
    3819:	74 56                	je     3871 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa1>
    381b:	48 89 d0             	mov    %rdx,%rax
    381e:	4c 29 d8             	sub    %r11,%rax
    3821:	48 83 f8 10          	cmp    $0x10,%rax
    3825:	76 4a                	jbe    3871 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa1>
    3827:	c4 e2 7d 19 0e       	vbroadcastsd (%rsi),%ymm1
    382c:	31 c0                	xor    %eax,%eax
    382e:	66 90                	xchg   %ax,%ax
    3830:	c5 fd 10 04 01       	vmovupd (%rcx,%rax,1),%ymm0
    3835:	c4 e2 f5 a8 04 02    	vfmadd213pd (%rdx,%rax,1),%ymm1,%ymm0
    383b:	c5 fd 11 04 02       	vmovupd %ymm0,(%rdx,%rax,1)
    3840:	48 83 c0 20          	add    $0x20,%rax
    3844:	48 3d 00 04 00 00    	cmp    $0x400,%rax
    384a:	75 e4                	jne    3830 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x60>
    384c:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    3853:	4c 39 ce             	cmp    %r9,%rsi
    3856:	75 a3                	jne    37fb <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2b>
    3858:	4c 8d 4e 08          	lea    0x8(%rsi),%r9
    385c:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3863:	49 39 d9             	cmp    %rbx,%r9
    3866:	75 85                	jne    37ed <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x1d>
    3868:	c5 f8 77             	vzeroupper 
    386b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    386f:	c9                   	leaveq 
    3870:	c3                   	retq   
    3871:	31 c0                	xor    %eax,%eax
    3873:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    3878:	c5 fb 10 14 c2       	vmovsd (%rdx,%rax,8),%xmm2
    387d:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    3881:	c4 e2 e9 99 04 c1    	vfmadd132sd (%rcx,%rax,8),%xmm2,%xmm0
    3887:	c5 fb 11 04 c2       	vmovsd %xmm0,(%rdx,%rax,8)
    388c:	48 ff c0             	inc    %rax
    388f:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3895:	75 e1                	jne    3878 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0xa8>
    3897:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
    389e:	4c 39 ce             	cmp    %r9,%rsi
    38a1:	0f 85 54 ff ff ff    	jne    37fb <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x2b>
    38a7:	eb af                	jmp    3858 <void kij<double>(double (*) [128], double (*) [128], double (*) [128])+0x88>
    38a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000038b0 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    38b0:	f3 0f 1e fa          	endbr64 
    38b4:	49 89 f0             	mov    %rsi,%r8
    38b7:	49 89 f9             	mov    %rdi,%r9
    38ba:	48 89 d6             	mov    %rdx,%rsi
    38bd:	4d 8d 90 00 08 00 00 	lea    0x800(%r8),%r10
    38c4:	4c 89 ca             	mov    %r9,%rdx
    38c7:	4c 89 c1             	mov    %r8,%rcx
    38ca:	49 8d b8 00 00 04 00 	lea    0x40000(%r8),%rdi
    38d1:	31 c0                	xor    %eax,%eax
    38d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    38d8:	db 29                	fldt   (%rcx)
    38da:	db 2c 06             	fldt   (%rsi,%rax,1)
    38dd:	de c9                	fmulp  %st,%st(1)
    38df:	db 2c 02             	fldt   (%rdx,%rax,1)
    38e2:	de c1                	faddp  %st,%st(1)
    38e4:	db 3c 02             	fstpt  (%rdx,%rax,1)
    38e7:	48 83 c0 10          	add    $0x10,%rax
    38eb:	48 3d 00 08 00 00    	cmp    $0x800,%rax
    38f1:	75 e5                	jne    38d8 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x28>
    38f3:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    38fa:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    3901:	48 39 f9             	cmp    %rdi,%rcx
    3904:	75 cb                	jne    38d1 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x21>
    3906:	49 83 c0 10          	add    $0x10,%r8
    390a:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3911:	4d 39 c2             	cmp    %r8,%r10
    3914:	75 ae                	jne    38c4 <void kij<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x14>
    3916:	c3                   	retq   
    3917:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    391e:	00 00 

0000000000003920 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    3920:	f3 0f 1e fa          	endbr64 
    3924:	41 57                	push   %r15
    3926:	48 8d 86 00 08 00 00 	lea    0x800(%rsi),%rax
    392d:	41 56                	push   %r14
    392f:	49 89 f6             	mov    %rsi,%r14
    3932:	41 55                	push   %r13
    3934:	41 54                	push   %r12
    3936:	49 89 d4             	mov    %rdx,%r12
    3939:	55                   	push   %rbp
    393a:	53                   	push   %rbx
    393b:	48 83 ec 18          	sub    $0x18,%rsp
    393f:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    3944:	48 89 04 24          	mov    %rax,(%rsp)
    3948:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    394d:	4c 89 f5             	mov    %r14,%rbp
    3950:	4d 8d ae 00 00 04 00 	lea    0x40000(%r14),%r13
    3957:	45 31 ff             	xor    %r15d,%r15d
    395a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    3960:	c4 81 79 6f 0c 3c    	vmovdqa (%r12,%r15,1),%xmm1
    3966:	c5 f9 6f 45 00       	vmovdqa 0x0(%rbp),%xmm0
    396b:	e8 10 d8 ff ff       	callq  1180 <__multf3@plt>
    3970:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    3974:	c4 a1 79 6f 04 3b    	vmovdqa (%rbx,%r15,1),%xmm0
    397a:	e8 61 d8 ff ff       	callq  11e0 <__addtf3@plt>
    397f:	c4 a1 79 7f 04 3b    	vmovdqa %xmm0,(%rbx,%r15,1)
    3985:	49 83 c7 10          	add    $0x10,%r15
    3989:	49 81 ff 00 08 00 00 	cmp    $0x800,%r15
    3990:	75 ce                	jne    3960 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x40>
    3992:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3999:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    39a0:	4c 39 ed             	cmp    %r13,%rbp
    39a3:	75 b2                	jne    3957 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    39a5:	49 83 c6 10          	add    $0x10,%r14
    39a9:	49 81 c4 00 08 00 00 	add    $0x800,%r12
    39b0:	4c 39 34 24          	cmp    %r14,(%rsp)
    39b4:	75 92                	jne    3948 <void kij<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x28>
    39b6:	48 83 c4 18          	add    $0x18,%rsp
    39ba:	5b                   	pop    %rbx
    39bb:	5d                   	pop    %rbp
    39bc:	41 5c                	pop    %r12
    39be:	41 5d                	pop    %r13
    39c0:	41 5e                	pop    %r14
    39c2:	41 5f                	pop    %r15
    39c4:	c3                   	retq   
    39c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    39cc:	00 00 00 00 

00000000000039d0 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])>:
    39d0:	f3 0f 1e fa          	endbr64 
    39d4:	55                   	push   %rbp
    39d5:	49 89 d2             	mov    %rdx,%r10
    39d8:	45 31 db             	xor    %r11d,%r11d
    39db:	53                   	push   %rbx
    39dc:	48 8d af 00 80 00 00 	lea    0x8000(%rdi),%rbp
    39e3:	48 89 f3             	mov    %rsi,%rbx
    39e6:	4c 8d 87 00 81 00 00 	lea    0x8100(%rdi),%r8
    39ed:	48 89 ee             	mov    %rbp,%rsi
    39f0:	4e 8d 0c 5b          	lea    (%rbx,%r11,2),%r9
    39f4:	4c 89 d7             	mov    %r10,%rdi
    39f7:	48 8d 86 00 80 ff ff 	lea    -0x8000(%rsi),%rax
    39fe:	4c 89 c9             	mov    %r9,%rcx
    3a01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3a08:	0f b7 11             	movzwl (%rcx),%edx
    3a0b:	48 81 c1 00 01 00 00 	add    $0x100,%rcx
    3a12:	66 0f af 17          	imul   (%rdi),%dx
    3a16:	66 01 10             	add    %dx,(%rax)
    3a19:	48 05 00 01 00 00    	add    $0x100,%rax
    3a1f:	48 39 c6             	cmp    %rax,%rsi
    3a22:	75 e4                	jne    3a08 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x38>
    3a24:	48 83 c6 02          	add    $0x2,%rsi
    3a28:	48 83 c7 02          	add    $0x2,%rdi
    3a2c:	49 39 f0             	cmp    %rsi,%r8
    3a2f:	75 c6                	jne    39f7 <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x27>
    3a31:	49 ff c3             	inc    %r11
    3a34:	49 81 c2 00 01 00 00 	add    $0x100,%r10
    3a3b:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    3a42:	75 a9                	jne    39ed <void kji<short>(short (*) [128], short (*) [128], short (*) [128])+0x1d>
    3a44:	5b                   	pop    %rbx
    3a45:	5d                   	pop    %rbp
    3a46:	c3                   	retq   
    3a47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3a4e:	00 00 

0000000000003a50 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])>:
    3a50:	f3 0f 1e fa          	endbr64 
    3a54:	55                   	push   %rbp
    3a55:	49 89 d2             	mov    %rdx,%r10
    3a58:	45 31 db             	xor    %r11d,%r11d
    3a5b:	53                   	push   %rbx
    3a5c:	48 8d af 00 00 01 00 	lea    0x10000(%rdi),%rbp
    3a63:	48 89 f3             	mov    %rsi,%rbx
    3a66:	4c 8d 87 00 02 01 00 	lea    0x10200(%rdi),%r8
    3a6d:	48 89 ee             	mov    %rbp,%rsi
    3a70:	4e 8d 0c 9b          	lea    (%rbx,%r11,4),%r9
    3a74:	4c 89 d7             	mov    %r10,%rdi
    3a77:	48 8d 86 00 00 ff ff 	lea    -0x10000(%rsi),%rax
    3a7e:	4c 89 c9             	mov    %r9,%rcx
    3a81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3a88:	8b 11                	mov    (%rcx),%edx
    3a8a:	48 81 c1 00 02 00 00 	add    $0x200,%rcx
    3a91:	0f af 17             	imul   (%rdi),%edx
    3a94:	01 10                	add    %edx,(%rax)
    3a96:	48 05 00 02 00 00    	add    $0x200,%rax
    3a9c:	48 39 c6             	cmp    %rax,%rsi
    3a9f:	75 e7                	jne    3a88 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x38>
    3aa1:	48 83 c6 04          	add    $0x4,%rsi
    3aa5:	48 83 c7 04          	add    $0x4,%rdi
    3aa9:	4c 39 c6             	cmp    %r8,%rsi
    3aac:	75 c9                	jne    3a77 <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x27>
    3aae:	49 ff c3             	inc    %r11
    3ab1:	49 81 c2 00 02 00 00 	add    $0x200,%r10
    3ab8:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    3abf:	75 ac                	jne    3a6d <void kji<int>(int (*) [128], int (*) [128], int (*) [128])+0x1d>
    3ac1:	5b                   	pop    %rbx
    3ac2:	5d                   	pop    %rbp
    3ac3:	c3                   	retq   
    3ac4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3acb:	00 00 00 00 
    3acf:	90                   	nop

0000000000003ad0 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])>:
    3ad0:	f3 0f 1e fa          	endbr64 
    3ad4:	55                   	push   %rbp
    3ad5:	49 89 d2             	mov    %rdx,%r10
    3ad8:	45 31 db             	xor    %r11d,%r11d
    3adb:	53                   	push   %rbx
    3adc:	48 8d af 00 00 02 00 	lea    0x20000(%rdi),%rbp
    3ae3:	48 89 f3             	mov    %rsi,%rbx
    3ae6:	4c 8d 87 00 04 02 00 	lea    0x20400(%rdi),%r8
    3aed:	48 89 ee             	mov    %rbp,%rsi
    3af0:	4e 8d 0c db          	lea    (%rbx,%r11,8),%r9
    3af4:	4c 89 d7             	mov    %r10,%rdi
    3af7:	48 8d 86 00 00 fe ff 	lea    -0x20000(%rsi),%rax
    3afe:	4c 89 c9             	mov    %r9,%rcx
    3b01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3b08:	48 8b 11             	mov    (%rcx),%rdx
    3b0b:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    3b12:	48 0f af 17          	imul   (%rdi),%rdx
    3b16:	48 01 10             	add    %rdx,(%rax)
    3b19:	48 05 00 04 00 00    	add    $0x400,%rax
    3b1f:	48 39 c6             	cmp    %rax,%rsi
    3b22:	75 e4                	jne    3b08 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x38>
    3b24:	48 83 c6 08          	add    $0x8,%rsi
    3b28:	48 83 c7 08          	add    $0x8,%rdi
    3b2c:	4c 39 c6             	cmp    %r8,%rsi
    3b2f:	75 c6                	jne    3af7 <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x27>
    3b31:	49 ff c3             	inc    %r11
    3b34:	49 81 c2 00 04 00 00 	add    $0x400,%r10
    3b3b:	49 81 fb 80 00 00 00 	cmp    $0x80,%r11
    3b42:	75 a9                	jne    3aed <void kji<long>(long (*) [128], long (*) [128], long (*) [128])+0x1d>
    3b44:	5b                   	pop    %rbx
    3b45:	5d                   	pop    %rbp
    3b46:	c3                   	retq   
    3b47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3b4e:	00 00 

0000000000003b50 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>:
    3b50:	f3 0f 1e fa          	endbr64 
    3b54:	41 57                	push   %r15
    3b56:	41 56                	push   %r14
    3b58:	4c 8d b7 00 00 04 00 	lea    0x40000(%rdi),%r14
    3b5f:	41 55                	push   %r13
    3b61:	49 89 f5             	mov    %rsi,%r13
    3b64:	41 54                	push   %r12
    3b66:	45 31 e4             	xor    %r12d,%r12d
    3b69:	55                   	push   %rbp
    3b6a:	48 89 d5             	mov    %rdx,%rbp
    3b6d:	53                   	push   %rbx
    3b6e:	48 8d 9f 00 08 04 00 	lea    0x40800(%rdi),%rbx
    3b75:	4d 89 e3             	mov    %r12,%r11
    3b78:	49 c1 e3 04          	shl    $0x4,%r11
    3b7c:	4d 89 f2             	mov    %r14,%r10
    3b7f:	4d 01 eb             	add    %r13,%r11
    3b82:	48 89 ef             	mov    %rbp,%rdi
    3b85:	49 8d b2 00 00 fc ff 	lea    -0x40000(%r10),%rsi
    3b8c:	4c 89 d9             	mov    %r11,%rcx
    3b8f:	90                   	nop
    3b90:	48 8b 51 08          	mov    0x8(%rcx),%rdx
    3b94:	48 8b 07             	mov    (%rdi),%rax
    3b97:	48 0f af c2          	imul   %rdx,%rax
    3b9b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
    3b9f:	48 0f af 11          	imul   (%rcx),%rdx
    3ba3:	4c 8d 3c 02          	lea    (%rdx,%rax,1),%r15
    3ba7:	48 8b 07             	mov    (%rdi),%rax
    3baa:	48 89 c2             	mov    %rax,%rdx
    3bad:	c4 62 bb f6 09       	mulx   (%rcx),%r8,%r9
    3bb2:	4d 01 f9             	add    %r15,%r9
    3bb5:	4c 01 06             	add    %r8,(%rsi)
    3bb8:	4c 11 4e 08          	adc    %r9,0x8(%rsi)
    3bbc:	48 81 c6 00 08 00 00 	add    $0x800,%rsi
    3bc3:	48 81 c1 00 08 00 00 	add    $0x800,%rcx
    3bca:	49 39 f2             	cmp    %rsi,%r10
    3bcd:	75 c1                	jne    3b90 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x40>
    3bcf:	49 83 c2 10          	add    $0x10,%r10
    3bd3:	48 83 c7 10          	add    $0x10,%rdi
    3bd7:	49 39 da             	cmp    %rbx,%r10
    3bda:	75 a9                	jne    3b85 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x35>
    3bdc:	49 ff c4             	inc    %r12
    3bdf:	48 81 c5 00 08 00 00 	add    $0x800,%rbp
    3be6:	49 81 fc 80 00 00 00 	cmp    $0x80,%r12
    3bed:	75 86                	jne    3b75 <void kji<__int128>(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])+0x25>
    3bef:	5b                   	pop    %rbx
    3bf0:	5d                   	pop    %rbp
    3bf1:	41 5c                	pop    %r12
    3bf3:	41 5d                	pop    %r13
    3bf5:	41 5e                	pop    %r14
    3bf7:	41 5f                	pop    %r15
    3bf9:	c3                   	retq   
    3bfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003c00 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])>:
    3c00:	f3 0f 1e fa          	endbr64 
    3c04:	53                   	push   %rbx
    3c05:	49 89 f3             	mov    %rsi,%r11
    3c08:	48 8d 9f 00 00 01 00 	lea    0x10000(%rdi),%rbx
    3c0f:	49 89 d1             	mov    %rdx,%r9
    3c12:	45 31 d2             	xor    %r10d,%r10d
    3c15:	48 8d bf 00 02 01 00 	lea    0x10200(%rdi),%rdi
    3c1c:	48 89 d9             	mov    %rbx,%rcx
    3c1f:	4f 8d 04 93          	lea    (%r11,%r10,4),%r8
    3c23:	4c 89 ce             	mov    %r9,%rsi
    3c26:	48 8d 81 00 00 ff ff 	lea    -0x10000(%rcx),%rax
    3c2d:	4c 89 c2             	mov    %r8,%rdx
    3c30:	c5 fa 10 02          	vmovss (%rdx),%xmm0
    3c34:	c5 fa 10 08          	vmovss (%rax),%xmm1
    3c38:	48 05 00 02 00 00    	add    $0x200,%rax
    3c3e:	c4 e2 71 99 06       	vfmadd132ss (%rsi),%xmm1,%xmm0
    3c43:	48 81 c2 00 02 00 00 	add    $0x200,%rdx
    3c4a:	c5 fa 11 80 00 fe ff 	vmovss %xmm0,-0x200(%rax)
    3c51:	ff 
    3c52:	48 39 c1             	cmp    %rax,%rcx
    3c55:	75 d9                	jne    3c30 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x30>
    3c57:	48 83 c1 04          	add    $0x4,%rcx
    3c5b:	48 83 c6 04          	add    $0x4,%rsi
    3c5f:	48 39 f9             	cmp    %rdi,%rcx
    3c62:	75 c2                	jne    3c26 <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x26>
    3c64:	49 ff c2             	inc    %r10
    3c67:	49 81 c1 00 02 00 00 	add    $0x200,%r9
    3c6e:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    3c75:	75 a5                	jne    3c1c <void kji<float>(float (*) [128], float (*) [128], float (*) [128])+0x1c>
    3c77:	5b                   	pop    %rbx
    3c78:	c3                   	retq   
    3c79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003c80 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])>:
    3c80:	f3 0f 1e fa          	endbr64 
    3c84:	53                   	push   %rbx
    3c85:	49 89 f3             	mov    %rsi,%r11
    3c88:	48 8d 9f 00 00 02 00 	lea    0x20000(%rdi),%rbx
    3c8f:	49 89 d1             	mov    %rdx,%r9
    3c92:	45 31 d2             	xor    %r10d,%r10d
    3c95:	48 8d bf 00 04 02 00 	lea    0x20400(%rdi),%rdi
    3c9c:	48 89 d9             	mov    %rbx,%rcx
    3c9f:	4f 8d 04 d3          	lea    (%r11,%r10,8),%r8
    3ca3:	4c 89 ce             	mov    %r9,%rsi
    3ca6:	48 8d 81 00 00 fe ff 	lea    -0x20000(%rcx),%rax
    3cad:	4c 89 c2             	mov    %r8,%rdx
    3cb0:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    3cb4:	c5 fb 10 08          	vmovsd (%rax),%xmm1
    3cb8:	48 05 00 04 00 00    	add    $0x400,%rax
    3cbe:	c4 e2 f1 99 06       	vfmadd132sd (%rsi),%xmm1,%xmm0
    3cc3:	48 81 c2 00 04 00 00 	add    $0x400,%rdx
    3cca:	c5 fb 11 80 00 fc ff 	vmovsd %xmm0,-0x400(%rax)
    3cd1:	ff 
    3cd2:	48 39 c1             	cmp    %rax,%rcx
    3cd5:	75 d9                	jne    3cb0 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x30>
    3cd7:	48 83 c1 08          	add    $0x8,%rcx
    3cdb:	48 83 c6 08          	add    $0x8,%rsi
    3cdf:	48 39 f9             	cmp    %rdi,%rcx
    3ce2:	75 c2                	jne    3ca6 <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x26>
    3ce4:	49 ff c2             	inc    %r10
    3ce7:	49 81 c1 00 04 00 00 	add    $0x400,%r9
    3cee:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    3cf5:	75 a5                	jne    3c9c <void kji<double>(double (*) [128], double (*) [128], double (*) [128])+0x1c>
    3cf7:	5b                   	pop    %rbx
    3cf8:	c3                   	retq   
    3cf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003d00 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])>:
    3d00:	f3 0f 1e fa          	endbr64 
    3d04:	53                   	push   %rbx
    3d05:	49 89 f3             	mov    %rsi,%r11
    3d08:	49 89 d1             	mov    %rdx,%r9
    3d0b:	45 31 d2             	xor    %r10d,%r10d
    3d0e:	48 8d 9f 00 00 04 00 	lea    0x40000(%rdi),%rbx
    3d15:	4c 8d 87 00 08 04 00 	lea    0x40800(%rdi),%r8
    3d1c:	4c 89 d7             	mov    %r10,%rdi
    3d1f:	48 c1 e7 04          	shl    $0x4,%rdi
    3d23:	48 89 d9             	mov    %rbx,%rcx
    3d26:	4c 01 df             	add    %r11,%rdi
    3d29:	4c 89 ce             	mov    %r9,%rsi
    3d2c:	48 8d 81 00 00 fc ff 	lea    -0x40000(%rcx),%rax
    3d33:	48 89 fa             	mov    %rdi,%rdx
    3d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3d3d:	00 00 00 
    3d40:	db 2a                	fldt   (%rdx)
    3d42:	48 05 00 08 00 00    	add    $0x800,%rax
    3d48:	48 81 c2 00 08 00 00 	add    $0x800,%rdx
    3d4f:	db 2e                	fldt   (%rsi)
    3d51:	de c9                	fmulp  %st,%st(1)
    3d53:	db a8 00 f8 ff ff    	fldt   -0x800(%rax)
    3d59:	de c1                	faddp  %st,%st(1)
    3d5b:	db b8 00 f8 ff ff    	fstpt  -0x800(%rax)
    3d61:	48 39 c1             	cmp    %rax,%rcx
    3d64:	75 da                	jne    3d40 <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x40>
    3d66:	48 83 c1 10          	add    $0x10,%rcx
    3d6a:	48 83 c6 10          	add    $0x10,%rsi
    3d6e:	4c 39 c1             	cmp    %r8,%rcx
    3d71:	75 b9                	jne    3d2c <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x2c>
    3d73:	49 ff c2             	inc    %r10
    3d76:	49 81 c1 00 08 00 00 	add    $0x800,%r9
    3d7d:	49 81 fa 80 00 00 00 	cmp    $0x80,%r10
    3d84:	75 96                	jne    3d1c <void kji<long double>(long double (*) [128], long double (*) [128], long double (*) [128])+0x1c>
    3d86:	5b                   	pop    %rbx
    3d87:	c3                   	retq   
    3d88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    3d8f:	00 

0000000000003d90 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>:
    3d90:	f3 0f 1e fa          	endbr64 
    3d94:	41 57                	push   %r15
    3d96:	41 56                	push   %r14
    3d98:	4c 8d b7 00 08 04 00 	lea    0x40800(%rdi),%r14
    3d9f:	41 55                	push   %r13
    3da1:	41 54                	push   %r12
    3da3:	55                   	push   %rbp
    3da4:	53                   	push   %rbx
    3da5:	48 83 ec 28          	sub    $0x28,%rsp
    3da9:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    3dae:	48 8d 97 00 00 04 00 	lea    0x40000(%rdi),%rdx
    3db5:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
    3dba:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    3dc1:	00 
    3dc2:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
    3dc7:	4c 8b 2c 24          	mov    (%rsp),%r13
    3dcb:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
    3dd0:	49 c1 e5 04          	shl    $0x4,%r13
    3dd4:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
    3dd9:	4c 03 6c 24 10       	add    0x10(%rsp),%r13
    3dde:	48 8d 9d 00 00 fc ff 	lea    -0x40000(%rbp),%rbx
    3de5:	4d 89 ef             	mov    %r13,%r15
    3de8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    3def:	00 
    3df0:	c4 c1 79 6f 0c 24    	vmovdqa (%r12),%xmm1
    3df6:	c4 c1 79 6f 07       	vmovdqa (%r15),%xmm0
    3dfb:	48 81 c3 00 08 00 00 	add    $0x800,%rbx
    3e02:	e8 79 d3 ff ff       	callq  1180 <__multf3@plt>
    3e07:	c5 f9 6f c8          	vmovdqa %xmm0,%xmm1
    3e0b:	c5 f9 6f 83 00 f8 ff 	vmovdqa -0x800(%rbx),%xmm0
    3e12:	ff 
    3e13:	49 81 c7 00 08 00 00 	add    $0x800,%r15
    3e1a:	e8 c1 d3 ff ff       	callq  11e0 <__addtf3@plt>
    3e1f:	c5 f9 7f 83 00 f8 ff 	vmovdqa %xmm0,-0x800(%rbx)
    3e26:	ff 
    3e27:	48 39 dd             	cmp    %rbx,%rbp
    3e2a:	75 c4                	jne    3df0 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x60>
    3e2c:	48 83 c5 10          	add    $0x10,%rbp
    3e30:	49 83 c4 10          	add    $0x10,%r12
    3e34:	4c 39 f5             	cmp    %r14,%rbp
    3e37:	75 a5                	jne    3dde <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x4e>
    3e39:	48 ff 04 24          	incq   (%rsp)
    3e3d:	48 81 44 24 08 00 08 	addq   $0x800,0x8(%rsp)
    3e44:	00 00 
    3e46:	48 8b 04 24          	mov    (%rsp),%rax
    3e4a:	48 3d 80 00 00 00    	cmp    $0x80,%rax
    3e50:	0f 85 71 ff ff ff    	jne    3dc7 <void kji<__float128>(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])+0x37>
    3e56:	48 83 c4 28          	add    $0x28,%rsp
    3e5a:	5b                   	pop    %rbx
    3e5b:	5d                   	pop    %rbp
    3e5c:	41 5c                	pop    %r12
    3e5e:	41 5d                	pop    %r13
    3e60:	41 5e                	pop    %r14
    3e62:	41 5f                	pop    %r15
    3e64:	c3                   	retq   
    3e65:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e6c:	00 00 00 00 

0000000000003e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>:
    3e70:	48 89 f8             	mov    %rdi,%rax
    3e73:	c3                   	retq   
    3e74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e7b:	00 00 00 00 
    3e7f:	90                   	nop

0000000000003e80 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)>:
    3e80:	48 83 ec 18          	sub    $0x18,%rsp
    3e84:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3e8b:	00 00 
    3e8d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3e92:	31 c0                	xor    %eax,%eax
    3e94:	e8 d7 ff ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    3e99:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    3e9d:	48 89 fa             	mov    %rdi,%rdx
    3ea0:	48 89 f7             	mov    %rsi,%rdi
    3ea3:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    3ea8:	e8 c3 ff ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    3ead:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    3eb1:	48 89 e7             	mov    %rsp,%rdi
    3eb4:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    3eb8:	e8 b3 ff ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    3ebd:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    3ec1:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    3ec5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    3eca:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    3ed1:	00 00 
    3ed3:	75 05                	jne    3eda <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)+0x5a>
    3ed5:	48 83 c4 18          	add    $0x18,%rsp
    3ed9:	c3                   	retq   
    3eda:	e8 e1 d2 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    3edf:	90                   	nop

0000000000003ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    3ee0:	eb 9e                	jmp    3e80 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<double, std::ratio<1l, 1000l> > > >, std::is_move_constructible<std::chrono::duration<double, std::ratio<1l, 1000l> > >, std::is_move_assignable<std::chrono::duration<double, std::ratio<1l, 1000l> > > >::value, void>::type std::swap<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    3ee2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3ee9:	00 00 00 00 
    3eed:	0f 1f 00             	nopl   (%rax)

0000000000003ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    3ef0:	48 89 f8             	mov    %rdi,%rax
    3ef3:	c3                   	retq   
    3ef4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3efb:	00 00 00 00 
    3eff:	90                   	nop

0000000000003f00 <std::setw(int) [clone .constprop.0]>:
    3f00:	b8 08 00 00 00       	mov    $0x8,%eax
    3f05:	c3                   	retq   
    3f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f0d:	00 00 00 

0000000000003f10 <std::setprecision(int) [clone .constprop.0]>:
    3f10:	b8 02 00 00 00       	mov    $0x2,%eax
    3f15:	c3                   	retq   
    3f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f1d:	00 00 00 

0000000000003f20 <std::operator~(std::_Ios_Fmtflags) [clone .constprop.0]>:
    3f20:	b8 fb fe ff ff       	mov    $0xfffffefb,%eax
    3f25:	c3                   	retq   
    3f26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f2d:	00 00 00 

0000000000003f30 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__niter_wrap<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >* const&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .constprop.0] [clone .isra.0]>:
    3f30:	c3                   	retq   
    3f31:	90                   	nop
    3f32:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f39:	00 00 00 00 
    3f3d:	0f 1f 00             	nopl   (%rax)

0000000000003f40 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<double, void>(double const&) [clone .isra.0]>:
    3f40:	c5 fb 11 07          	vmovsd %xmm0,(%rdi)
    3f44:	c3                   	retq   
    3f45:	90                   	nop
    3f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3f4d:	00 00 00 

0000000000003f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>:
    3f50:	c3                   	retq   
    3f51:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f58:	00 00 00 00 
    3f5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003f60 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>:
    3f60:	e8 eb ff ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    3f65:	c5 fb 10 d0          	vmovsd %xmm0,%xmm0,%xmm2
    3f69:	c5 f3 10 c1          	vmovsd %xmm1,%xmm1,%xmm0
    3f6d:	e8 de ff ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    3f72:	c5 f9 2f c2          	vcomisd %xmm2,%xmm0
    3f76:	0f 97 c0             	seta   %al
    3f79:	c3                   	retq   
    3f7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>:
    3f80:	eb de                	jmp    3f60 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    3f82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f89:	00 00 00 00 
    3f8d:	0f 1f 00             	nopl   (%rax)

0000000000003f90 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    3f90:	48 83 ec 08          	sub    $0x8,%rsp
    3f94:	c5 fb 10 0a          	vmovsd (%rdx),%xmm1
    3f98:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    3f9c:	e8 df ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    3fa1:	84 c0                	test   %al,%al
    3fa3:	74 2b                	je     3fd0 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x40>
    3fa5:	c5 f3 10 c1          	vmovsd %xmm1,%xmm1,%xmm0
    3fa9:	c5 fb 10 09          	vmovsd (%rcx),%xmm1
    3fad:	e8 ce ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    3fb2:	84 c0                	test   %al,%al
    3fb4:	75 38                	jne    3fee <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5e>
    3fb6:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    3fba:	e8 c1 ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    3fbf:	84 c0                	test   %al,%al
    3fc1:	74 3d                	je     4000 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x70>
    3fc3:	48 89 ce             	mov    %rcx,%rsi
    3fc6:	48 83 c4 08          	add    $0x8,%rsp
    3fca:	e9 11 ff ff ff       	jmpq   3ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    3fcf:	90                   	nop
    3fd0:	c5 fb 10 09          	vmovsd (%rcx),%xmm1
    3fd4:	c5 fb 10 06          	vmovsd (%rsi),%xmm0
    3fd8:	e8 a3 ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    3fdd:	84 c0                	test   %al,%al
    3fdf:	75 1f                	jne    4000 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x70>
    3fe1:	c5 fb 10 02          	vmovsd (%rdx),%xmm0
    3fe5:	e8 96 ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    3fea:	84 c0                	test   %al,%al
    3fec:	75 d5                	jne    3fc3 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x33>
    3fee:	48 89 d6             	mov    %rdx,%rsi
    3ff1:	48 83 c4 08          	add    $0x8,%rsp
    3ff5:	e9 e6 fe ff ff       	jmpq   3ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    3ffa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4000:	48 83 c4 08          	add    $0x8,%rsp
    4004:	e9 d7 fe ff ff       	jmpq   3ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4009:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004010 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    4010:	41 54                	push   %r12
    4012:	49 89 fc             	mov    %rdi,%r12
    4015:	55                   	push   %rbp
    4016:	48 89 d5             	mov    %rdx,%rbp
    4019:	53                   	push   %rbx
    401a:	48 89 f3             	mov    %rsi,%rbx
    401d:	eb 05                	jmp    4024 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x14>
    401f:	90                   	nop
    4020:	49 83 c4 08          	add    $0x8,%r12
    4024:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    4029:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    402f:	e8 4c ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    4034:	84 c0                	test   %al,%al
    4036:	75 e8                	jne    4020 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x10>
    4038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    403f:	00 
    4040:	c5 fb 10 45 00       	vmovsd 0x0(%rbp),%xmm0
    4045:	c5 fb 10 4b f8       	vmovsd -0x8(%rbx),%xmm1
    404a:	48 83 eb 08          	sub    $0x8,%rbx
    404e:	e8 2d ff ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    4053:	84 c0                	test   %al,%al
    4055:	75 e9                	jne    4040 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    4057:	49 39 dc             	cmp    %rbx,%r12
    405a:	73 14                	jae    4070 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x60>
    405c:	48 89 de             	mov    %rbx,%rsi
    405f:	4c 89 e7             	mov    %r12,%rdi
    4062:	e8 79 fe ff ff       	callq  3ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4067:	eb b7                	jmp    4020 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x10>
    4069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4070:	5b                   	pop    %rbx
    4071:	5d                   	pop    %rbp
    4072:	4c 89 e0             	mov    %r12,%rax
    4075:	41 5c                	pop    %r12
    4077:	c3                   	retq   
    4078:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    407f:	00 

0000000000004080 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition_pivot<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>:
    4080:	41 55                	push   %r13
    4082:	48 89 f0             	mov    %rsi,%rax
    4085:	48 29 f8             	sub    %rdi,%rax
    4088:	41 54                	push   %r12
    408a:	48 89 c2             	mov    %rax,%rdx
    408d:	48 c1 fa 03          	sar    $0x3,%rdx
    4091:	48 c1 e8 3f          	shr    $0x3f,%rax
    4095:	55                   	push   %rbp
    4096:	48 01 d0             	add    %rdx,%rax
    4099:	4c 8d 6f 08          	lea    0x8(%rdi),%r13
    409d:	48 d1 f8             	sar    %rax
    40a0:	48 89 f5             	mov    %rsi,%rbp
    40a3:	48 8d 14 c7          	lea    (%rdi,%rax,8),%rdx
    40a7:	48 8d 4e f8          	lea    -0x8(%rsi),%rcx
    40ab:	4c 89 ee             	mov    %r13,%rsi
    40ae:	49 89 fc             	mov    %rdi,%r12
    40b1:	e8 da fe ff ff       	callq  3f90 <void std::__move_median_to_first<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    40b6:	48 89 ee             	mov    %rbp,%rsi
    40b9:	5d                   	pop    %rbp
    40ba:	4c 89 e2             	mov    %r12,%rdx
    40bd:	41 5c                	pop    %r12
    40bf:	4c 89 ef             	mov    %r13,%rdi
    40c2:	41 5d                	pop    %r13
    40c4:	e9 47 ff ff ff       	jmpq   4010 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    40c9:	90                   	nop
    40ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000040d0 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>:
    40d0:	e9 8b fe ff ff       	jmpq   3f60 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    40d5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    40dc:	00 00 00 00 

00000000000040e0 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)>:
    40e0:	48 83 ec 18          	sub    $0x18,%rsp
    40e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    40eb:	00 00 
    40ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    40f2:	31 c0                	xor    %eax,%eax
    40f4:	e8 77 fd ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    40f9:	c5 fb 10 18          	vmovsd (%rax),%xmm3
    40fd:	48 83 ef 08          	sub    $0x8,%rdi
    4101:	c5 fb 11 1c 24       	vmovsd %xmm3,(%rsp)
    4106:	eb 1a                	jmp    4122 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x42>
    4108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    410f:	00 
    4110:	e8 5b fd ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4115:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4119:	48 83 ef 08          	sub    $0x8,%rdi
    411d:	c5 fb 11 47 10       	vmovsd %xmm0,0x10(%rdi)
    4122:	c5 fb 10 0f          	vmovsd (%rdi),%xmm1
    4126:	c5 e3 10 c3          	vmovsd %xmm3,%xmm3,%xmm0
    412a:	48 8d 57 08          	lea    0x8(%rdi),%rdx
    412e:	e8 9d ff ff ff       	callq  40d0 <bool __gnu_cxx::__ops::_Val_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >&, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    4133:	84 c0                	test   %al,%al
    4135:	75 d9                	jne    4110 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x30>
    4137:	48 89 e7             	mov    %rsp,%rdi
    413a:	e8 31 fd ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    413f:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4143:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    4147:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    414c:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4153:	00 00 
    4155:	75 05                	jne    415c <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)+0x7c>
    4157:	48 83 c4 18          	add    $0x18,%rsp
    415b:	c3                   	retq   
    415c:	e8 5f d0 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    4161:	90                   	nop
    4162:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4169:	00 00 00 00 
    416d:	0f 1f 00             	nopl   (%rax)

0000000000004170 <bool __gnu_cxx::__ops::_Iter_less_val::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >&) const [clone .constprop.0] [clone .isra.0]>:
    4170:	e9 eb fd ff ff       	jmpq   3f60 <bool std::chrono::operator< <double, std::ratio<1l, 1000l>, double, std::ratio<1l, 1000l> >(std::chrono::duration<double, std::ratio<1l, 1000l> > const&, std::chrono::duration<double, std::ratio<1l, 1000l> > const&) [clone .isra.0]>
    4175:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    417c:	00 00 00 00 

0000000000004180 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]>:
    4180:	48 8d 46 ff          	lea    -0x1(%rsi),%rax
    4184:	49 89 d1             	mov    %rdx,%r9
    4187:	48 89 c2             	mov    %rax,%rdx
    418a:	48 c1 ea 3f          	shr    $0x3f,%rdx
    418e:	48 83 ec 08          	sub    $0x8,%rsp
    4192:	48 01 c2             	add    %rax,%rdx
    4195:	49 89 f8             	mov    %rdi,%r8
    4198:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    419d:	48 d1 fa             	sar    %rdx
    41a0:	c5 fb 10 c8          	vmovsd %xmm0,%xmm0,%xmm1
    41a4:	4c 39 ce             	cmp    %r9,%rsi
    41a7:	7f 33                	jg     41dc <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x5c>
    41a9:	eb 6a                	jmp    4215 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x95>
    41ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    41b0:	48 89 cf             	mov    %rcx,%rdi
    41b3:	e8 b8 fc ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    41b8:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    41bc:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    41c0:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
    41c4:	48 89 f0             	mov    %rsi,%rax
    41c7:	48 c1 e8 3f          	shr    $0x3f,%rax
    41cb:	48 01 f0             	add    %rsi,%rax
    41ce:	48 d1 f8             	sar    %rax
    41d1:	48 89 d6             	mov    %rdx,%rsi
    41d4:	49 39 d1             	cmp    %rdx,%r9
    41d7:	7d 37                	jge    4210 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x90>
    41d9:	48 89 c2             	mov    %rax,%rdx
    41dc:	49 8d 0c d0          	lea    (%r8,%rdx,8),%rcx
    41e0:	c5 fb 10 01          	vmovsd (%rcx),%xmm0
    41e4:	49 8d 34 f0          	lea    (%r8,%rsi,8),%rsi
    41e8:	e8 83 ff ff ff       	callq  4170 <bool __gnu_cxx::__ops::_Iter_less_val::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >&) const [clone .constprop.0] [clone .isra.0]>
    41ed:	84 c0                	test   %al,%al
    41ef:	75 bf                	jne    41b0 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x30>
    41f1:	48 89 e7             	mov    %rsp,%rdi
    41f4:	e8 77 fc ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    41f9:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    41fd:	c5 fb 11 06          	vmovsd %xmm0,(%rsi)
    4201:	48 83 c4 08          	add    $0x8,%rsp
    4205:	c3                   	retq   
    4206:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    420d:	00 00 00 
    4210:	48 89 ce             	mov    %rcx,%rsi
    4213:	eb dc                	jmp    41f1 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x71>
    4215:	48 8d 34 f7          	lea    (%rdi,%rsi,8),%rsi
    4219:	eb d6                	jmp    41f1 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]+0x71>
    421b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004220 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>:
    4220:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
    4224:	48 89 c1             	mov    %rax,%rcx
    4227:	48 c1 e9 3f          	shr    $0x3f,%rcx
    422b:	48 01 c1             	add    %rax,%rcx
    422e:	48 83 ec 08          	sub    $0x8,%rsp
    4232:	48 d1 f9             	sar    %rcx
    4235:	49 89 f8             	mov    %rdi,%r8
    4238:	49 89 f1             	mov    %rsi,%r9
    423b:	49 89 d2             	mov    %rdx,%r10
    423e:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    4243:	48 39 ce             	cmp    %rcx,%rsi
    4246:	7d 4a                	jge    4292 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x72>
    4248:	48 89 f2             	mov    %rsi,%rdx
    424b:	eb 06                	jmp    4253 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x33>
    424d:	0f 1f 00             	nopl   (%rax)
    4250:	48 89 f2             	mov    %rsi,%rdx
    4253:	48 8d 42 01          	lea    0x1(%rdx),%rax
    4257:	48 8d 34 00          	lea    (%rax,%rax,1),%rsi
    425b:	48 c1 e0 04          	shl    $0x4,%rax
    425f:	49 8d 3c 00          	lea    (%r8,%rax,1),%rdi
    4263:	c4 c1 7b 10 4c 00 f8 	vmovsd -0x8(%r8,%rax,1),%xmm1
    426a:	c5 fb 10 07          	vmovsd (%rdi),%xmm0
    426e:	e8 0d fd ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    4273:	84 c0                	test   %al,%al
    4275:	74 07                	je     427e <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x5e>
    4277:	48 ff ce             	dec    %rsi
    427a:	49 8d 3c f0          	lea    (%r8,%rsi,8),%rdi
    427e:	e8 ed fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4283:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4287:	c4 c1 7b 11 04 d0    	vmovsd %xmm0,(%r8,%rdx,8)
    428d:	48 39 ce             	cmp    %rcx,%rsi
    4290:	7c be                	jl     4250 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x30>
    4292:	41 f6 c2 01          	test   $0x1,%r10b
    4296:	75 16                	jne    42ae <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x8e>
    4298:	49 83 ea 02          	sub    $0x2,%r10
    429c:	4c 89 d0             	mov    %r10,%rax
    429f:	48 c1 e8 3f          	shr    $0x3f,%rax
    42a3:	49 01 c2             	add    %rax,%r10
    42a6:	49 d1 fa             	sar    %r10
    42a9:	49 39 f2             	cmp    %rsi,%r10
    42ac:	74 22                	je     42d0 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0xb0>
    42ae:	48 89 e7             	mov    %rsp,%rdi
    42b1:	e8 ba fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    42b6:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    42ba:	4c 89 ca             	mov    %r9,%rdx
    42bd:	4c 89 c7             	mov    %r8,%rdi
    42c0:	e8 bb fe ff ff       	callq  4180 <void std::__push_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_val&) [clone .isra.0]>
    42c5:	48 83 c4 08          	add    $0x8,%rsp
    42c9:	c3                   	retq   
    42ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    42d0:	48 8d 46 01          	lea    0x1(%rsi),%rax
    42d4:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
    42d8:	48 c1 e0 04          	shl    $0x4,%rax
    42dc:	49 8d 7c 00 f8       	lea    -0x8(%r8,%rax,1),%rdi
    42e1:	e8 8a fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    42e6:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    42ea:	c4 c1 7b 11 04 f0    	vmovsd %xmm0,(%r8,%rsi,8)
    42f0:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
    42f4:	eb b8                	jmp    42ae <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)+0x8e>
    42f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    42fd:	00 00 00 

0000000000004300 <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>:
    4300:	48 83 ec 18          	sub    $0x18,%rsp
    4304:	49 89 f8             	mov    %rdi,%r8
    4307:	48 89 d7             	mov    %rdx,%rdi
    430a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4311:	00 00 
    4313:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4318:	31 c0                	xor    %eax,%eax
    431a:	e8 51 fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    431f:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4323:	4c 89 c7             	mov    %r8,%rdi
    4326:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    432b:	e8 40 fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4330:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4334:	48 89 e7             	mov    %rsp,%rdi
    4337:	c5 fb 11 02          	vmovsd %xmm0,(%rdx)
    433b:	e8 30 fb ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4340:	4c 29 c6             	sub    %r8,%rsi
    4343:	48 c1 fe 03          	sar    $0x3,%rsi
    4347:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    434b:	48 89 f2             	mov    %rsi,%rdx
    434e:	4c 89 c7             	mov    %r8,%rdi
    4351:	31 f6                	xor    %esi,%esi
    4353:	e8 c8 fe ff ff       	callq  4220 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    4358:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    435d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4364:	00 00 
    4366:	75 05                	jne    436d <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x6d>
    4368:	48 83 c4 18          	add    $0x18,%rsp
    436c:	c3                   	retq   
    436d:	e8 4e ce ff ff       	callq  11c0 <__stack_chk_fail@plt>
    4372:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4379:	00 00 00 00 
    437d:	0f 1f 00             	nopl   (%rax)

0000000000004380 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>:
    4380:	41 54                	push   %r12
    4382:	48 29 fe             	sub    %rdi,%rsi
    4385:	55                   	push   %rbp
    4386:	53                   	push   %rbx
    4387:	48 83 ec 10          	sub    $0x10,%rsp
    438b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4392:	00 00 
    4394:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4399:	31 c0                	xor    %eax,%eax
    439b:	48 83 fe 08          	cmp    $0x8,%rsi
    439f:	7e 5d                	jle    43fe <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x7e>
    43a1:	48 89 f5             	mov    %rsi,%rbp
    43a4:	48 c1 fd 03          	sar    $0x3,%rbp
    43a8:	48 8d 45 fe          	lea    -0x2(%rbp),%rax
    43ac:	b9 02 00 00 00       	mov    $0x2,%ecx
    43b1:	48 99                	cqto   
    43b3:	48 f7 f9             	idiv   %rcx
    43b6:	48 89 fb             	mov    %rdi,%rbx
    43b9:	48 89 e7             	mov    %rsp,%rdi
    43bc:	49 89 c3             	mov    %rax,%r11
    43bf:	e8 ac fa ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    43c4:	49 89 c4             	mov    %rax,%r12
    43c7:	eb 0a                	jmp    43d3 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x53>
    43c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    43d0:	49 ff cb             	dec    %r11
    43d3:	4a 8d 3c db          	lea    (%rbx,%r11,8),%rdi
    43d7:	e8 94 fa ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    43dc:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    43e0:	48 89 ea             	mov    %rbp,%rdx
    43e3:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    43e8:	c4 c1 7b 10 04 24    	vmovsd (%r12),%xmm0
    43ee:	4c 89 de             	mov    %r11,%rsi
    43f1:	48 89 df             	mov    %rbx,%rdi
    43f4:	e8 27 fe ff ff       	callq  4220 <void std::__adjust_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, long, std::chrono::duration<double, std::ratio<1l, 1000l> >, __gnu_cxx::__ops::_Iter_less_iter)>
    43f9:	4d 85 db             	test   %r11,%r11
    43fc:	75 d2                	jne    43d0 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x50>
    43fe:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    4403:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    440a:	00 00 
    440c:	75 09                	jne    4417 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]+0x97>
    440e:	48 83 c4 10          	add    $0x10,%rsp
    4412:	5b                   	pop    %rbx
    4413:	5d                   	pop    %rbp
    4414:	41 5c                	pop    %r12
    4416:	c3                   	retq   
    4417:	e8 a4 cd ff ff       	callq  11c0 <__stack_chk_fail@plt>
    441c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004420 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    4420:	41 55                	push   %r13
    4422:	49 89 f5             	mov    %rsi,%r13
    4425:	41 54                	push   %r12
    4427:	49 89 d4             	mov    %rdx,%r12
    442a:	55                   	push   %rbp
    442b:	48 89 fd             	mov    %rdi,%rbp
    442e:	53                   	push   %rbx
    442f:	48 83 ec 08          	sub    $0x8,%rsp
    4433:	e8 48 ff ff ff       	callq  4380 <void std::__make_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>
    4438:	4d 39 e5             	cmp    %r12,%r13
    443b:	73 3d                	jae    447a <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5a>
    443d:	4c 89 eb             	mov    %r13,%rbx
    4440:	eb 0f                	jmp    4451 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x31>
    4442:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    4448:	48 83 c3 08          	add    $0x8,%rbx
    444c:	49 39 dc             	cmp    %rbx,%r12
    444f:	76 29                	jbe    447a <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x5a>
    4451:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    4456:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    445a:	e8 21 fb ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    445f:	84 c0                	test   %al,%al
    4461:	74 e5                	je     4448 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x28>
    4463:	48 89 da             	mov    %rbx,%rdx
    4466:	4c 89 ee             	mov    %r13,%rsi
    4469:	48 89 ef             	mov    %rbp,%rdi
    446c:	48 83 c3 08          	add    $0x8,%rbx
    4470:	e8 8b fe ff ff       	callq  4300 <void std::__pop_heap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter&) [clone .constprop.0]>
    4475:	49 39 dc             	cmp    %rbx,%r12
    4478:	77 d7                	ja     4451 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x31>
    447a:	48 83 c4 08          	add    $0x8,%rsp
    447e:	5b                   	pop    %rbx
    447f:	5d                   	pop    %rbp
    4480:	41 5c                	pop    %r12
    4482:	41 5d                	pop    %r13
    4484:	c3                   	retq   
    4485:	90                   	nop
    4486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    448d:	00 00 00 

0000000000004490 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>:
    4490:	48 89 f8             	mov    %rdi,%rax
    4493:	c3                   	retq   
    4494:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    449b:	00 00 00 00 
    449f:	90                   	nop

00000000000044a0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
    44a0:	48 89 37             	mov    %rsi,(%rdi)
    44a3:	c3                   	retq   
    44a4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    44ab:	00 00 00 00 
    44af:	90                   	nop

00000000000044b0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
    44b0:	48 89 f8             	mov    %rdi,%rax
    44b3:	c3                   	retq   
    44b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    44bb:	00 00 00 00 
    44bf:	90                   	nop

00000000000044c0 <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    44c0:	48 83 ec 18          	sub    $0x18,%rsp
    44c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    44cb:	00 00 
    44cd:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    44d2:	31 c0                	xor    %eax,%eax
    44d4:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
    44d8:	e8 d3 ff ff ff       	callq  44b0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    44dd:	c4 e1 fb 2a c0       	vcvtsi2sd %rax,%xmm0,%xmm0
    44e2:	48 89 e7             	mov    %rsp,%rdi
    44e5:	c5 fb 5e 05 fb 1e 00 	vdivsd 0x1efb(%rip),%xmm0,%xmm0        # 63e8 <_IO_stdin_used+0x3e8>
    44ec:	00 
    44ed:	e8 4e fa ff ff       	callq  3f40 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<double, void>(double const&) [clone .isra.0]>
    44f2:	c5 fb 10 04 24       	vmovsd (%rsp),%xmm0
    44f7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    44fc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4503:	00 00 
    4505:	75 05                	jne    450c <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x4c>
    4507:	48 83 c4 18          	add    $0x18,%rsp
    450b:	c3                   	retq   
    450c:	e8 af cc ff ff       	callq  11c0 <__stack_chk_fail@plt>
    4511:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4518:	00 00 00 00 
    451c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004520 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<double, std::ratio<1l, 1000l> > >::value, std::chrono::duration<double, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    4520:	eb 9e                	jmp    44c0 <std::chrono::duration<double, std::ratio<1l, 1000l> > std::chrono::__duration_cast_impl<std::chrono::duration<double, std::ratio<1l, 1000l> >, std::ratio<1l, 1000000l>, double, true, false>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    4522:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4529:	00 00 00 00 
    452d:	0f 1f 00             	nopl   (%rax)

0000000000004530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>:
    4530:	53                   	push   %rbx
    4531:	48 89 fb             	mov    %rdi,%rbx
    4534:	48 8b 3e             	mov    (%rsi),%rdi
    4537:	e8 e4 ff ff ff       	callq  4520 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<double, std::ratio<1l, 1000l> > >::value, std::chrono::duration<double, std::ratio<1l, 1000l> > >::type std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1l, 1000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    453c:	e8 0f fa ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    4541:	c5 fb 11 03          	vmovsd %xmm0,(%rbx)
    4545:	5b                   	pop    %rbx
    4546:	c3                   	retq   
    4547:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    454e:	00 00 

0000000000004550 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    4550:	48 83 ec 18          	sub    $0x18,%rsp
    4554:	49 89 f0             	mov    %rsi,%r8
    4557:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    455e:	00 00 
    4560:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4565:	31 c0                	xor    %eax,%eax
    4567:	e8 44 ff ff ff       	callq  44b0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    456c:	4c 89 c7             	mov    %r8,%rdi
    456f:	48 89 c6             	mov    %rax,%rsi
    4572:	e8 39 ff ff ff       	callq  44b0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    4577:	48 29 c6             	sub    %rax,%rsi
    457a:	48 89 e7             	mov    %rsp,%rdi
    457d:	e8 1e ff ff ff       	callq  44a0 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
    4582:	48 8b 04 24          	mov    (%rsp),%rax
    4586:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    458b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    4592:	00 00 
    4594:	75 05                	jne    459b <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x4b>
    4596:	48 83 c4 18          	add    $0x18,%rsp
    459a:	c3                   	retq   
    459b:	e8 20 cc ff ff       	callq  11c0 <__stack_chk_fail@plt>

00000000000045a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>:
    45a0:	48 83 ec 08          	sub    $0x8,%rsp
    45a4:	48 89 fa             	mov    %rdi,%rdx
    45a7:	48 89 f7             	mov    %rsi,%rdi
    45aa:	e8 e1 fe ff ff       	callq  4490 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    45af:	48 8b 3a             	mov    (%rdx),%rdi
    45b2:	48 89 c6             	mov    %rax,%rsi
    45b5:	e8 d6 fe ff ff       	callq  4490 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    45ba:	48 89 c7             	mov    %rax,%rdi
    45bd:	48 83 c4 08          	add    $0x8,%rsp
    45c1:	eb 8d                	jmp    4550 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    45c3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    45ca:	00 00 00 00 
    45ce:	66 90                	xchg   %ax,%ax

00000000000045d0 <std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>:
    45d0:	48 89 fa             	mov    %rdi,%rdx
    45d3:	8b 3f                	mov    (%rdi),%edi
    45d5:	e8 26 d2 ff ff       	callq  1800 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    45da:	89 02                	mov    %eax,(%rdx)
    45dc:	c3                   	retq   
    45dd:	0f 1f 00             	nopl   (%rax)

00000000000045e0 <std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>:
    45e0:	48 89 fa             	mov    %rdi,%rdx
    45e3:	8b 3f                	mov    (%rdi),%edi
    45e5:	e8 26 d2 ff ff       	callq  1810 <std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    45ea:	89 02                	mov    %eax,(%rdx)
    45ec:	c3                   	retq   
    45ed:	90                   	nop
    45ee:	66 90                	xchg   %ax,%ax

00000000000045f0 <std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) [clone .constprop.0] [clone .isra.0]>:
    45f0:	e8 2b f9 ff ff       	callq  3f20 <std::operator~(std::_Ios_Fmtflags) [clone .constprop.0]>
    45f5:	4c 8d 47 18          	lea    0x18(%rdi),%r8
    45f9:	89 c6                	mov    %eax,%esi
    45fb:	4c 89 c7             	mov    %r8,%rdi
    45fe:	e8 cd ff ff ff       	callq  45d0 <std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>
    4603:	be 04 01 00 00       	mov    $0x104,%esi
    4608:	bf 04 00 00 00       	mov    $0x4,%edi
    460d:	e8 ee d1 ff ff       	callq  1800 <std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)>
    4612:	89 c6                	mov    %eax,%esi
    4614:	4c 89 c7             	mov    %r8,%rdi
    4617:	eb c7                	jmp    45e0 <std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) [clone .isra.0]>
    4619:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004620 <std::fixed(std::ios_base&)>:
    4620:	f3 0f 1e fa          	endbr64 
    4624:	49 89 f9             	mov    %rdi,%r9
    4627:	e8 c4 ff ff ff       	callq  45f0 <std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags) [clone .constprop.0] [clone .isra.0]>
    462c:	4c 89 c8             	mov    %r9,%rax
    462f:	c3                   	retq   

0000000000004630 <std::__lg(long)>:
    4630:	b8 3f 00 00 00       	mov    $0x3f,%eax
    4635:	f3 48 0f bd ff       	lzcnt  %rdi,%rdi
    463a:	29 f8                	sub    %edi,%eax
    463c:	48 98                	cltq   
    463e:	c3                   	retq   
    463f:	90                   	nop

0000000000004640 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    4640:	49 89 f2             	mov    %rsi,%r10
    4643:	49 29 fa             	sub    %rdi,%r10
    4646:	4c 29 d2             	sub    %r10,%rdx
    4649:	49 89 d1             	mov    %rdx,%r9
    464c:	48 39 fe             	cmp    %rdi,%rsi
    464f:	74 1f                	je     4670 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x30>
    4651:	48 83 ec 08          	sub    $0x8,%rsp
    4655:	48 89 fe             	mov    %rdi,%rsi
    4658:	4c 89 d2             	mov    %r10,%rdx
    465b:	4c 89 cf             	mov    %r9,%rdi
    465e:	e8 ad cb ff ff       	callq  1210 <memmove@plt>
    4663:	48 83 c4 08          	add    $0x8,%rsp
    4667:	c3                   	retq   
    4668:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    466f:	00 
    4670:	48 89 d0             	mov    %rdx,%rax
    4673:	c3                   	retq   
    4674:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    467b:	00 00 00 00 
    467f:	90                   	nop

0000000000004680 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a2<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    4680:	eb be                	jmp    4640 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<std::chrono::duration<double, std::ratio<1l, 1000l> > >(std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> > const*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4682:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4689:	00 00 00 00 
    468d:	0f 1f 00             	nopl   (%rax)

0000000000004690 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a1<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    4690:	eb ee                	jmp    4680 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a2<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4692:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4699:	00 00 00 00 
    469d:	0f 1f 00             	nopl   (%rax)

00000000000046a0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>:
    46a0:	48 83 ec 08          	sub    $0x8,%rsp
    46a4:	49 89 f8             	mov    %rdi,%r8
    46a7:	48 89 d7             	mov    %rdx,%rdi
    46aa:	e8 41 f8 ff ff       	callq  3ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46af:	48 89 f7             	mov    %rsi,%rdi
    46b2:	48 89 c2             	mov    %rax,%rdx
    46b5:	e8 36 f8 ff ff       	callq  3ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46ba:	4c 89 c7             	mov    %r8,%rdi
    46bd:	48 89 c6             	mov    %rax,%rsi
    46c0:	e8 2b f8 ff ff       	callq  3ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46c5:	48 89 c7             	mov    %rax,%rdi
    46c8:	48 83 c4 08          	add    $0x8,%rsp
    46cc:	eb c2                	jmp    4690 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a1<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46ce:	66 90                	xchg   %ax,%ax

00000000000046d0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::move_backward<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>:
    46d0:	48 83 ec 08          	sub    $0x8,%rsp
    46d4:	49 89 f8             	mov    %rdi,%r8
    46d7:	48 89 f7             	mov    %rsi,%rdi
    46da:	e8 11 f8 ff ff       	callq  3ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46df:	4c 89 c7             	mov    %r8,%rdi
    46e2:	48 89 c6             	mov    %rax,%rsi
    46e5:	e8 06 f8 ff ff       	callq  3ef0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__miter_base<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    46ea:	48 89 c7             	mov    %rax,%rdi
    46ed:	48 83 c4 08          	add    $0x8,%rsp
    46f1:	eb ad                	jmp    46a0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__copy_move_backward_a<true, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>
    46f3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    46fa:	00 00 00 00 
    46fe:	66 90                	xchg   %ax,%ax

0000000000004700 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>:
    4700:	41 55                	push   %r13
    4702:	41 54                	push   %r12
    4704:	55                   	push   %rbp
    4705:	53                   	push   %rbx
    4706:	48 83 ec 18          	sub    $0x18,%rsp
    470a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4711:	00 00 
    4713:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4718:	31 c0                	xor    %eax,%eax
    471a:	48 39 f7             	cmp    %rsi,%rdi
    471d:	74 6e                	je     478d <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    471f:	48 8d 5f 08          	lea    0x8(%rdi),%rbx
    4723:	48 89 fd             	mov    %rdi,%rbp
    4726:	49 89 f4             	mov    %rsi,%r12
    4729:	48 39 de             	cmp    %rbx,%rsi
    472c:	74 5f                	je     478d <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    472e:	49 89 e5             	mov    %rsp,%r13
    4731:	eb 34                	jmp    4767 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x67>
    4733:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    4738:	e8 33 f7 ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    473d:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    4741:	48 89 ef             	mov    %rbp,%rdi
    4744:	48 89 da             	mov    %rbx,%rdx
    4747:	c5 fb 11 04 24       	vmovsd %xmm0,(%rsp)
    474c:	e8 7f ff ff ff       	callq  46d0 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::move_backward<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) [clone .isra.0]>
    4751:	4c 89 ef             	mov    %r13,%rdi
    4754:	e8 17 f7 ff ff       	callq  3e70 <std::remove_reference<std::chrono::duration<double, std::ratio<1l, 1000l> >&>::type&& std::move<std::chrono::duration<double, std::ratio<1l, 1000l> >&>(std::chrono::duration<double, std::ratio<1l, 1000l> >&)>
    4759:	c5 fb 10 00          	vmovsd (%rax),%xmm0
    475d:	c5 fb 11 45 00       	vmovsd %xmm0,0x0(%rbp)
    4762:	49 39 dc             	cmp    %rbx,%r12
    4765:	74 26                	je     478d <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x8d>
    4767:	c5 fb 10 03          	vmovsd (%rbx),%xmm0
    476b:	c5 fb 10 4d 00       	vmovsd 0x0(%rbp),%xmm1
    4770:	48 89 de             	mov    %rbx,%rsi
    4773:	e8 08 f8 ff ff       	callq  3f80 <bool __gnu_cxx::__ops::_Iter_less_iter::operator()<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*) const [clone .constprop.0] [clone .isra.0]>
    4778:	48 83 c3 08          	add    $0x8,%rbx
    477c:	48 89 f7             	mov    %rsi,%rdi
    477f:	84 c0                	test   %al,%al
    4781:	75 b5                	jne    4738 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x38>
    4783:	e8 58 f9 ff ff       	callq  40e0 <void std::__unguarded_linear_insert<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Val_less_iter)>
    4788:	49 39 dc             	cmp    %rbx,%r12
    478b:	75 da                	jne    4767 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0x67>
    478d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    4792:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4799:	00 00 
    479b:	75 0b                	jne    47a8 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)+0xa8>
    479d:	48 83 c4 18          	add    $0x18,%rsp
    47a1:	5b                   	pop    %rbx
    47a2:	5d                   	pop    %rbp
    47a3:	41 5c                	pop    %r12
    47a5:	41 5d                	pop    %r13
    47a7:	c3                   	retq   
    47a8:	e8 13 ca ff ff       	callq  11c0 <__stack_chk_fail@plt>
    47ad:	0f 1f 00             	nopl   (%rax)

00000000000047b0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>:
    47b0:	41 55                	push   %r13
    47b2:	48 89 d0             	mov    %rdx,%rax
    47b5:	48 29 f8             	sub    %rdi,%rax
    47b8:	41 54                	push   %r12
    47ba:	49 89 d4             	mov    %rdx,%r12
    47bd:	55                   	push   %rbp
    47be:	48 89 fd             	mov    %rdi,%rbp
    47c1:	53                   	push   %rbx
    47c2:	48 83 ec 08          	sub    $0x8,%rsp
    47c6:	48 83 f8 18          	cmp    $0x18,%rax
    47ca:	7e 3e                	jle    480a <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x5a>
    47cc:	49 89 f5             	mov    %rsi,%r13
    47cf:	48 89 cb             	mov    %rcx,%rbx
    47d2:	48 85 c9             	test   %rcx,%rcx
    47d5:	75 0e                	jne    47e5 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x35>
    47d7:	eb 43                	jmp    481c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x6c>
    47d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    47e0:	48 85 db             	test   %rbx,%rbx
    47e3:	74 37                	je     481c <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x6c>
    47e5:	4c 89 e6             	mov    %r12,%rsi
    47e8:	48 89 ef             	mov    %rbp,%rdi
    47eb:	e8 90 f8 ff ff       	callq  4080 <std::chrono::duration<double, std::ratio<1l, 1000l> >* std::__unguarded_partition_pivot<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>
    47f0:	48 ff cb             	dec    %rbx
    47f3:	49 39 c5             	cmp    %rax,%r13
    47f6:	4c 0f 42 e0          	cmovb  %rax,%r12
    47fa:	48 0f 43 e8          	cmovae %rax,%rbp
    47fe:	4c 89 e0             	mov    %r12,%rax
    4801:	48 29 e8             	sub    %rbp,%rax
    4804:	48 83 f8 18          	cmp    $0x18,%rax
    4808:	7f d6                	jg     47e0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]+0x30>
    480a:	58                   	pop    %rax
    480b:	5b                   	pop    %rbx
    480c:	48 89 ef             	mov    %rbp,%rdi
    480f:	5d                   	pop    %rbp
    4810:	4c 89 e6             	mov    %r12,%rsi
    4813:	41 5c                	pop    %r12
    4815:	41 5d                	pop    %r13
    4817:	e9 e4 fe ff ff       	jmpq   4700 <void std::__insertion_sort<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    481c:	49 8d 75 08          	lea    0x8(%r13),%rsi
    4820:	4c 89 e2             	mov    %r12,%rdx
    4823:	48 89 ef             	mov    %rbp,%rdi
    4826:	e8 f5 fb ff ff       	callq  4420 <void std::__heap_select<std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, __gnu_cxx::__ops::_Iter_less_iter)>
    482b:	5a                   	pop    %rdx
    482c:	5b                   	pop    %rbx
    482d:	48 89 ef             	mov    %rbp,%rdi
    4830:	5d                   	pop    %rbp
    4831:	41 5c                	pop    %r12
    4833:	4c 89 ee             	mov    %r13,%rsi
    4836:	41 5d                	pop    %r13
    4838:	e9 a3 f6 ff ff       	jmpq   3ee0 <void std::iter_swap<std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    483d:	0f 1f 00             	nopl   (%rax)

0000000000004840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>:
    4840:	48 39 d7             	cmp    %rdx,%rdi
    4843:	74 26                	je     486b <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x2b>
    4845:	48 39 f2             	cmp    %rsi,%rdx
    4848:	74 21                	je     486b <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)+0x2b>
    484a:	49 89 f8             	mov    %rdi,%r8
    484d:	48 89 d7             	mov    %rdx,%rdi
    4850:	50                   	push   %rax
    4851:	4c 29 c7             	sub    %r8,%rdi
    4854:	48 c1 ff 03          	sar    $0x3,%rdi
    4858:	e8 d3 fd ff ff       	callq  4630 <std::__lg(long)>
    485d:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
    4861:	4c 89 c7             	mov    %r8,%rdi
    4864:	41 58                	pop    %r8
    4866:	e9 45 ff ff ff       	jmpq   47b0 <void std::__introselect<std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.0]>
    486b:	c3                   	retq   
    486c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004870 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))>:
    4870:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    4875:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    4879:	41 ff 72 f8          	pushq  -0x8(%r10)
    487d:	55                   	push   %rbp
    487e:	48 89 e5             	mov    %rsp,%rbp
    4881:	41 57                	push   %r15
    4883:	41 56                	push   %r14
    4885:	41 55                	push   %r13
    4887:	41 54                	push   %r12
    4889:	41 52                	push   %r10
    488b:	53                   	push   %rbx
    488c:	4c 8d 9c 24 00 80 fe 	lea    -0x18000(%rsp),%r11
    4893:	ff 
    4894:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    489b:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    48a0:	4c 39 dc             	cmp    %r11,%rsp
    48a3:	75 ef                	jne    4894 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x24>
    48a5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    48ac:	ba 00 80 00 00       	mov    $0x8000,%edx
    48b1:	31 f6                	xor    %esi,%esi
    48b3:	48 89 bd 70 7e fe ff 	mov    %rdi,-0x18190(%rbp)
    48ba:	4c 8d a5 c0 7f ff ff 	lea    -0x8040(%rbp),%r12
    48c1:	4c 89 e7             	mov    %r12,%rdi
    48c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    48cb:	00 00 
    48cd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    48d1:	31 c0                	xor    %eax,%eax
    48d3:	48 8d 9d b0 ff fe ff 	lea    -0x10050(%rbp),%rbx
    48da:	e8 81 c8 ff ff       	callq  1160 <memset@plt>
    48df:	c5 fd 6f 05 19 1b 00 	vmovdqa 0x1b19(%rip),%ymm0        # 6400 <_IO_stdin_used+0x400>
    48e6:	00 
    48e7:	48 89 d8             	mov    %rbx,%rax
    48ea:	48 8d 95 b0 7f ff ff 	lea    -0x8050(%rbp),%rdx
    48f1:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    48f5:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    48fa:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    48ff:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4904:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    490b:	00 
    490c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    4913:	00 
    4914:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    491b:	00 
    491c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    4923:	00 
    4924:	48 05 00 01 00 00    	add    $0x100,%rax
    492a:	48 39 d0             	cmp    %rdx,%rax
    492d:	75 c2                	jne    48f1 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x81>
    492f:	4c 8d ad b0 7f fe ff 	lea    -0x18050(%rbp),%r13
    4936:	c5 fd 6f 05 e2 1a 00 	vmovdqa 0x1ae2(%rip),%ymm0        # 6420 <_IO_stdin_used+0x420>
    493d:	00 
    493e:	4c 89 e8             	mov    %r13,%rax
    4941:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4945:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    494a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    494f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4954:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    495b:	00 
    495c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    4963:	00 
    4964:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    496b:	00 
    496c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    4973:	00 
    4974:	48 05 00 01 00 00    	add    $0x100,%rax
    497a:	48 39 d8             	cmp    %rbx,%rax
    497d:	75 c2                	jne    4941 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0xd1>
    497f:	48 8d 85 a0 7e fe ff 	lea    -0x18160(%rbp),%rax
    4986:	48 89 85 50 7e fe ff 	mov    %rax,-0x181b0(%rbp)
    498d:	49 89 c6             	mov    %rax,%r14
    4990:	48 8d 85 a8 7f fe ff 	lea    -0x18058(%rbp),%rax
    4997:	48 89 85 78 7e fe ff 	mov    %rax,-0x18188(%rbp)
    499e:	48 8d 85 88 7e fe ff 	lea    -0x18178(%rbp),%rax
    49a5:	48 89 85 68 7e fe ff 	mov    %rax,-0x18198(%rbp)
    49ac:	48 8d 85 98 7e fe ff 	lea    -0x18168(%rbp),%rax
    49b3:	48 89 85 58 7e fe ff 	mov    %rax,-0x181a8(%rbp)
    49ba:	48 8d 85 90 7e fe ff 	lea    -0x18170(%rbp),%rax
    49c1:	48 89 85 60 7e fe ff 	mov    %rax,-0x181a0(%rbp)
    49c8:	c5 f8 77             	vzeroupper 
    49cb:	e8 70 c7 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    49d0:	49 89 c7             	mov    %rax,%r15
    49d3:	48 8b 85 70 7e fe ff 	mov    -0x18190(%rbp),%rax
    49da:	4c 89 ea             	mov    %r13,%rdx
    49dd:	48 89 de             	mov    %rbx,%rsi
    49e0:	4c 89 e7             	mov    %r12,%rdi
    49e3:	ff d0                	callq  *%rax
    49e5:	e8 56 c7 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    49ea:	48 8b bd 68 7e fe ff 	mov    -0x18198(%rbp),%rdi
    49f1:	4c 89 fe             	mov    %r15,%rsi
    49f4:	48 89 85 88 7e fe ff 	mov    %rax,-0x18178(%rbp)
    49fb:	e8 a0 fb ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    4a00:	48 8b b5 58 7e fe ff 	mov    -0x181a8(%rbp),%rsi
    4a07:	48 8b bd 60 7e fe ff 	mov    -0x181a0(%rbp),%rdi
    4a0e:	48 89 85 98 7e fe ff 	mov    %rax,-0x18168(%rbp)
    4a15:	e8 16 fb ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    4a1a:	c5 fb 10 85 90 7e fe 	vmovsd -0x18170(%rbp),%xmm0
    4a21:	ff 
    4a22:	49 83 c6 08          	add    $0x8,%r14
    4a26:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    4a2c:	4c 39 b5 78 7e fe ff 	cmp    %r14,-0x18188(%rbp)
    4a33:	75 96                	jne    49cb <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x15b>
    4a35:	48 8b 95 78 7e fe ff 	mov    -0x18188(%rbp),%rdx
    4a3c:	48 8b bd 50 7e fe ff 	mov    -0x181b0(%rbp),%rdi
    4a43:	48 8d b5 20 7f fe ff 	lea    -0x180e0(%rbp),%rsi
    4a4a:	e8 f1 fd ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4a4f:	48 8b 3d 7a 45 00 00 	mov    0x457a(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    4a56:	48 8d 35 c3 fb ff ff 	lea    -0x43d(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    4a5d:	e8 ee c6 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    4a62:	48 89 c7             	mov    %rax,%rdi
    4a65:	e8 a6 f4 ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    4a6a:	89 c6                	mov    %eax,%esi
    4a6c:	e8 8f c7 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    4a71:	48 89 c7             	mov    %rax,%rdi
    4a74:	e8 87 f4 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    4a79:	89 c6                	mov    %eax,%esi
    4a7b:	e8 50 c7 ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    4a80:	c5 fb 10 85 20 7f fe 	vmovsd -0x180e0(%rbp),%xmm0
    4a87:	ff 
    4a88:	48 89 c7             	mov    %rax,%rdi
    4a8b:	e8 c0 f4 ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    4a90:	e8 9b c7 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    4a95:	66 81 7d be 00 63    	cmpw   $0x6300,-0x42(%rbp)
    4a9b:	75 27                	jne    4ac4 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x254>
    4a9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4aa1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4aa8:	00 00 
    4aaa:	75 37                	jne    4ae3 <void test_type<short, void (short (*) [128], short (*) [128], short (*) [128])>(void (&)(short (*) [128], short (*) [128], short (*) [128]))+0x273>
    4aac:	48 81 c4 80 81 01 00 	add    $0x18180,%rsp
    4ab3:	5b                   	pop    %rbx
    4ab4:	41 5a                	pop    %r10
    4ab6:	41 5c                	pop    %r12
    4ab8:	41 5d                	pop    %r13
    4aba:	41 5e                	pop    %r14
    4abc:	41 5f                	pop    %r15
    4abe:	5d                   	pop    %rbp
    4abf:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    4ac3:	c3                   	retq   
    4ac4:	48 8d 0d 3d 15 00 00 	lea    0x153d(%rip),%rcx        # 6008 <_IO_stdin_used+0x8>
    4acb:	ba 56 00 00 00       	mov    $0x56,%edx
    4ad0:	48 8d 35 b3 18 00 00 	lea    0x18b3(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    4ad7:	48 8d 3d 9a 15 00 00 	lea    0x159a(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    4ade:	e8 8d c6 ff ff       	callq  1170 <__assert_fail@plt>
    4ae3:	e8 d8 c6 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    4ae8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    4aef:	00 

0000000000004af0 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))>:
    4af0:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    4af5:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    4af9:	41 ff 72 f8          	pushq  -0x8(%r10)
    4afd:	55                   	push   %rbp
    4afe:	48 89 e5             	mov    %rsp,%rbp
    4b01:	41 57                	push   %r15
    4b03:	41 56                	push   %r14
    4b05:	41 55                	push   %r13
    4b07:	41 54                	push   %r12
    4b09:	41 52                	push   %r10
    4b0b:	53                   	push   %rbx
    4b0c:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    4b13:	ff 
    4b14:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    4b1b:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4b20:	4c 39 dc             	cmp    %r11,%rsp
    4b23:	75 ef                	jne    4b14 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x24>
    4b25:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    4b2c:	ba 00 00 01 00       	mov    $0x10000,%edx
    4b31:	31 f6                	xor    %esi,%esi
    4b33:	48 89 bd 70 fe fc ff 	mov    %rdi,-0x30190(%rbp)
    4b3a:	4c 8d ad c0 ff fe ff 	lea    -0x10040(%rbp),%r13
    4b41:	4c 89 ef             	mov    %r13,%rdi
    4b44:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4b4b:	00 00 
    4b4d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4b51:	31 c0                	xor    %eax,%eax
    4b53:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    4b5a:	e8 01 c6 ff ff       	callq  1160 <memset@plt>
    4b5f:	c5 fd 6f 05 d9 18 00 	vmovdqa 0x18d9(%rip),%ymm0        # 6440 <_IO_stdin_used+0x440>
    4b66:	00 
    4b67:	48 89 d8             	mov    %rbx,%rax
    4b6a:	48 8d 95 b0 ff fe ff 	lea    -0x10050(%rbp),%rdx
    4b71:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4b75:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    4b7a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    4b7f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4b84:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    4b8b:	00 
    4b8c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    4b93:	00 
    4b94:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    4b9b:	00 
    4b9c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    4ba3:	00 
    4ba4:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    4bab:	00 
    4bac:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    4bb3:	00 
    4bb4:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    4bbb:	00 
    4bbc:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    4bc3:	00 
    4bc4:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    4bcb:	00 
    4bcc:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    4bd3:	00 
    4bd4:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    4bdb:	00 
    4bdc:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    4be3:	00 
    4be4:	48 05 00 02 00 00    	add    $0x200,%rax
    4bea:	48 39 d0             	cmp    %rdx,%rax
    4bed:	75 82                	jne    4b71 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x81>
    4bef:	4c 8d a5 b0 ff fc ff 	lea    -0x30050(%rbp),%r12
    4bf6:	c5 fd 6f 05 62 18 00 	vmovdqa 0x1862(%rip),%ymm0        # 6460 <_IO_stdin_used+0x460>
    4bfd:	00 
    4bfe:	4c 89 e0             	mov    %r12,%rax
    4c01:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4c05:	c5 fd 7f 40 20       	vmovdqa %ymm0,0x20(%rax)
    4c0a:	c5 fd 7f 40 40       	vmovdqa %ymm0,0x40(%rax)
    4c0f:	c5 fd 7f 40 60       	vmovdqa %ymm0,0x60(%rax)
    4c14:	c5 fd 7f 80 80 00 00 	vmovdqa %ymm0,0x80(%rax)
    4c1b:	00 
    4c1c:	c5 fd 7f 80 a0 00 00 	vmovdqa %ymm0,0xa0(%rax)
    4c23:	00 
    4c24:	c5 fd 7f 80 c0 00 00 	vmovdqa %ymm0,0xc0(%rax)
    4c2b:	00 
    4c2c:	c5 fd 7f 80 e0 00 00 	vmovdqa %ymm0,0xe0(%rax)
    4c33:	00 
    4c34:	c5 fd 7f 80 00 01 00 	vmovdqa %ymm0,0x100(%rax)
    4c3b:	00 
    4c3c:	c5 fd 7f 80 20 01 00 	vmovdqa %ymm0,0x120(%rax)
    4c43:	00 
    4c44:	c5 fd 7f 80 40 01 00 	vmovdqa %ymm0,0x140(%rax)
    4c4b:	00 
    4c4c:	c5 fd 7f 80 60 01 00 	vmovdqa %ymm0,0x160(%rax)
    4c53:	00 
    4c54:	c5 fd 7f 80 80 01 00 	vmovdqa %ymm0,0x180(%rax)
    4c5b:	00 
    4c5c:	c5 fd 7f 80 a0 01 00 	vmovdqa %ymm0,0x1a0(%rax)
    4c63:	00 
    4c64:	c5 fd 7f 80 c0 01 00 	vmovdqa %ymm0,0x1c0(%rax)
    4c6b:	00 
    4c6c:	c5 fd 7f 80 e0 01 00 	vmovdqa %ymm0,0x1e0(%rax)
    4c73:	00 
    4c74:	48 05 00 02 00 00    	add    $0x200,%rax
    4c7a:	48 39 c3             	cmp    %rax,%rbx
    4c7d:	75 82                	jne    4c01 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x111>
    4c7f:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    4c86:	48 89 85 50 fe fc ff 	mov    %rax,-0x301b0(%rbp)
    4c8d:	49 89 c6             	mov    %rax,%r14
    4c90:	48 8d 85 a8 ff fc ff 	lea    -0x30058(%rbp),%rax
    4c97:	48 89 85 78 fe fc ff 	mov    %rax,-0x30188(%rbp)
    4c9e:	48 8d 85 88 fe fc ff 	lea    -0x30178(%rbp),%rax
    4ca5:	48 89 85 58 fe fc ff 	mov    %rax,-0x301a8(%rbp)
    4cac:	48 8d 85 98 fe fc ff 	lea    -0x30168(%rbp),%rax
    4cb3:	48 89 85 60 fe fc ff 	mov    %rax,-0x301a0(%rbp)
    4cba:	48 8d 85 90 fe fc ff 	lea    -0x30170(%rbp),%rax
    4cc1:	48 89 85 68 fe fc ff 	mov    %rax,-0x30198(%rbp)
    4cc8:	c5 f8 77             	vzeroupper 
    4ccb:	e8 70 c4 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    4cd0:	49 89 c7             	mov    %rax,%r15
    4cd3:	48 8b 85 70 fe fc ff 	mov    -0x30190(%rbp),%rax
    4cda:	4c 89 e2             	mov    %r12,%rdx
    4cdd:	48 89 de             	mov    %rbx,%rsi
    4ce0:	4c 89 ef             	mov    %r13,%rdi
    4ce3:	ff d0                	callq  *%rax
    4ce5:	e8 56 c4 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    4cea:	48 8b bd 58 fe fc ff 	mov    -0x301a8(%rbp),%rdi
    4cf1:	4c 89 fe             	mov    %r15,%rsi
    4cf4:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    4cfb:	e8 a0 f8 ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    4d00:	48 8b b5 60 fe fc ff 	mov    -0x301a0(%rbp),%rsi
    4d07:	48 8b bd 68 fe fc ff 	mov    -0x30198(%rbp),%rdi
    4d0e:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    4d15:	e8 16 f8 ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    4d1a:	c5 fb 10 85 90 fe fc 	vmovsd -0x30170(%rbp),%xmm0
    4d21:	ff 
    4d22:	49 83 c6 08          	add    $0x8,%r14
    4d26:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    4d2c:	4c 39 b5 78 fe fc ff 	cmp    %r14,-0x30188(%rbp)
    4d33:	75 96                	jne    4ccb <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x1db>
    4d35:	48 8b 95 78 fe fc ff 	mov    -0x30188(%rbp),%rdx
    4d3c:	48 8b bd 50 fe fc ff 	mov    -0x301b0(%rbp),%rdi
    4d43:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    4d4a:	e8 f1 fa ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4d4f:	48 8b 3d 7a 42 00 00 	mov    0x427a(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    4d56:	48 8d 35 c3 f8 ff ff 	lea    -0x73d(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    4d5d:	e8 ee c3 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    4d62:	48 89 c7             	mov    %rax,%rdi
    4d65:	e8 a6 f1 ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    4d6a:	89 c6                	mov    %eax,%esi
    4d6c:	e8 8f c4 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    4d71:	48 89 c7             	mov    %rax,%rdi
    4d74:	e8 87 f1 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    4d79:	89 c6                	mov    %eax,%esi
    4d7b:	e8 50 c4 ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    4d80:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    4d87:	ff 
    4d88:	48 89 c7             	mov    %rax,%rdi
    4d8b:	e8 c0 f1 ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    4d90:	e8 9b c4 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    4d95:	81 7d bc 00 63 00 00 	cmpl   $0x6300,-0x44(%rbp)
    4d9c:	75 27                	jne    4dc5 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2d5>
    4d9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4da2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4da9:	00 00 
    4dab:	75 37                	jne    4de4 <void test_type<int, void (int (*) [128], int (*) [128], int (*) [128])>(void (&)(int (*) [128], int (*) [128], int (*) [128]))+0x2f4>
    4dad:	48 81 c4 80 01 03 00 	add    $0x30180,%rsp
    4db4:	5b                   	pop    %rbx
    4db5:	41 5a                	pop    %r10
    4db7:	41 5c                	pop    %r12
    4db9:	41 5d                	pop    %r13
    4dbb:	41 5e                	pop    %r14
    4dbd:	41 5f                	pop    %r15
    4dbf:	5d                   	pop    %rbp
    4dc0:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    4dc4:	c3                   	retq   
    4dc5:	48 8d 0d d4 12 00 00 	lea    0x12d4(%rip),%rcx        # 60a0 <_IO_stdin_used+0xa0>
    4dcc:	ba 56 00 00 00       	mov    $0x56,%edx
    4dd1:	48 8d 35 b2 15 00 00 	lea    0x15b2(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    4dd8:	48 8d 3d 99 12 00 00 	lea    0x1299(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    4ddf:	e8 8c c3 ff ff       	callq  1170 <__assert_fail@plt>
    4de4:	e8 d7 c3 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    4de9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004df0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))>:
    4df0:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    4df5:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    4df9:	41 ff 72 f8          	pushq  -0x8(%r10)
    4dfd:	55                   	push   %rbp
    4dfe:	48 89 e5             	mov    %rsp,%rbp
    4e01:	41 57                	push   %r15
    4e03:	41 56                	push   %r14
    4e05:	41 55                	push   %r13
    4e07:	41 54                	push   %r12
    4e09:	41 52                	push   %r10
    4e0b:	53                   	push   %rbx
    4e0c:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    4e13:	ff 
    4e14:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    4e1b:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    4e20:	4c 39 dc             	cmp    %r11,%rsp
    4e23:	75 ef                	jne    4e14 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x24>
    4e25:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    4e2c:	ba 00 00 02 00       	mov    $0x20000,%edx
    4e31:	31 f6                	xor    %esi,%esi
    4e33:	48 89 bd 78 fe f9 ff 	mov    %rdi,-0x60188(%rbp)
    4e3a:	4c 8d ad c0 ff fd ff 	lea    -0x20040(%rbp),%r13
    4e41:	4c 89 ef             	mov    %r13,%rdi
    4e44:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4e4b:	00 00 
    4e4d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    4e51:	31 c0                	xor    %eax,%eax
    4e53:	48 8d 9d b0 ff fb ff 	lea    -0x40050(%rbp),%rbx
    4e5a:	e8 01 c3 ff ff       	callq  1160 <memset@plt>
    4e5f:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    4e66:	c5 fd 6f 05 12 16 00 	vmovdqa 0x1612(%rip),%ymm0        # 6480 <_IO_stdin_used+0x480>
    4e6d:	00 
    4e6e:	48 89 d9             	mov    %rbx,%rcx
    4e71:	48 89 f2             	mov    %rsi,%rdx
    4e74:	48 8d bd b0 03 fe ff 	lea    -0x1fc50(%rbp),%rdi
    4e7b:	48 89 c8             	mov    %rcx,%rax
    4e7e:	66 90                	xchg   %ax,%ax
    4e80:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4e84:	48 83 c0 20          	add    $0x20,%rax
    4e88:	48 39 d0             	cmp    %rdx,%rax
    4e8b:	75 f3                	jne    4e80 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x90>
    4e8d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4e94:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4e9b:	48 39 fa             	cmp    %rdi,%rdx
    4e9e:	75 db                	jne    4e7b <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x8b>
    4ea0:	4c 8d a5 b0 ff f9 ff 	lea    -0x60050(%rbp),%r12
    4ea7:	c5 fd 6f 05 f1 15 00 	vmovdqa 0x15f1(%rip),%ymm0        # 64a0 <_IO_stdin_used+0x4a0>
    4eae:	00 
    4eaf:	4c 89 e1             	mov    %r12,%rcx
    4eb2:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    4eb9:	48 89 c8             	mov    %rcx,%rax
    4ebc:	0f 1f 40 00          	nopl   0x0(%rax)
    4ec0:	c5 fd 7f 00          	vmovdqa %ymm0,(%rax)
    4ec4:	48 83 c0 20          	add    $0x20,%rax
    4ec8:	48 39 d0             	cmp    %rdx,%rax
    4ecb:	75 f3                	jne    4ec0 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xd0>
    4ecd:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    4ed4:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    4edb:	48 39 f2             	cmp    %rsi,%rdx
    4ede:	75 d9                	jne    4eb9 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0xc9>
    4ee0:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    4ee7:	48 89 85 50 fe f9 ff 	mov    %rax,-0x601b0(%rbp)
    4eee:	49 89 c6             	mov    %rax,%r14
    4ef1:	48 8d 85 a8 ff f9 ff 	lea    -0x60058(%rbp),%rax
    4ef8:	48 89 85 60 fe f9 ff 	mov    %rax,-0x601a0(%rbp)
    4eff:	48 8d 85 88 fe f9 ff 	lea    -0x60178(%rbp),%rax
    4f06:	48 89 85 70 fe f9 ff 	mov    %rax,-0x60190(%rbp)
    4f0d:	48 8d 85 98 fe f9 ff 	lea    -0x60168(%rbp),%rax
    4f14:	48 89 85 58 fe f9 ff 	mov    %rax,-0x601a8(%rbp)
    4f1b:	48 8d 85 90 fe f9 ff 	lea    -0x60170(%rbp),%rax
    4f22:	48 89 85 68 fe f9 ff 	mov    %rax,-0x60198(%rbp)
    4f29:	c5 f8 77             	vzeroupper 
    4f2c:	e8 0f c2 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    4f31:	49 89 c7             	mov    %rax,%r15
    4f34:	48 8b 85 78 fe f9 ff 	mov    -0x60188(%rbp),%rax
    4f3b:	4c 89 e2             	mov    %r12,%rdx
    4f3e:	48 89 de             	mov    %rbx,%rsi
    4f41:	4c 89 ef             	mov    %r13,%rdi
    4f44:	ff d0                	callq  *%rax
    4f46:	e8 f5 c1 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    4f4b:	48 8b bd 70 fe f9 ff 	mov    -0x60190(%rbp),%rdi
    4f52:	4c 89 fe             	mov    %r15,%rsi
    4f55:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    4f5c:	e8 3f f6 ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    4f61:	48 8b b5 58 fe f9 ff 	mov    -0x601a8(%rbp),%rsi
    4f68:	48 8b bd 68 fe f9 ff 	mov    -0x60198(%rbp),%rdi
    4f6f:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    4f76:	e8 b5 f5 ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    4f7b:	c5 fb 10 85 90 fe f9 	vmovsd -0x60170(%rbp),%xmm0
    4f82:	ff 
    4f83:	49 83 c6 08          	add    $0x8,%r14
    4f87:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    4f8d:	4c 3b b5 60 fe f9 ff 	cmp    -0x601a0(%rbp),%r14
    4f94:	75 96                	jne    4f2c <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x13c>
    4f96:	48 8b bd 50 fe f9 ff 	mov    -0x601b0(%rbp),%rdi
    4f9d:	4c 89 f2             	mov    %r14,%rdx
    4fa0:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    4fa7:	e8 94 f8 ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    4fac:	48 8b 3d 1d 40 00 00 	mov    0x401d(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    4fb3:	48 8d 35 66 f6 ff ff 	lea    -0x99a(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    4fba:	e8 91 c1 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    4fbf:	48 89 c7             	mov    %rax,%rdi
    4fc2:	e8 49 ef ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    4fc7:	89 c6                	mov    %eax,%esi
    4fc9:	e8 32 c2 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    4fce:	48 89 c7             	mov    %rax,%rdi
    4fd1:	e8 2a ef ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    4fd6:	89 c6                	mov    %eax,%esi
    4fd8:	e8 f3 c1 ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    4fdd:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    4fe4:	ff 
    4fe5:	48 89 c7             	mov    %rax,%rdi
    4fe8:	e8 63 ef ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    4fed:	e8 3e c2 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    4ff2:	48 81 7d b8 00 63 00 	cmpq   $0x6300,-0x48(%rbp)
    4ff9:	00 
    4ffa:	75 27                	jne    5023 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x233>
    4ffc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5000:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5007:	00 00 
    5009:	75 37                	jne    5042 <void test_type<long, void (long (*) [128], long (*) [128], long (*) [128])>(void (&)(long (*) [128], long (*) [128], long (*) [128]))+0x252>
    500b:	48 81 c4 80 01 06 00 	add    $0x60180,%rsp
    5012:	5b                   	pop    %rbx
    5013:	41 5a                	pop    %r10
    5015:	41 5c                	pop    %r12
    5017:	41 5d                	pop    %r13
    5019:	41 5e                	pop    %r14
    501b:	41 5f                	pop    %r15
    501d:	5d                   	pop    %rbp
    501e:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    5022:	c3                   	retq   
    5023:	48 8d 0d ce 10 00 00 	lea    0x10ce(%rip),%rcx        # 60f8 <_IO_stdin_used+0xf8>
    502a:	ba 56 00 00 00       	mov    $0x56,%edx
    502f:	48 8d 35 54 13 00 00 	lea    0x1354(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    5036:	48 8d 3d 3b 10 00 00 	lea    0x103b(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    503d:	e8 2e c1 ff ff       	callq  1170 <__assert_fail@plt>
    5042:	e8 79 c1 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    5047:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    504e:	00 00 

0000000000005050 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))>:
    5050:	41 57                	push   %r15
    5052:	41 56                	push   %r14
    5054:	41 55                	push   %r13
    5056:	41 54                	push   %r12
    5058:	55                   	push   %rbp
    5059:	53                   	push   %rbx
    505a:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5061:	ff 
    5062:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5069:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    506e:	4c 39 dc             	cmp    %r11,%rsp
    5071:	75 ef                	jne    5062 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x12>
    5073:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    507a:	ba 00 00 04 00       	mov    $0x40000,%edx
    507f:	31 f6                	xor    %esi,%esi
    5081:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    5086:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    508d:	00 
    508e:	48 89 df             	mov    %rbx,%rdi
    5091:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5098:	00 00 
    509a:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    50a1:	00 
    50a2:	31 c0                	xor    %eax,%eax
    50a4:	e8 b7 c0 ff ff       	callq  1160 <memset@plt>
    50a9:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    50b0:	00 
    50b1:	48 89 ca             	mov    %rcx,%rdx
    50b4:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    50bb:	00 
    50bc:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    50c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    50c8:	48 c7 00 02 00 00 00 	movq   $0x2,(%rax)
    50cf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    50d6:	00 
    50d7:	48 83 c0 10          	add    $0x10,%rax
    50db:	48 39 d0             	cmp    %rdx,%rax
    50de:	75 e8                	jne    50c8 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x78>
    50e0:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    50e7:	48 39 f2             	cmp    %rsi,%rdx
    50ea:	75 d0                	jne    50bc <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x6c>
    50ec:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    50f3:	00 
    50f4:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    50fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    5100:	48 c7 00 03 00 00 00 	movq   $0x3,(%rax)
    5107:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    510e:	00 
    510f:	48 83 c0 10          	add    $0x10,%rax
    5113:	48 39 d0             	cmp    %rdx,%rax
    5116:	75 e8                	jne    5100 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xb0>
    5118:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    511f:	48 39 ca             	cmp    %rcx,%rdx
    5122:	75 d0                	jne    50f4 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0xa4>
    5124:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    5129:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    512e:	49 89 c4             	mov    %rax,%r12
    5131:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    5138:	00 
    5139:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    513e:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    5143:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    5148:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    514d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    5152:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    5159:	00 
    515a:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    5161:	00 
    5162:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    5167:	e8 d4 bf ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    516c:	48 89 c5             	mov    %rax,%rbp
    516f:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    5174:	4c 89 fa             	mov    %r15,%rdx
    5177:	4c 89 f6             	mov    %r14,%rsi
    517a:	48 89 df             	mov    %rbx,%rdi
    517d:	ff d0                	callq  *%rax
    517f:	e8 bc bf ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    5184:	48 89 ee             	mov    %rbp,%rsi
    5187:	4c 89 ef             	mov    %r13,%rdi
    518a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    518f:	e8 0c f4 ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5194:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    5199:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    519e:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    51a3:	e8 88 f3 ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    51a8:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    51ae:	49 83 c4 08          	add    $0x8,%r12
    51b2:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    51b9:	4c 3b 64 24 18       	cmp    0x18(%rsp),%r12
    51be:	75 a7                	jne    5167 <void test_type<__int128, void (__int128 (*) [128], __int128 (*) [128], __int128 (*) [128])>(void (&)(__int128 (*) [128], __int128 (*) [128], __int128 (*) [128]))+0x117>
    51c0:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    51c5:	4c 89 e2             	mov    %r12,%rdx
    51c8:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    51cf:	00 
    51d0:	e8 6b f6 ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    51d5:	48 8b 3d f4 3d 00 00 	mov    0x3df4(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    51dc:	48 8d 35 3d f4 ff ff 	lea    -0xbc3(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    51e3:	e8 68 bf ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    51e8:	48 89 c7             	mov    %rax,%rdi
    51eb:	e8 20 ed ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    51f0:	89 c6                	mov    %eax,%esi
    51f2:	e8 09 c0 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    51f7:	48 89 c7             	mov    %rax,%rdi
    51fa:	e8 01 ed ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    51ff:	89 c6                	mov    %eax,%esi
    5201:	e8 ca bf ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    5206:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    520d:	00 00 
    520f:	48 89 c7             	mov    %rax,%rdi
    5212:	e8 39 ed ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5217:	e8 14 c0 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    521c:	48 8b 84 24 50 01 0c 	mov    0xc0150(%rsp),%rax
    5223:	00 
    5224:	80 f4 63             	xor    $0x63,%ah
    5227:	48 0b 84 24 58 01 0c 	or     0xc0158(%rsp),%rax
    522e:	00 
    522f:	75 25                	jne    5256 <ijk2.cc.509ad181+0x11>
    5231:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    5238:	00 
    5239:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5240:	00 00 
    5242:	75 31                	jne    5275 <ijk2.cc.509ad181+0x30>
    5244:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    524b:	5b                   	pop    %rbx
    524c:	5d                   	pop    %rbp
    524d:	41 5c                	pop    %r12
    524f:	41 5d                	pop    %r13
    5251:	41 5e                	pop    %r14
    5253:	41 5f                	pop    %r15
    5255:	c3                   	retq   
    5256:	48 8d 0d 0b 0f 00 00 	lea    0xf0b(%rip),%rcx        # 6168 <_IO_stdin_used+0x168>
    525d:	ba 56 00 00 00       	mov    $0x56,%edx
    5262:	48 8d 35 21 11 00 00 	lea    0x1121(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    5269:	48 8d 3d 08 0e 00 00 	lea    0xe08(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    5270:	e8 fb be ff ff       	callq  1170 <__assert_fail@plt>
    5275:	e8 46 bf ff ff       	callq  11c0 <__stack_chk_fail@plt>
    527a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005280 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))>:
    5280:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5285:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    5289:	41 ff 72 f8          	pushq  -0x8(%r10)
    528d:	55                   	push   %rbp
    528e:	48 89 e5             	mov    %rsp,%rbp
    5291:	41 57                	push   %r15
    5293:	41 56                	push   %r14
    5295:	41 55                	push   %r13
    5297:	41 54                	push   %r12
    5299:	41 52                	push   %r10
    529b:	53                   	push   %rbx
    529c:	4c 8d 9c 24 00 00 fd 	lea    -0x30000(%rsp),%r11
    52a3:	ff 
    52a4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    52ab:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    52b0:	4c 39 dc             	cmp    %r11,%rsp
    52b3:	75 ef                	jne    52a4 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x24>
    52b5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    52bc:	ba 00 00 01 00       	mov    $0x10000,%edx
    52c1:	31 f6                	xor    %esi,%esi
    52c3:	48 89 bd 70 fe fc ff 	mov    %rdi,-0x30190(%rbp)
    52ca:	4c 8d ad c0 ff fe ff 	lea    -0x10040(%rbp),%r13
    52d1:	4c 89 ef             	mov    %r13,%rdi
    52d4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    52db:	00 00 
    52dd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    52e1:	31 c0                	xor    %eax,%eax
    52e3:	48 8d 9d b0 ff fd ff 	lea    -0x20050(%rbp),%rbx
    52ea:	e8 71 be ff ff       	callq  1160 <memset@plt>
    52ef:	c5 fc 28 05 c9 11 00 	vmovaps 0x11c9(%rip),%ymm0        # 64c0 <_IO_stdin_used+0x4c0>
    52f6:	00 
    52f7:	48 89 d8             	mov    %rbx,%rax
    52fa:	48 8d 95 b0 ff fe ff 	lea    -0x10050(%rbp),%rdx
    5301:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    5305:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    530a:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    530f:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    5314:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    531b:	00 
    531c:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    5323:	00 
    5324:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    532b:	00 
    532c:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    5333:	00 
    5334:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    533b:	00 
    533c:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    5343:	00 
    5344:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    534b:	00 
    534c:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    5353:	00 
    5354:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    535b:	00 
    535c:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    5363:	00 
    5364:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    536b:	00 
    536c:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    5373:	00 
    5374:	48 05 00 02 00 00    	add    $0x200,%rax
    537a:	48 39 d0             	cmp    %rdx,%rax
    537d:	75 82                	jne    5301 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x81>
    537f:	4c 8d a5 b0 ff fc ff 	lea    -0x30050(%rbp),%r12
    5386:	c5 fc 28 05 52 11 00 	vmovaps 0x1152(%rip),%ymm0        # 64e0 <_IO_stdin_used+0x4e0>
    538d:	00 
    538e:	4c 89 e0             	mov    %r12,%rax
    5391:	c5 fc 29 00          	vmovaps %ymm0,(%rax)
    5395:	c5 fc 29 40 20       	vmovaps %ymm0,0x20(%rax)
    539a:	c5 fc 29 40 40       	vmovaps %ymm0,0x40(%rax)
    539f:	c5 fc 29 40 60       	vmovaps %ymm0,0x60(%rax)
    53a4:	c5 fc 29 80 80 00 00 	vmovaps %ymm0,0x80(%rax)
    53ab:	00 
    53ac:	c5 fc 29 80 a0 00 00 	vmovaps %ymm0,0xa0(%rax)
    53b3:	00 
    53b4:	c5 fc 29 80 c0 00 00 	vmovaps %ymm0,0xc0(%rax)
    53bb:	00 
    53bc:	c5 fc 29 80 e0 00 00 	vmovaps %ymm0,0xe0(%rax)
    53c3:	00 
    53c4:	c5 fc 29 80 00 01 00 	vmovaps %ymm0,0x100(%rax)
    53cb:	00 
    53cc:	c5 fc 29 80 20 01 00 	vmovaps %ymm0,0x120(%rax)
    53d3:	00 
    53d4:	c5 fc 29 80 40 01 00 	vmovaps %ymm0,0x140(%rax)
    53db:	00 
    53dc:	c5 fc 29 80 60 01 00 	vmovaps %ymm0,0x160(%rax)
    53e3:	00 
    53e4:	c5 fc 29 80 80 01 00 	vmovaps %ymm0,0x180(%rax)
    53eb:	00 
    53ec:	c5 fc 29 80 a0 01 00 	vmovaps %ymm0,0x1a0(%rax)
    53f3:	00 
    53f4:	c5 fc 29 80 c0 01 00 	vmovaps %ymm0,0x1c0(%rax)
    53fb:	00 
    53fc:	c5 fc 29 80 e0 01 00 	vmovaps %ymm0,0x1e0(%rax)
    5403:	00 
    5404:	48 05 00 02 00 00    	add    $0x200,%rax
    540a:	48 39 c3             	cmp    %rax,%rbx
    540d:	75 82                	jne    5391 <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x111>
    540f:	48 8d 85 a0 fe fc ff 	lea    -0x30160(%rbp),%rax
    5416:	48 89 85 50 fe fc ff 	mov    %rax,-0x301b0(%rbp)
    541d:	49 89 c6             	mov    %rax,%r14
    5420:	48 8d 85 a8 ff fc ff 	lea    -0x30058(%rbp),%rax
    5427:	48 89 85 78 fe fc ff 	mov    %rax,-0x30188(%rbp)
    542e:	48 8d 85 88 fe fc ff 	lea    -0x30178(%rbp),%rax
    5435:	48 89 85 68 fe fc ff 	mov    %rax,-0x30198(%rbp)
    543c:	48 8d 85 98 fe fc ff 	lea    -0x30168(%rbp),%rax
    5443:	48 89 85 58 fe fc ff 	mov    %rax,-0x301a8(%rbp)
    544a:	48 8d 85 90 fe fc ff 	lea    -0x30170(%rbp),%rax
    5451:	48 89 85 60 fe fc ff 	mov    %rax,-0x301a0(%rbp)
    5458:	c5 f8 77             	vzeroupper 
    545b:	e8 e0 bc ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    5460:	49 89 c7             	mov    %rax,%r15
    5463:	48 8b 85 70 fe fc ff 	mov    -0x30190(%rbp),%rax
    546a:	4c 89 e2             	mov    %r12,%rdx
    546d:	48 89 de             	mov    %rbx,%rsi
    5470:	4c 89 ef             	mov    %r13,%rdi
    5473:	ff d0                	callq  *%rax
    5475:	e8 c6 bc ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    547a:	48 8b bd 68 fe fc ff 	mov    -0x30198(%rbp),%rdi
    5481:	4c 89 fe             	mov    %r15,%rsi
    5484:	48 89 85 88 fe fc ff 	mov    %rax,-0x30178(%rbp)
    548b:	e8 10 f1 ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5490:	48 8b b5 58 fe fc ff 	mov    -0x301a8(%rbp),%rsi
    5497:	48 8b bd 60 fe fc ff 	mov    -0x301a0(%rbp),%rdi
    549e:	48 89 85 98 fe fc ff 	mov    %rax,-0x30168(%rbp)
    54a5:	e8 86 f0 ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    54aa:	c5 fb 10 85 90 fe fc 	vmovsd -0x30170(%rbp),%xmm0
    54b1:	ff 
    54b2:	49 83 c6 08          	add    $0x8,%r14
    54b6:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    54bc:	4c 39 b5 78 fe fc ff 	cmp    %r14,-0x30188(%rbp)
    54c3:	75 96                	jne    545b <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x1db>
    54c5:	48 8b 95 78 fe fc ff 	mov    -0x30188(%rbp),%rdx
    54cc:	48 8b bd 50 fe fc ff 	mov    -0x301b0(%rbp),%rdi
    54d3:	48 8d b5 20 ff fc ff 	lea    -0x300e0(%rbp),%rsi
    54da:	e8 61 f3 ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    54df:	48 8b 3d ea 3a 00 00 	mov    0x3aea(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    54e6:	48 8d 35 33 f1 ff ff 	lea    -0xecd(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    54ed:	e8 5e bc ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    54f2:	48 89 c7             	mov    %rax,%rdi
    54f5:	e8 16 ea ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    54fa:	89 c6                	mov    %eax,%esi
    54fc:	e8 ff bc ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    5501:	48 89 c7             	mov    %rax,%rdi
    5504:	e8 f7 e9 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    5509:	89 c6                	mov    %eax,%esi
    550b:	e8 c0 bc ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    5510:	c5 fb 10 85 20 ff fc 	vmovsd -0x300e0(%rbp),%xmm0
    5517:	ff 
    5518:	48 89 c7             	mov    %rax,%rdi
    551b:	e8 30 ea ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5520:	e8 0b bd ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    5525:	c5 fa 10 45 bc       	vmovss -0x44(%rbp),%xmm0
    552a:	c5 f8 2e 05 0e 10 00 	vucomiss 0x100e(%rip),%xmm0        # 6540 <_IO_stdin_used+0x540>
    5531:	00 
    5532:	7a 29                	jp     555d <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2dd>
    5534:	75 27                	jne    555d <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2dd>
    5536:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    553a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5541:	00 00 
    5543:	75 37                	jne    557c <void test_type<float, void (float (*) [128], float (*) [128], float (*) [128])>(void (&)(float (*) [128], float (*) [128], float (*) [128]))+0x2fc>
    5545:	48 81 c4 80 01 03 00 	add    $0x30180,%rsp
    554c:	5b                   	pop    %rbx
    554d:	41 5a                	pop    %r10
    554f:	41 5c                	pop    %r12
    5551:	41 5d                	pop    %r13
    5553:	41 5e                	pop    %r14
    5555:	41 5f                	pop    %r15
    5557:	5d                   	pop    %rbp
    5558:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    555c:	c3                   	retq   
    555d:	48 8d 0d 74 0c 00 00 	lea    0xc74(%rip),%rcx        # 61d8 <_IO_stdin_used+0x1d8>
    5564:	ba 56 00 00 00       	mov    $0x56,%edx
    5569:	48 8d 35 1a 0e 00 00 	lea    0xe1a(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    5570:	48 8d 3d 01 0b 00 00 	lea    0xb01(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    5577:	e8 f4 bb ff ff       	callq  1170 <__assert_fail@plt>
    557c:	e8 3f bc ff ff       	callq  11c0 <__stack_chk_fail@plt>
    5581:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5588:	00 00 00 00 
    558c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005590 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))>:
    5590:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    5595:	48 83 e4 e0          	and    $0xffffffffffffffe0,%rsp
    5599:	41 ff 72 f8          	pushq  -0x8(%r10)
    559d:	55                   	push   %rbp
    559e:	48 89 e5             	mov    %rsp,%rbp
    55a1:	41 57                	push   %r15
    55a3:	41 56                	push   %r14
    55a5:	41 55                	push   %r13
    55a7:	41 54                	push   %r12
    55a9:	41 52                	push   %r10
    55ab:	53                   	push   %rbx
    55ac:	4c 8d 9c 24 00 00 fa 	lea    -0x60000(%rsp),%r11
    55b3:	ff 
    55b4:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    55bb:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    55c0:	4c 39 dc             	cmp    %r11,%rsp
    55c3:	75 ef                	jne    55b4 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x24>
    55c5:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
    55cc:	ba 00 00 02 00       	mov    $0x20000,%edx
    55d1:	31 f6                	xor    %esi,%esi
    55d3:	48 89 bd 78 fe f9 ff 	mov    %rdi,-0x60188(%rbp)
    55da:	48 8d 9d c0 ff fd ff 	lea    -0x20040(%rbp),%rbx
    55e1:	48 89 df             	mov    %rbx,%rdi
    55e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    55eb:	00 00 
    55ed:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    55f1:	31 c0                	xor    %eax,%eax
    55f3:	4c 8d a5 b0 ff fb ff 	lea    -0x40050(%rbp),%r12
    55fa:	e8 61 bb ff ff       	callq  1160 <memset@plt>
    55ff:	48 8d b5 b0 03 fc ff 	lea    -0x3fc50(%rbp),%rsi
    5606:	c5 fd 28 05 f2 0e 00 	vmovapd 0xef2(%rip),%ymm0        # 6500 <_IO_stdin_used+0x500>
    560d:	00 
    560e:	4c 89 e1             	mov    %r12,%rcx
    5611:	48 89 f2             	mov    %rsi,%rdx
    5614:	48 8d bd b0 03 fe ff 	lea    -0x1fc50(%rbp),%rdi
    561b:	48 89 c8             	mov    %rcx,%rax
    561e:	66 90                	xchg   %ax,%ax
    5620:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    5624:	48 83 c0 20          	add    $0x20,%rax
    5628:	48 39 d0             	cmp    %rdx,%rax
    562b:	75 f3                	jne    5620 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x90>
    562d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    5634:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    563b:	48 39 fa             	cmp    %rdi,%rdx
    563e:	75 db                	jne    561b <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x8b>
    5640:	4c 8d ad b0 ff f9 ff 	lea    -0x60050(%rbp),%r13
    5647:	c5 fd 28 05 d1 0e 00 	vmovapd 0xed1(%rip),%ymm0        # 6520 <_IO_stdin_used+0x520>
    564e:	00 
    564f:	4c 89 e9             	mov    %r13,%rcx
    5652:	48 8d 95 b0 03 fa ff 	lea    -0x5fc50(%rbp),%rdx
    5659:	48 89 c8             	mov    %rcx,%rax
    565c:	0f 1f 40 00          	nopl   0x0(%rax)
    5660:	c5 fd 29 00          	vmovapd %ymm0,(%rax)
    5664:	48 83 c0 20          	add    $0x20,%rax
    5668:	48 39 d0             	cmp    %rdx,%rax
    566b:	75 f3                	jne    5660 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xd0>
    566d:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
    5674:	48 81 c1 00 04 00 00 	add    $0x400,%rcx
    567b:	48 39 f2             	cmp    %rsi,%rdx
    567e:	75 d9                	jne    5659 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0xc9>
    5680:	48 8d 85 a0 fe f9 ff 	lea    -0x60160(%rbp),%rax
    5687:	48 89 85 50 fe f9 ff 	mov    %rax,-0x601b0(%rbp)
    568e:	49 89 c6             	mov    %rax,%r14
    5691:	48 8d 85 a8 ff f9 ff 	lea    -0x60058(%rbp),%rax
    5698:	48 89 85 60 fe f9 ff 	mov    %rax,-0x601a0(%rbp)
    569f:	48 8d 85 88 fe f9 ff 	lea    -0x60178(%rbp),%rax
    56a6:	48 89 85 68 fe f9 ff 	mov    %rax,-0x60198(%rbp)
    56ad:	48 8d 85 98 fe f9 ff 	lea    -0x60168(%rbp),%rax
    56b4:	48 89 85 70 fe f9 ff 	mov    %rax,-0x60190(%rbp)
    56bb:	48 8d 85 90 fe f9 ff 	lea    -0x60170(%rbp),%rax
    56c2:	48 89 85 58 fe f9 ff 	mov    %rax,-0x601a8(%rbp)
    56c9:	c5 f8 77             	vzeroupper 
    56cc:	e8 6f ba ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    56d1:	49 89 c7             	mov    %rax,%r15
    56d4:	48 8b 85 78 fe f9 ff 	mov    -0x60188(%rbp),%rax
    56db:	4c 89 ea             	mov    %r13,%rdx
    56de:	4c 89 e6             	mov    %r12,%rsi
    56e1:	48 89 df             	mov    %rbx,%rdi
    56e4:	ff d0                	callq  *%rax
    56e6:	e8 55 ba ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    56eb:	48 8b bd 68 fe f9 ff 	mov    -0x60198(%rbp),%rdi
    56f2:	4c 89 fe             	mov    %r15,%rsi
    56f5:	48 89 85 88 fe f9 ff 	mov    %rax,-0x60178(%rbp)
    56fc:	e8 9f ee ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5701:	48 8b b5 70 fe f9 ff 	mov    -0x60190(%rbp),%rsi
    5708:	48 8b bd 58 fe f9 ff 	mov    -0x601a8(%rbp),%rdi
    570f:	48 89 85 98 fe f9 ff 	mov    %rax,-0x60168(%rbp)
    5716:	e8 15 ee ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    571b:	c5 fb 10 85 90 fe f9 	vmovsd -0x60170(%rbp),%xmm0
    5722:	ff 
    5723:	49 83 c6 08          	add    $0x8,%r14
    5727:	c4 c1 7b 11 46 f8    	vmovsd %xmm0,-0x8(%r14)
    572d:	4c 3b b5 60 fe f9 ff 	cmp    -0x601a0(%rbp),%r14
    5734:	75 96                	jne    56cc <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x13c>
    5736:	48 8b bd 50 fe f9 ff 	mov    -0x601b0(%rbp),%rdi
    573d:	4c 89 f2             	mov    %r14,%rdx
    5740:	48 8d b5 20 ff f9 ff 	lea    -0x600e0(%rbp),%rsi
    5747:	e8 f4 f0 ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    574c:	48 8b 3d 7d 38 00 00 	mov    0x387d(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    5753:	48 8d 35 c6 ee ff ff 	lea    -0x113a(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    575a:	e8 f1 b9 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    575f:	48 89 c7             	mov    %rax,%rdi
    5762:	e8 a9 e7 ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    5767:	89 c6                	mov    %eax,%esi
    5769:	e8 92 ba ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    576e:	48 89 c7             	mov    %rax,%rdi
    5771:	e8 8a e7 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    5776:	89 c6                	mov    %eax,%esi
    5778:	e8 53 ba ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    577d:	c5 fb 10 85 20 ff f9 	vmovsd -0x600e0(%rbp),%xmm0
    5784:	ff 
    5785:	48 89 c7             	mov    %rax,%rdi
    5788:	e8 c3 e7 ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    578d:	e8 9e ba ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    5792:	c5 fb 10 05 56 0c 00 	vmovsd 0xc56(%rip),%xmm0        # 63f0 <_IO_stdin_used+0x3f0>
    5799:	00 
    579a:	c5 f9 2e 45 b8       	vucomisd -0x48(%rbp),%xmm0
    579f:	7a 29                	jp     57ca <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x23a>
    57a1:	75 27                	jne    57ca <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x23a>
    57a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57a7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    57ae:	00 00 
    57b0:	75 37                	jne    57e9 <void test_type<double, void (double (*) [128], double (*) [128], double (*) [128])>(void (&)(double (*) [128], double (*) [128], double (*) [128]))+0x259>
    57b2:	48 81 c4 80 01 06 00 	add    $0x60180,%rsp
    57b9:	5b                   	pop    %rbx
    57ba:	41 5a                	pop    %r10
    57bc:	41 5c                	pop    %r12
    57be:	41 5d                	pop    %r13
    57c0:	41 5e                	pop    %r14
    57c2:	41 5f                	pop    %r15
    57c4:	5d                   	pop    %rbp
    57c5:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    57c9:	c3                   	retq   
    57ca:	48 8d 0d 67 0a 00 00 	lea    0xa67(%rip),%rcx        # 6238 <_IO_stdin_used+0x238>
    57d1:	ba 56 00 00 00       	mov    $0x56,%edx
    57d6:	48 8d 35 ad 0b 00 00 	lea    0xbad(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    57dd:	48 8d 3d 94 08 00 00 	lea    0x894(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    57e4:	e8 87 b9 ff ff       	callq  1170 <__assert_fail@plt>
    57e9:	e8 d2 b9 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    57ee:	66 90                	xchg   %ax,%ax

00000000000057f0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))>:
    57f0:	41 57                	push   %r15
    57f2:	41 56                	push   %r14
    57f4:	41 55                	push   %r13
    57f6:	41 54                	push   %r12
    57f8:	55                   	push   %rbp
    57f9:	53                   	push   %rbx
    57fa:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5801:	ff 
    5802:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5809:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    580e:	4c 39 dc             	cmp    %r11,%rsp
    5811:	75 ef                	jne    5802 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x12>
    5813:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    581a:	ba 00 00 04 00       	mov    $0x40000,%edx
    581f:	31 f6                	xor    %esi,%esi
    5821:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    5826:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    582d:	00 
    582e:	48 89 df             	mov    %rbx,%rdi
    5831:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5838:	00 00 
    583a:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    5841:	00 
    5842:	31 c0                	xor    %eax,%eax
    5844:	e8 17 b9 ff ff       	callq  1160 <memset@plt>
    5849:	d9 05 f5 0c 00 00    	flds   0xcf5(%rip)        # 6544 <_IO_stdin_used+0x544>
    584f:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    5856:	00 
    5857:	48 89 ca             	mov    %rcx,%rdx
    585a:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    5861:	00 
    5862:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5869:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5870:	db 38                	fstpt  (%rax)
    5872:	db 28                	fldt   (%rax)
    5874:	48 83 c0 10          	add    $0x10,%rax
    5878:	48 39 d0             	cmp    %rdx,%rax
    587b:	75 f3                	jne    5870 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x80>
    587d:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5884:	48 39 f2             	cmp    %rsi,%rdx
    5887:	75 d9                	jne    5862 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x72>
    5889:	dd d8                	fstp   %st(0)
    588b:	d9 05 b7 0c 00 00    	flds   0xcb7(%rip)        # 6548 <_IO_stdin_used+0x548>
    5891:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    5898:	00 
    5899:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    58a0:	db 38                	fstpt  (%rax)
    58a2:	db 28                	fldt   (%rax)
    58a4:	48 83 c0 10          	add    $0x10,%rax
    58a8:	48 39 d0             	cmp    %rdx,%rax
    58ab:	75 f3                	jne    58a0 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xb0>
    58ad:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    58b4:	48 39 ca             	cmp    %rcx,%rdx
    58b7:	75 e0                	jne    5899 <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0xa9>
    58b9:	dd d8                	fstp   %st(0)
    58bb:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    58c0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    58c5:	49 89 c4             	mov    %rax,%r12
    58c8:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    58cf:	00 
    58d0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    58d5:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    58da:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    58df:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    58e4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    58e9:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    58f0:	00 
    58f1:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    58f8:	00 
    58f9:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    58fe:	e8 3d b8 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    5903:	48 89 c5             	mov    %rax,%rbp
    5906:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    590b:	4c 89 fa             	mov    %r15,%rdx
    590e:	4c 89 f6             	mov    %r14,%rsi
    5911:	48 89 df             	mov    %rbx,%rdi
    5914:	ff d0                	callq  *%rax
    5916:	e8 25 b8 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    591b:	48 89 ee             	mov    %rbp,%rsi
    591e:	4c 89 ef             	mov    %r13,%rdi
    5921:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    5926:	e8 75 ec ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    592b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    5930:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    5935:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    593a:	e8 f1 eb ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    593f:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    5945:	49 83 c4 08          	add    $0x8,%r12
    5949:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    5950:	4c 3b 64 24 10       	cmp    0x10(%rsp),%r12
    5955:	75 a7                	jne    58fe <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x10e>
    5957:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    595c:	4c 89 e2             	mov    %r12,%rdx
    595f:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    5966:	00 
    5967:	e8 d4 ee ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    596c:	48 8b 3d 5d 36 00 00 	mov    0x365d(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    5973:	48 8d 35 a6 ec ff ff 	lea    -0x135a(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    597a:	e8 d1 b7 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    597f:	48 89 c7             	mov    %rax,%rdi
    5982:	e8 89 e5 ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    5987:	89 c6                	mov    %eax,%esi
    5989:	e8 72 b8 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    598e:	48 89 c7             	mov    %rax,%rdi
    5991:	e8 6a e5 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    5996:	89 c6                	mov    %eax,%esi
    5998:	e8 33 b8 ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    599d:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    59a4:	00 00 
    59a6:	48 89 c7             	mov    %rax,%rdi
    59a9:	e8 a2 e5 ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    59ae:	e8 7d b8 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    59b3:	d9 05 87 0b 00 00    	flds   0xb87(%rip)        # 6540 <_IO_stdin_used+0x540>
    59b9:	db ac 24 50 01 0c 00 	fldt   0xc0150(%rsp)
    59c0:	df e9                	fucomip %st(1),%st
    59c2:	dd d8                	fstp   %st(0)
    59c4:	7a 27                	jp     59ed <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1fd>
    59c6:	75 25                	jne    59ed <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x1fd>
    59c8:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    59cf:	00 
    59d0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    59d7:	00 00 
    59d9:	75 31                	jne    5a0c <void test_type<long double, void (long double (*) [128], long double (*) [128], long double (*) [128])>(void (&)(long double (*) [128], long double (*) [128], long double (*) [128]))+0x21c>
    59db:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    59e2:	5b                   	pop    %rbx
    59e3:	5d                   	pop    %rbp
    59e4:	41 5c                	pop    %r12
    59e6:	41 5d                	pop    %r13
    59e8:	41 5e                	pop    %r14
    59ea:	41 5f                	pop    %r15
    59ec:	c3                   	retq   
    59ed:	48 8d 0d ac 08 00 00 	lea    0x8ac(%rip),%rcx        # 62a0 <_IO_stdin_used+0x2a0>
    59f4:	ba 56 00 00 00       	mov    $0x56,%edx
    59f9:	48 8d 35 8a 09 00 00 	lea    0x98a(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    5a00:	48 8d 3d 71 06 00 00 	lea    0x671(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    5a07:	e8 64 b7 ff ff       	callq  1170 <__assert_fail@plt>
    5a0c:	e8 af b7 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    5a11:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5a18:	00 00 00 00 
    5a1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000005a20 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))>:
    5a20:	41 57                	push   %r15
    5a22:	41 56                	push   %r14
    5a24:	41 55                	push   %r13
    5a26:	41 54                	push   %r12
    5a28:	55                   	push   %rbp
    5a29:	53                   	push   %rbx
    5a2a:	4c 8d 9c 24 00 00 f4 	lea    -0xc0000(%rsp),%r11
    5a31:	ff 
    5a32:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    5a39:	48 83 0c 24 00       	orq    $0x0,(%rsp)
    5a3e:	4c 39 dc             	cmp    %r11,%rsp
    5a41:	75 ef                	jne    5a32 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x12>
    5a43:	48 81 ec 78 01 00 00 	sub    $0x178,%rsp
    5a4a:	ba 00 00 04 00       	mov    $0x40000,%edx
    5a4f:	31 f6                	xor    %esi,%esi
    5a51:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    5a56:	48 8d 9c 24 60 01 08 	lea    0x80160(%rsp),%rbx
    5a5d:	00 
    5a5e:	48 89 df             	mov    %rbx,%rdi
    5a61:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5a68:	00 00 
    5a6a:	48 89 84 24 68 01 0c 	mov    %rax,0xc0168(%rsp)
    5a71:	00 
    5a72:	31 c0                	xor    %eax,%eax
    5a74:	e8 e7 b6 ff ff       	callq  1160 <memset@plt>
    5a79:	48 8d 8c 24 60 09 04 	lea    0x40960(%rsp),%rcx
    5a80:	00 
    5a81:	c5 f9 6f 05 c7 0a 00 	vmovdqa 0xac7(%rip),%xmm0        # 6550 <_IO_stdin_used+0x550>
    5a88:	00 
    5a89:	48 89 ca             	mov    %rcx,%rdx
    5a8c:	48 8d b4 24 60 09 08 	lea    0x80960(%rsp),%rsi
    5a93:	00 
    5a94:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5a9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    5aa0:	c5 f9 7f 00          	vmovdqa %xmm0,(%rax)
    5aa4:	48 83 c0 10          	add    $0x10,%rax
    5aa8:	48 39 d0             	cmp    %rdx,%rax
    5aab:	75 f3                	jne    5aa0 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x80>
    5aad:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5ab4:	48 39 f2             	cmp    %rsi,%rdx
    5ab7:	75 db                	jne    5a94 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x74>
    5ab9:	c5 f9 6f 05 9f 0a 00 	vmovdqa 0xa9f(%rip),%xmm0        # 6560 <_IO_stdin_used+0x560>
    5ac0:	00 
    5ac1:	48 8d 94 24 60 09 00 	lea    0x960(%rsp),%rdx
    5ac8:	00 
    5ac9:	48 8d 82 00 f8 ff ff 	lea    -0x800(%rdx),%rax
    5ad0:	c5 f9 7f 00          	vmovdqa %xmm0,(%rax)
    5ad4:	48 83 c0 10          	add    $0x10,%rax
    5ad8:	48 39 d0             	cmp    %rdx,%rax
    5adb:	75 f3                	jne    5ad0 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xb0>
    5add:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
    5ae4:	48 39 ca             	cmp    %rcx,%rdx
    5ae7:	75 e0                	jne    5ac9 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0xa9>
    5ae9:	48 8d 44 24 50       	lea    0x50(%rsp),%rax
    5aee:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5af3:	49 89 c4             	mov    %rax,%r12
    5af6:	48 8d 84 24 58 01 00 	lea    0x158(%rsp),%rax
    5afd:	00 
    5afe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5b03:	48 8d 44 24 48       	lea    0x48(%rsp),%rax
    5b08:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
    5b0d:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    5b12:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    5b17:	4c 8d bc 24 60 01 00 	lea    0x160(%rsp),%r15
    5b1e:	00 
    5b1f:	4c 8d b4 24 60 01 04 	lea    0x40160(%rsp),%r14
    5b26:	00 
    5b27:	4c 8d 6c 24 38       	lea    0x38(%rsp),%r13
    5b2c:	e8 0f b6 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    5b31:	48 89 c5             	mov    %rax,%rbp
    5b34:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    5b39:	4c 89 fa             	mov    %r15,%rdx
    5b3c:	4c 89 f6             	mov    %r14,%rsi
    5b3f:	48 89 df             	mov    %rbx,%rdi
    5b42:	ff d0                	callq  *%rax
    5b44:	e8 f7 b5 ff ff       	callq  1140 <std::chrono::_V2::system_clock::now()@plt>
    5b49:	48 89 ee             	mov    %rbp,%rsi
    5b4c:	4c 89 ef             	mov    %r13,%rdi
    5b4f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    5b54:	e8 47 ea ff ff       	callq  45a0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    5b59:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
    5b5e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    5b63:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    5b68:	e8 c3 e9 ff ff       	callq  4530 <std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)>
    5b6d:	c5 fb 10 44 24 40    	vmovsd 0x40(%rsp),%xmm0
    5b73:	49 83 c4 08          	add    $0x8,%r12
    5b77:	c4 c1 7b 11 44 24 f8 	vmovsd %xmm0,-0x8(%r12)
    5b7e:	4c 3b 64 24 18       	cmp    0x18(%rsp),%r12
    5b83:	75 a7                	jne    5b2c <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x10c>
    5b85:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    5b8a:	4c 89 e2             	mov    %r12,%rdx
    5b8d:	48 8d b4 24 d0 00 00 	lea    0xd0(%rsp),%rsi
    5b94:	00 
    5b95:	e8 a6 ec ff ff       	callq  4840 <void std::nth_element<std::chrono::duration<double, std::ratio<1l, 1000l> >*>(std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*, std::chrono::duration<double, std::ratio<1l, 1000l> >*)>
    5b9a:	48 8b 3d 2f 34 00 00 	mov    0x342f(%rip),%rdi        # 8fd0 <std::cout@GLIBCXX_3.4>
    5ba1:	48 8d 35 78 ea ff ff 	lea    -0x1588(%rip),%rsi        # 4620 <std::fixed(std::ios_base&)>
    5ba8:	e8 a3 b5 ff ff       	callq  1150 <std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))@plt>
    5bad:	48 89 c7             	mov    %rax,%rdi
    5bb0:	e8 5b e3 ff ff       	callq  3f10 <std::setprecision(int) [clone .constprop.0]>
    5bb5:	89 c6                	mov    %eax,%esi
    5bb7:	e8 44 b6 ff ff       	callq  1200 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setprecision)@plt>
    5bbc:	48 89 c7             	mov    %rax,%rdi
    5bbf:	e8 3c e3 ff ff       	callq  3f00 <std::setw(int) [clone .constprop.0]>
    5bc4:	89 c6                	mov    %eax,%esi
    5bc6:	e8 05 b6 ff ff       	callq  11d0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::_Setw)@plt>
    5bcb:	c5 fb 10 84 24 d0 00 	vmovsd 0xd0(%rsp),%xmm0
    5bd2:	00 00 
    5bd4:	48 89 c7             	mov    %rax,%rdi
    5bd7:	e8 74 e3 ff ff       	callq  3f50 <std::chrono::duration<double, std::ratio<1l, 1000l> >::count() const [clone .isra.0]>
    5bdc:	e8 4f b6 ff ff       	callq  1230 <std::ostream::operator<<(double)@plt>
    5be1:	c5 f9 6f 0d 87 09 00 	vmovdqa 0x987(%rip),%xmm1        # 6570 <_IO_stdin_used+0x570>
    5be8:	00 
    5be9:	c5 f9 6f 84 24 50 01 	vmovdqa 0xc0150(%rsp),%xmm0
    5bf0:	0c 00 
    5bf2:	e8 29 b6 ff ff       	callq  1220 <__eqtf2@plt>
    5bf7:	48 85 c0             	test   %rax,%rax
    5bfa:	75 25                	jne    5c21 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x201>
    5bfc:	48 8b 84 24 68 01 0c 	mov    0xc0168(%rsp),%rax
    5c03:	00 
    5c04:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    5c0b:	00 00 
    5c0d:	75 31                	jne    5c40 <void test_type<__float128, void (__float128 (*) [128], __float128 (*) [128], __float128 (*) [128])>(void (&)(__float128 (*) [128], __float128 (*) [128], __float128 (*) [128]))+0x220>
    5c0f:	48 81 c4 78 01 0c 00 	add    $0xc0178,%rsp
    5c16:	5b                   	pop    %rbx
    5c17:	5d                   	pop    %rbp
    5c18:	41 5c                	pop    %r12
    5c1a:	41 5d                	pop    %r13
    5c1c:	41 5e                	pop    %r14
    5c1e:	41 5f                	pop    %r15
    5c20:	c3                   	retq   
    5c21:	48 8d 0d f0 06 00 00 	lea    0x6f0(%rip),%rcx        # 6318 <_IO_stdin_used+0x318>
    5c28:	ba 56 00 00 00       	mov    $0x56,%edx
    5c2d:	48 8d 35 56 07 00 00 	lea    0x756(%rip),%rsi        # 638a <_IO_stdin_used+0x38a>
    5c34:	48 8d 3d 3d 04 00 00 	lea    0x43d(%rip),%rdi        # 6078 <_IO_stdin_used+0x78>
    5c3b:	e8 30 b5 ff ff       	callq  1170 <__assert_fail@plt>
    5c40:	e8 7b b5 ff ff       	callq  11c0 <__stack_chk_fail@plt>
    5c45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    5c4c:	00 00 00 
    5c4f:	90                   	nop

0000000000005c50 <__libc_csu_init>:
    5c50:	f3 0f 1e fa          	endbr64 
    5c54:	41 57                	push   %r15
    5c56:	4c 8d 3d a3 30 00 00 	lea    0x30a3(%rip),%r15        # 8d00 <__frame_dummy_init_array_entry>
    5c5d:	41 56                	push   %r14
    5c5f:	49 89 d6             	mov    %rdx,%r14
    5c62:	41 55                	push   %r13
    5c64:	49 89 f5             	mov    %rsi,%r13
    5c67:	41 54                	push   %r12
    5c69:	41 89 fc             	mov    %edi,%r12d
    5c6c:	55                   	push   %rbp
    5c6d:	48 8d 2d 9c 30 00 00 	lea    0x309c(%rip),%rbp        # 8d10 <__do_global_dtors_aux_fini_array_entry>
    5c74:	53                   	push   %rbx
    5c75:	4c 29 fd             	sub    %r15,%rbp
    5c78:	48 83 ec 08          	sub    $0x8,%rsp
    5c7c:	e8 7f b3 ff ff       	callq  1000 <_init>
    5c81:	48 c1 fd 03          	sar    $0x3,%rbp
    5c85:	74 1f                	je     5ca6 <__libc_csu_init+0x56>
    5c87:	31 db                	xor    %ebx,%ebx
    5c89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    5c90:	4c 89 f2             	mov    %r14,%rdx
    5c93:	4c 89 ee             	mov    %r13,%rsi
    5c96:	44 89 e7             	mov    %r12d,%edi
    5c99:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    5c9d:	48 83 c3 01          	add    $0x1,%rbx
    5ca1:	48 39 dd             	cmp    %rbx,%rbp
    5ca4:	75 ea                	jne    5c90 <__libc_csu_init+0x40>
    5ca6:	48 83 c4 08          	add    $0x8,%rsp
    5caa:	5b                   	pop    %rbx
    5cab:	5d                   	pop    %rbp
    5cac:	41 5c                	pop    %r12
    5cae:	41 5d                	pop    %r13
    5cb0:	41 5e                	pop    %r14
    5cb2:	41 5f                	pop    %r15
    5cb4:	c3                   	retq   
    5cb5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    5cbc:	00 00 00 00 

0000000000005cc0 <__libc_csu_fini>:
    5cc0:	f3 0f 1e fa          	endbr64 
    5cc4:	c3                   	retq   

Desensamblado de la sección .fini:

0000000000005cc8 <_fini>:
    5cc8:	f3 0f 1e fa          	endbr64 
    5ccc:	48 83 ec 08          	sub    $0x8,%rsp
    5cd0:	48 83 c4 08          	add    $0x8,%rsp
    5cd4:	c3                   	retq   
