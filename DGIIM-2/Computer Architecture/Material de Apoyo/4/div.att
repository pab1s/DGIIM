
div:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000001020 <.plt>:
    1020:	ff 35 9a 2f 00 00    	pushq  0x2f9a(%rip)        # 3fc0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 9b 2f 00 00 	bnd jmpq *0x2f9b(%rip)        # 3fc8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop

Desensamblado de la sección .plt.got:

0000000000001040 <__cxa_finalize@plt>:
    1040:	f3 0f 1e fa          	endbr64 
    1044:	f2 ff 25 ad 2f 00 00 	bnd jmpq *0x2fad(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    104b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .plt.sec:

0000000000001050 <__stack_chk_fail@plt>:
    1050:	f3 0f 1e fa          	endbr64 
    1054:	f2 ff 25 75 2f 00 00 	bnd jmpq *0x2f75(%rip)        # 3fd0 <__stack_chk_fail@GLIBC_2.4>
    105b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .text:

0000000000001060 <main>:
    1060:	f3 0f 1e fa          	endbr64 
    1064:	55                   	push   %rbp
    1065:	41 89 fb             	mov    %edi,%r11d
    1068:	45 31 c0             	xor    %r8d,%r8d
    106b:	48 81 ec b0 0f 00 00 	sub    $0xfb0,%rsp
    1072:	48 89 e5             	mov    %rsp,%rbp
    1075:	48 89 ef             	mov    %rbp,%rdi
    1078:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    107f:	00 00 
    1081:	48 89 84 24 a8 0f 00 	mov    %rax,0xfa8(%rsp)
    1088:	00 
    1089:	31 c0                	xor    %eax,%eax
    108b:	e8 50 03 00 00       	callq  13e0 <std::array<int, 1000ul>::end()>
    1090:	48 89 c6             	mov    %rax,%rsi
    1093:	e8 38 03 00 00       	callq  13d0 <std::array<int, 1000ul>::begin()>
    1098:	49 89 c1             	mov    %rax,%r9
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    10a0:	4c 89 cf             	mov    %r9,%rdi
    10a3:	41 ff c0             	inc    %r8d
    10a6:	e8 45 03 00 00       	callq  13f0 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]>
    10ab:	44 89 c2             	mov    %r8d,%edx
    10ae:	4c 89 cf             	mov    %r9,%rdi
    10b1:	e8 7a 01 00 00       	callq  1230 <void div<int*, int>(int*, int*, int)>
    10b6:	41 81 f8 e8 03 00 00 	cmp    $0x3e8,%r8d
    10bd:	75 e1                	jne    10a0 <main+0x40>
    10bf:	45 31 d2             	xor    %r10d,%r10d
    10c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    10c8:	4c 89 cf             	mov    %r9,%rdi
    10cb:	e8 20 03 00 00       	callq  13f0 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]>
    10d0:	c5 f1 57 c9          	vxorpd %xmm1,%xmm1,%xmm1
    10d4:	c4 c1 73 2a c2       	vcvtsi2sd %r10d,%xmm1,%xmm0
    10d9:	4c 89 cf             	mov    %r9,%rdi
    10dc:	41 ff c2             	inc    %r10d
    10df:	c5 fb 58 05 79 0f 00 	vaddsd 0xf79(%rip),%xmm0,%xmm0        # 2060 <_IO_stdin_used+0x60>
    10e6:	00 
    10e7:	e8 74 01 00 00       	callq  1260 <void div<int*, double>(int*, int*, double)>
    10ec:	41 81 fa e8 03 00 00 	cmp    $0x3e8,%r10d
    10f3:	75 d3                	jne    10c8 <main+0x68>
    10f5:	e8 e6 03 00 00       	callq  14e0 <std::array<int, 1000ul>::size() const [clone .constprop.0]>
    10fa:	49 89 c0             	mov    %rax,%r8
    10fd:	31 d2                	xor    %edx,%edx
    10ff:	49 63 c3             	movslq %r11d,%rax
    1102:	49 f7 f0             	div    %r8
    1105:	48 89 ef             	mov    %rbp,%rdi
    1108:	48 89 d6             	mov    %rdx,%rsi
    110b:	e8 90 02 00 00       	callq  13a0 <std::array<int, 1000ul>::operator[](unsigned long)>
    1110:	8b 00                	mov    (%rax),%eax
    1112:	48 8b 8c 24 a8 0f 00 	mov    0xfa8(%rsp),%rcx
    1119:	00 
    111a:	64 48 2b 0c 25 28 00 	sub    %fs:0x28,%rcx
    1121:	00 00 
    1123:	75 09                	jne    112e <main+0xce>
    1125:	48 81 c4 b0 0f 00 00 	add    $0xfb0,%rsp
    112c:	5d                   	pop    %rbp
    112d:	c3                   	retq   
    112e:	e8 1d ff ff ff       	callq  1050 <__stack_chk_fail@plt>
    1133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    113a:	00 00 00 
    113d:	0f 1f 00             	nopl   (%rax)

0000000000001140 <_start>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	31 ed                	xor    %ebp,%ebp
    1146:	49 89 d1             	mov    %rdx,%r9
    1149:	5e                   	pop    %rsi
    114a:	48 89 e2             	mov    %rsp,%rdx
    114d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1151:	50                   	push   %rax
    1152:	54                   	push   %rsp
    1153:	4c 8d 05 06 04 00 00 	lea    0x406(%rip),%r8        # 1560 <__libc_csu_fini>
    115a:	48 8d 0d 8f 03 00 00 	lea    0x38f(%rip),%rcx        # 14f0 <__libc_csu_init>
    1161:	48 8d 3d f8 fe ff ff 	lea    -0x108(%rip),%rdi        # 1060 <main>
    1168:	ff 15 72 2e 00 00    	callq  *0x2e72(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    116e:	f4                   	hlt    
    116f:	90                   	nop

0000000000001170 <deregister_tm_clones>:
    1170:	48 8d 3d 99 2e 00 00 	lea    0x2e99(%rip),%rdi        # 4010 <__TMC_END__>
    1177:	48 8d 05 92 2e 00 00 	lea    0x2e92(%rip),%rax        # 4010 <__TMC_END__>
    117e:	48 39 f8             	cmp    %rdi,%rax
    1181:	74 15                	je     1198 <deregister_tm_clones+0x28>
    1183:	48 8b 05 4e 2e 00 00 	mov    0x2e4e(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    118a:	48 85 c0             	test   %rax,%rax
    118d:	74 09                	je     1198 <deregister_tm_clones+0x28>
    118f:	ff e0                	jmpq   *%rax
    1191:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1198:	c3                   	retq   
    1199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011a0 <register_tm_clones>:
    11a0:	48 8d 3d 69 2e 00 00 	lea    0x2e69(%rip),%rdi        # 4010 <__TMC_END__>
    11a7:	48 8d 35 62 2e 00 00 	lea    0x2e62(%rip),%rsi        # 4010 <__TMC_END__>
    11ae:	48 29 fe             	sub    %rdi,%rsi
    11b1:	48 89 f0             	mov    %rsi,%rax
    11b4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    11b8:	48 c1 f8 03          	sar    $0x3,%rax
    11bc:	48 01 c6             	add    %rax,%rsi
    11bf:	48 d1 fe             	sar    %rsi
    11c2:	74 14                	je     11d8 <register_tm_clones+0x38>
    11c4:	48 8b 05 25 2e 00 00 	mov    0x2e25(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    11cb:	48 85 c0             	test   %rax,%rax
    11ce:	74 08                	je     11d8 <register_tm_clones+0x38>
    11d0:	ff e0                	jmpq   *%rax
    11d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    11d8:	c3                   	retq   
    11d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011e0 <__do_global_dtors_aux>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	80 3d 25 2e 00 00 00 	cmpb   $0x0,0x2e25(%rip)        # 4010 <__TMC_END__>
    11eb:	75 2b                	jne    1218 <__do_global_dtors_aux+0x38>
    11ed:	55                   	push   %rbp
    11ee:	48 83 3d 02 2e 00 00 	cmpq   $0x0,0x2e02(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    11f5:	00 
    11f6:	48 89 e5             	mov    %rsp,%rbp
    11f9:	74 0c                	je     1207 <__do_global_dtors_aux+0x27>
    11fb:	48 8b 3d 06 2e 00 00 	mov    0x2e06(%rip),%rdi        # 4008 <__dso_handle>
    1202:	e8 39 fe ff ff       	callq  1040 <__cxa_finalize@plt>
    1207:	e8 64 ff ff ff       	callq  1170 <deregister_tm_clones>
    120c:	c6 05 fd 2d 00 00 01 	movb   $0x1,0x2dfd(%rip)        # 4010 <__TMC_END__>
    1213:	5d                   	pop    %rbp
    1214:	c3                   	retq   
    1215:	0f 1f 00             	nopl   (%rax)
    1218:	c3                   	retq   
    1219:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001220 <frame_dummy>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	e9 77 ff ff ff       	jmpq   11a0 <register_tm_clones>
    1229:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001230 <void div<int*, int>(int*, int*, int)>:
    1230:	89 d1                	mov    %edx,%ecx
    1232:	48 39 f7             	cmp    %rsi,%rdi
    1235:	74 1a                	je     1251 <void div<int*, int>(int*, int*, int)+0x21>
    1237:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    123e:	00 00 
    1240:	8b 07                	mov    (%rdi),%eax
    1242:	48 83 c7 04          	add    $0x4,%rdi
    1246:	99                   	cltd   
    1247:	f7 f9                	idiv   %ecx
    1249:	89 47 fc             	mov    %eax,-0x4(%rdi)
    124c:	48 39 fe             	cmp    %rdi,%rsi
    124f:	75 ef                	jne    1240 <void div<int*, int>(int*, int*, int)+0x10>
    1251:	c3                   	retq   
    1252:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1259:	00 00 00 00 
    125d:	0f 1f 00             	nopl   (%rax)

0000000000001260 <void div<int*, double>(int*, int*, double)>:
    1260:	c5 fb 10 d0          	vmovsd %xmm0,%xmm0,%xmm2
    1264:	48 39 f7             	cmp    %rsi,%rdi
    1267:	0f 84 16 01 00 00    	je     1383 <void div<int*, double>(int*, int*, double)+0x123>
    126d:	48 8d 56 fc          	lea    -0x4(%rsi),%rdx
    1271:	48 29 fa             	sub    %rdi,%rdx
    1274:	49 89 d0             	mov    %rdx,%r8
    1277:	49 c1 e8 02          	shr    $0x2,%r8
    127b:	48 89 f8             	mov    %rdi,%rax
    127e:	49 8d 48 01          	lea    0x1(%r8),%rcx
    1282:	48 83 fa 18          	cmp    $0x18,%rdx
    1286:	0f 86 f8 00 00 00    	jbe    1384 <void div<int*, double>(int*, int*, double)+0x124>
    128c:	48 89 ca             	mov    %rcx,%rdx
    128f:	48 c1 ea 03          	shr    $0x3,%rdx
    1293:	48 c1 e2 05          	shl    $0x5,%rdx
    1297:	c4 e2 7d 19 d8       	vbroadcastsd %xmm0,%ymm3
    129c:	48 01 fa             	add    %rdi,%rdx
    129f:	90                   	nop
    12a0:	c5 fe 6f 00          	vmovdqu (%rax),%ymm0
    12a4:	48 83 c0 20          	add    $0x20,%rax
    12a8:	c5 fe e6 c8          	vcvtdq2pd %xmm0,%ymm1
    12ac:	c4 e3 7d 39 c0 01    	vextracti128 $0x1,%ymm0,%xmm0
    12b2:	c5 f5 5e cb          	vdivpd %ymm3,%ymm1,%ymm1
    12b6:	c5 fe e6 c0          	vcvtdq2pd %xmm0,%ymm0
    12ba:	c5 fd 5e c3          	vdivpd %ymm3,%ymm0,%ymm0
    12be:	c5 fd e6 c9          	vcvttpd2dq %ymm1,%xmm1
    12c2:	c5 fd e6 c0          	vcvttpd2dq %ymm0,%xmm0
    12c6:	c4 e3 75 38 c0 01    	vinserti128 $0x1,%xmm0,%ymm1,%ymm0
    12cc:	c5 fe 7f 40 e0       	vmovdqu %ymm0,-0x20(%rax)
    12d1:	48 39 c2             	cmp    %rax,%rdx
    12d4:	75 ca                	jne    12a0 <void div<int*, double>(int*, int*, double)+0x40>
    12d6:	48 89 ca             	mov    %rcx,%rdx
    12d9:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    12dd:	48 8d 04 97          	lea    (%rdi,%rdx,4),%rax
    12e1:	48 39 d1             	cmp    %rdx,%rcx
    12e4:	0f 84 96 00 00 00    	je     1380 <void div<int*, double>(int*, int*, double)+0x120>
    12ea:	49 29 d0             	sub    %rdx,%r8
    12ed:	48 29 d1             	sub    %rdx,%rcx
    12f0:	49 83 f8 02          	cmp    $0x2,%r8
    12f4:	76 3f                	jbe    1335 <void div<int*, double>(int*, int*, double)+0xd5>
    12f6:	48 8d 14 97          	lea    (%rdi,%rdx,4),%rdx
    12fa:	c5 fa 6f 02          	vmovdqu (%rdx),%xmm0
    12fe:	c5 fb 12 da          	vmovddup %xmm2,%xmm3
    1302:	c5 fa e6 c8          	vcvtdq2pd %xmm0,%xmm1
    1306:	c5 f9 70 c0 ee       	vpshufd $0xee,%xmm0,%xmm0
    130b:	c5 f1 5e cb          	vdivpd %xmm3,%xmm1,%xmm1
    130f:	c5 fa e6 c0          	vcvtdq2pd %xmm0,%xmm0
    1313:	c5 f9 5e c3          	vdivpd %xmm3,%xmm0,%xmm0
    1317:	c4 e3 75 18 c0 01    	vinsertf128 $0x1,%xmm0,%ymm1,%ymm0
    131d:	c5 fd e6 c0          	vcvttpd2dq %ymm0,%xmm0
    1321:	c5 fa 7f 02          	vmovdqu %xmm0,(%rdx)
    1325:	48 89 ca             	mov    %rcx,%rdx
    1328:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
    132c:	48 8d 04 90          	lea    (%rax,%rdx,4),%rax
    1330:	48 39 d1             	cmp    %rdx,%rcx
    1333:	74 4b                	je     1380 <void div<int*, double>(int*, int*, double)+0x120>
    1335:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
    1339:	c5 fb 2a 08          	vcvtsi2sdl (%rax),%xmm0,%xmm1
    133d:	c5 f3 5e ca          	vdivsd %xmm2,%xmm1,%xmm1
    1341:	c5 fb 2c d1          	vcvttsd2si %xmm1,%edx
    1345:	89 10                	mov    %edx,(%rax)
    1347:	48 8d 50 04          	lea    0x4(%rax),%rdx
    134b:	48 39 d6             	cmp    %rdx,%rsi
    134e:	74 30                	je     1380 <void div<int*, double>(int*, int*, double)+0x120>
    1350:	c5 fb 2a 48 04       	vcvtsi2sdl 0x4(%rax),%xmm0,%xmm1
    1355:	c5 f3 5e ca          	vdivsd %xmm2,%xmm1,%xmm1
    1359:	c5 fb 2c d1          	vcvttsd2si %xmm1,%edx
    135d:	89 50 04             	mov    %edx,0x4(%rax)
    1360:	48 8d 50 08          	lea    0x8(%rax),%rdx
    1364:	48 39 d6             	cmp    %rdx,%rsi
    1367:	74 17                	je     1380 <void div<int*, double>(int*, int*, double)+0x120>
    1369:	c5 fb 2a 40 08       	vcvtsi2sdl 0x8(%rax),%xmm0,%xmm0
    136e:	c5 fb 5e c2          	vdivsd %xmm2,%xmm0,%xmm0
    1372:	c5 fb 2c d0          	vcvttsd2si %xmm0,%edx
    1376:	89 50 08             	mov    %edx,0x8(%rax)
    1379:	c5 f8 77             	vzeroupper 
    137c:	c3                   	retq   
    137d:	0f 1f 00             	nopl   (%rax)
    1380:	c5 f8 77             	vzeroupper 
    1383:	c3                   	retq   
    1384:	31 d2                	xor    %edx,%edx
    1386:	e9 5f ff ff ff       	jmpq   12ea <void div<int*, double>(int*, int*, double)+0x8a>
    138b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001390 <std::__array_traits<int, 1000ul>::_S_ref(int const (&) [1000], unsigned long)>:
    1390:	48 8d 04 b7          	lea    (%rdi,%rsi,4),%rax
    1394:	c3                   	retq   
    1395:	90                   	nop
    1396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    139d:	00 00 00 

00000000000013a0 <std::array<int, 1000ul>::operator[](unsigned long)>:
    13a0:	eb ee                	jmp    1390 <std::__array_traits<int, 1000ul>::_S_ref(int const (&) [1000], unsigned long)>
    13a2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13a9:	00 00 00 00 
    13ad:	0f 1f 00             	nopl   (%rax)

00000000000013b0 <std::__array_traits<int, 1000ul>::_S_ptr(int const (&) [1000])>:
    13b0:	48 89 f8             	mov    %rdi,%rax
    13b3:	c3                   	retq   
    13b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13bb:	00 00 00 00 
    13bf:	90                   	nop

00000000000013c0 <std::array<int, 1000ul>::data()>:
    13c0:	eb ee                	jmp    13b0 <std::__array_traits<int, 1000ul>::_S_ptr(int const (&) [1000])>
    13c2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13c9:	00 00 00 00 
    13cd:	0f 1f 00             	nopl   (%rax)

00000000000013d0 <std::array<int, 1000ul>::begin()>:
    13d0:	eb ee                	jmp    13c0 <std::array<int, 1000ul>::data()>
    13d2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    13d9:	00 00 00 00 
    13dd:	0f 1f 00             	nopl   (%rax)

00000000000013e0 <std::array<int, 1000ul>::end()>:
    13e0:	e8 db ff ff ff       	callq  13c0 <std::array<int, 1000ul>::data()>
    13e5:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
    13eb:	c3                   	retq   
    13ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000013f0 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]>:
    13f0:	48 39 fe             	cmp    %rdi,%rsi
    13f3:	0f 84 cd 00 00 00    	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    13f9:	48 89 f2             	mov    %rsi,%rdx
    13fc:	48 29 fa             	sub    %rdi,%rdx
    13ff:	48 83 ea 04          	sub    $0x4,%rdx
    1403:	48 89 d1             	mov    %rdx,%rcx
    1406:	48 c1 e9 02          	shr    $0x2,%rcx
    140a:	48 89 f8             	mov    %rdi,%rax
    140d:	48 ff c1             	inc    %rcx
    1410:	48 83 fa 18          	cmp    $0x18,%rdx
    1414:	0f 86 ba 00 00 00    	jbe    14d4 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xe4>
    141a:	48 89 ca             	mov    %rcx,%rdx
    141d:	48 c1 ea 03          	shr    $0x3,%rdx
    1421:	48 c1 e2 05          	shl    $0x5,%rdx
    1425:	c5 fd 6f 05 f3 0b 00 	vmovdqa 0xbf3(%rip),%ymm0        # 2020 <_IO_stdin_used+0x20>
    142c:	00 
    142d:	c5 fd 6f 15 0b 0c 00 	vmovdqa 0xc0b(%rip),%ymm2        # 2040 <_IO_stdin_used+0x40>
    1434:	00 
    1435:	48 01 fa             	add    %rdi,%rdx
    1438:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    143f:	00 
    1440:	c5 fd 6f c8          	vmovdqa %ymm0,%ymm1
    1444:	c5 fe 7f 08          	vmovdqu %ymm1,(%rax)
    1448:	48 83 c0 20          	add    $0x20,%rax
    144c:	c5 fd fe c2          	vpaddd %ymm2,%ymm0,%ymm0
    1450:	48 39 d0             	cmp    %rdx,%rax
    1453:	75 eb                	jne    1440 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0x50>
    1455:	48 89 ca             	mov    %rcx,%rdx
    1458:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
    145c:	48 8d 3c 97          	lea    (%rdi,%rdx,4),%rdi
    1460:	89 d0                	mov    %edx,%eax
    1462:	48 39 d1             	cmp    %rdx,%rcx
    1465:	74 69                	je     14d0 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xe0>
    1467:	c5 f8 77             	vzeroupper 
    146a:	48 8d 57 04          	lea    0x4(%rdi),%rdx
    146e:	89 07                	mov    %eax,(%rdi)
    1470:	8d 48 01             	lea    0x1(%rax),%ecx
    1473:	48 39 d6             	cmp    %rdx,%rsi
    1476:	74 4e                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    1478:	48 8d 57 08          	lea    0x8(%rdi),%rdx
    147c:	89 4f 04             	mov    %ecx,0x4(%rdi)
    147f:	8d 48 02             	lea    0x2(%rax),%ecx
    1482:	48 39 d6             	cmp    %rdx,%rsi
    1485:	74 3f                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    1487:	48 8d 57 0c          	lea    0xc(%rdi),%rdx
    148b:	89 4f 08             	mov    %ecx,0x8(%rdi)
    148e:	8d 48 03             	lea    0x3(%rax),%ecx
    1491:	48 39 d6             	cmp    %rdx,%rsi
    1494:	74 30                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    1496:	48 8d 57 10          	lea    0x10(%rdi),%rdx
    149a:	89 4f 0c             	mov    %ecx,0xc(%rdi)
    149d:	8d 48 04             	lea    0x4(%rax),%ecx
    14a0:	48 39 d6             	cmp    %rdx,%rsi
    14a3:	74 21                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    14a5:	48 8d 57 14          	lea    0x14(%rdi),%rdx
    14a9:	89 4f 10             	mov    %ecx,0x10(%rdi)
    14ac:	8d 48 05             	lea    0x5(%rax),%ecx
    14af:	48 39 d6             	cmp    %rdx,%rsi
    14b2:	74 12                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    14b4:	48 8d 57 18          	lea    0x18(%rdi),%rdx
    14b8:	89 4f 14             	mov    %ecx,0x14(%rdi)
    14bb:	83 c0 06             	add    $0x6,%eax
    14be:	48 39 d6             	cmp    %rdx,%rsi
    14c1:	74 03                	je     14c6 <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0xd6>
    14c3:	89 47 18             	mov    %eax,0x18(%rdi)
    14c6:	c3                   	retq   
    14c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    14ce:	00 00 
    14d0:	c5 f8 77             	vzeroupper 
    14d3:	c3                   	retq   
    14d4:	31 c0                	xor    %eax,%eax
    14d6:	eb 92                	jmp    146a <void std::iota<int*, int>(int*, int*, int) [clone .constprop.0]+0x7a>
    14d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    14df:	00 

00000000000014e0 <std::array<int, 1000ul>::size() const [clone .constprop.0]>:
    14e0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
    14e5:	c3                   	retq   
    14e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    14ed:	00 00 00 

00000000000014f0 <__libc_csu_init>:
    14f0:	f3 0f 1e fa          	endbr64 
    14f4:	41 57                	push   %r15
    14f6:	4c 8d 3d bb 28 00 00 	lea    0x28bb(%rip),%r15        # 3db8 <__frame_dummy_init_array_entry>
    14fd:	41 56                	push   %r14
    14ff:	49 89 d6             	mov    %rdx,%r14
    1502:	41 55                	push   %r13
    1504:	49 89 f5             	mov    %rsi,%r13
    1507:	41 54                	push   %r12
    1509:	41 89 fc             	mov    %edi,%r12d
    150c:	55                   	push   %rbp
    150d:	48 8d 2d ac 28 00 00 	lea    0x28ac(%rip),%rbp        # 3dc0 <__do_global_dtors_aux_fini_array_entry>
    1514:	53                   	push   %rbx
    1515:	4c 29 fd             	sub    %r15,%rbp
    1518:	48 83 ec 08          	sub    $0x8,%rsp
    151c:	e8 df fa ff ff       	callq  1000 <_init>
    1521:	48 c1 fd 03          	sar    $0x3,%rbp
    1525:	74 1f                	je     1546 <__libc_csu_init+0x56>
    1527:	31 db                	xor    %ebx,%ebx
    1529:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1530:	4c 89 f2             	mov    %r14,%rdx
    1533:	4c 89 ee             	mov    %r13,%rsi
    1536:	44 89 e7             	mov    %r12d,%edi
    1539:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    153d:	48 83 c3 01          	add    $0x1,%rbx
    1541:	48 39 dd             	cmp    %rbx,%rbp
    1544:	75 ea                	jne    1530 <__libc_csu_init+0x40>
    1546:	48 83 c4 08          	add    $0x8,%rsp
    154a:	5b                   	pop    %rbx
    154b:	5d                   	pop    %rbp
    154c:	41 5c                	pop    %r12
    154e:	41 5d                	pop    %r13
    1550:	41 5e                	pop    %r14
    1552:	41 5f                	pop    %r15
    1554:	c3                   	retq   
    1555:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    155c:	00 00 00 00 

0000000000001560 <__libc_csu_fini>:
    1560:	f3 0f 1e fa          	endbr64 
    1564:	c3                   	retq   

Desensamblado de la sección .fini:

0000000000001568 <_fini>:
    1568:	f3 0f 1e fa          	endbr64 
    156c:	48 83 ec 08          	sub    $0x8,%rsp
    1570:	48 83 c4 08          	add    $0x8,%rsp
    1574:	c3                   	retq   
