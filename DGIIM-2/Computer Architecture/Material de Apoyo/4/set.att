
set:     formato del fichero elf64-x86-64


Desensamblado de la sección .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 e1 2f 00 00 	mov    0x2fe1(%rip),%rax        # 3ff0 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	callq  *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	retq   

Desensamblado de la sección .plt:

0000000000001020 <.plt>:
    1020:	ff 35 1a 2f 00 00    	pushq  0x2f1a(%rip)        # 3f40 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 1b 2f 00 00 	bnd jmpq *0x2f1b(%rip)        # 3f48 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	pushq  $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmpq 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	pushq  $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmpq 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	pushq  $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmpq 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	pushq  $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmpq 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	pushq  $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmpq 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	pushq  $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmpq 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	pushq  $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmpq 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	pushq  $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmpq 1020 <.plt>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	pushq  $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmpq 1020 <.plt>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	pushq  $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmpq 1020 <.plt>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	pushq  $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmpq 1020 <.plt>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	pushq  $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmpq 1020 <.plt>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	pushq  $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmpq 1020 <.plt>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	pushq  $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmpq 1020 <.plt>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	pushq  $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmpq 1020 <.plt>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	pushq  $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmpq 1020 <.plt>
    112f:	90                   	nop
    1130:	f3 0f 1e fa          	endbr64 
    1134:	68 10 00 00 00       	pushq  $0x10
    1139:	f2 e9 e1 fe ff ff    	bnd jmpq 1020 <.plt>
    113f:	90                   	nop

Desensamblado de la sección .plt.got:

0000000000001140 <__cxa_finalize@plt>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	f2 ff 25 8d 2e 00 00 	bnd jmpq *0x2e8d(%rip)        # 3fd8 <__cxa_finalize@GLIBC_2.2.5>
    114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .plt.sec:

0000000000001150 <__errno_location@plt>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	f2 ff 25 f5 2d 00 00 	bnd jmpq *0x2df5(%rip)        # 3f50 <__errno_location@GLIBC_2.2.5>
    115b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	f2 ff 25 ed 2d 00 00 	bnd jmpq *0x2ded(%rip)        # 3f58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@GLIBCXX_3.4.21>
    116b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001170 <strlen@plt>:
    1170:	f3 0f 1e fa          	endbr64 
    1174:	f2 ff 25 e5 2d 00 00 	bnd jmpq *0x2de5(%rip)        # 3f60 <strlen@GLIBC_2.2.5>
    117b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001180 <std::__throw_invalid_argument(char const*)@plt>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	f2 ff 25 dd 2d 00 00 	bnd jmpq *0x2ddd(%rip)        # 3f68 <std::__throw_invalid_argument(char const*)@GLIBCXX_3.4>
    118b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 d5 2d 00 00 	bnd jmpq *0x2dd5(%rip)        # 3f70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 cd 2d 00 00 	bnd jmpq *0x2dcd(%rip)        # 3f78 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <std::__throw_logic_error(char const*)@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 c5 2d 00 00 	bnd jmpq *0x2dc5(%rip)        # 3f80 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 bd 2d 00 00 	bnd jmpq *0x2dbd(%rip)        # 3f88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 b5 2d 00 00 	bnd jmpq *0x2db5(%rip)        # 3f90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 ad 2d 00 00 	bnd jmpq *0x2dad(%rip)        # 3f98 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 a5 2d 00 00 	bnd jmpq *0x2da5(%rip)        # 3fa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <__stack_chk_fail@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 9d 2d 00 00 	bnd jmpq *0x2d9d(%rip)        # 3fa8 <__stack_chk_fail@GLIBC_2.4>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <strtol@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 95 2d 00 00 	bnd jmpq *0x2d95(%rip)        # 3fb0 <strtol@GLIBC_2.2.5>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <std::__throw_out_of_range(char const*)@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 8d 2d 00 00 	bnd jmpq *0x2d8d(%rip)        # 3fb8 <std::__throw_out_of_range(char const*)@GLIBCXX_3.4>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <_Unwind_Resume@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 85 2d 00 00 	bnd jmpq *0x2d85(%rip)        # 3fc0 <_Unwind_Resume@GCC_3.0>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    1240:	f3 0f 1e fa          	endbr64 
    1244:	f2 ff 25 7d 2d 00 00 	bnd jmpq *0x2d7d(%rip)        # 3fc8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    124b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    1250:	f3 0f 1e fa          	endbr64 
    1254:	f2 ff 25 75 2d 00 00 	bnd jmpq *0x2d75(%rip)        # 3fd0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la sección .text:

0000000000001260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
    1260:	c3                   	retq   

0000000000001261 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0] [clone .cold]>:
    1261:	4c 89 e7             	mov    %r12,%rdi
    1264:	c5 f8 77             	vzeroupper 
    1267:	e8 54 02 00 00       	callq  14c0 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
    126c:	48 89 ef             	mov    %rbp,%rdi
    126f:	e8 bc ff ff ff       	callq  1230 <_Unwind_Resume@plt>
    1274:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    127b:	00 00 00 
    127e:	66 90                	xchg   %ax,%ax

0000000000001280 <main>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	41 55                	push   %r13
    1286:	41 54                	push   %r12
    1288:	55                   	push   %rbp
    1289:	53                   	push   %rbx
    128a:	48 89 f3             	mov    %rsi,%rbx
    128d:	48 83 ec 38          	sub    $0x38,%rsp
    1291:	48 89 e5             	mov    %rsp,%rbp
    1294:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    1298:	48 89 ef             	mov    %rbp,%rdi
    129b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    12a2:	00 00 
    12a4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    12a9:	31 c0                	xor    %eax,%eax
    12ab:	e8 e0 03 00 00       	callq  1690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>
    12b0:	48 89 ef             	mov    %rbp,%rdi
    12b3:	e8 b8 03 00 00       	callq  1670 <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [clone .constprop.0]>
    12b8:	48 89 ef             	mov    %rbp,%rdi
    12bb:	41 89 c4             	mov    %eax,%r12d
    12be:	e8 cd fe ff ff       	callq  1190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    12c3:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    12c7:	48 89 ef             	mov    %rbp,%rdi
    12ca:	e8 c1 03 00 00       	callq  1690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>
    12cf:	48 89 ef             	mov    %rbp,%rdi
    12d2:	e8 99 03 00 00       	callq  1670 <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [clone .constprop.0]>
    12d7:	48 89 ef             	mov    %rbp,%rdi
    12da:	41 89 c5             	mov    %eax,%r13d
    12dd:	e8 ae fe ff ff       	callq  1190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    12e2:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    12e7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    12ee:	00 00 
    12f0:	75 15                	jne    1307 <main+0x87>
    12f2:	48 83 c4 38          	add    $0x38,%rsp
    12f6:	5b                   	pop    %rbx
    12f7:	5d                   	pop    %rbp
    12f8:	44 89 e7             	mov    %r12d,%edi
    12fb:	41 5c                	pop    %r12
    12fd:	44 89 ee             	mov    %r13d,%esi
    1300:	41 5d                	pop    %r13
    1302:	e9 69 01 00 00       	jmpq   1470 <f(int, int, int, int) [clone .constprop.0]>
    1307:	e8 f4 fe ff ff       	callq  1200 <__stack_chk_fail@plt>
    130c:	f3 0f 1e fa          	endbr64 
    1310:	49 89 c4             	mov    %rax,%r12
    1313:	eb 06                	jmp    131b <main+0x9b>
    1315:	f3 0f 1e fa          	endbr64 
    1319:	eb f5                	jmp    1310 <main+0x90>
    131b:	48 89 ef             	mov    %rbp,%rdi
    131e:	c5 f8 77             	vzeroupper 
    1321:	e8 6a fe ff ff       	callq  1190 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    1326:	4c 89 e7             	mov    %r12,%rdi
    1329:	e8 02 ff ff ff       	callq  1230 <_Unwind_Resume@plt>
    132e:	66 90                	xchg   %ax,%ax

0000000000001330 <_start>:
    1330:	f3 0f 1e fa          	endbr64 
    1334:	31 ed                	xor    %ebp,%ebp
    1336:	49 89 d1             	mov    %rdx,%r9
    1339:	5e                   	pop    %rsi
    133a:	48 89 e2             	mov    %rsp,%rdx
    133d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1341:	50                   	push   %rax
    1342:	54                   	push   %rsp
    1343:	4c 8d 05 06 04 00 00 	lea    0x406(%rip),%r8        # 1750 <__libc_csu_fini>
    134a:	48 8d 0d 8f 03 00 00 	lea    0x38f(%rip),%rcx        # 16e0 <__libc_csu_init>
    1351:	48 8d 3d 28 ff ff ff 	lea    -0xd8(%rip),%rdi        # 1280 <main>
    1358:	ff 15 8a 2c 00 00    	callq  *0x2c8a(%rip)        # 3fe8 <__libc_start_main@GLIBC_2.2.5>
    135e:	f4                   	hlt    
    135f:	90                   	nop

0000000000001360 <deregister_tm_clones>:
    1360:	48 8d 3d b1 2c 00 00 	lea    0x2cb1(%rip),%rdi        # 4018 <__TMC_END__>
    1367:	48 8d 05 aa 2c 00 00 	lea    0x2caa(%rip),%rax        # 4018 <__TMC_END__>
    136e:	48 39 f8             	cmp    %rdi,%rax
    1371:	74 15                	je     1388 <deregister_tm_clones+0x28>
    1373:	48 8b 05 66 2c 00 00 	mov    0x2c66(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable>
    137a:	48 85 c0             	test   %rax,%rax
    137d:	74 09                	je     1388 <deregister_tm_clones+0x28>
    137f:	ff e0                	jmpq   *%rax
    1381:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1388:	c3                   	retq   
    1389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001390 <register_tm_clones>:
    1390:	48 8d 3d 81 2c 00 00 	lea    0x2c81(%rip),%rdi        # 4018 <__TMC_END__>
    1397:	48 8d 35 7a 2c 00 00 	lea    0x2c7a(%rip),%rsi        # 4018 <__TMC_END__>
    139e:	48 29 fe             	sub    %rdi,%rsi
    13a1:	48 89 f0             	mov    %rsi,%rax
    13a4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    13a8:	48 c1 f8 03          	sar    $0x3,%rax
    13ac:	48 01 c6             	add    %rax,%rsi
    13af:	48 d1 fe             	sar    %rsi
    13b2:	74 14                	je     13c8 <register_tm_clones+0x38>
    13b4:	48 8b 05 3d 2c 00 00 	mov    0x2c3d(%rip),%rax        # 3ff8 <_ITM_registerTMCloneTable>
    13bb:	48 85 c0             	test   %rax,%rax
    13be:	74 08                	je     13c8 <register_tm_clones+0x38>
    13c0:	ff e0                	jmpq   *%rax
    13c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    13c8:	c3                   	retq   
    13c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000013d0 <__do_global_dtors_aux>:
    13d0:	f3 0f 1e fa          	endbr64 
    13d4:	80 3d 3d 2c 00 00 00 	cmpb   $0x0,0x2c3d(%rip)        # 4018 <__TMC_END__>
    13db:	75 2b                	jne    1408 <__do_global_dtors_aux+0x38>
    13dd:	55                   	push   %rbp
    13de:	48 83 3d f2 2b 00 00 	cmpq   $0x0,0x2bf2(%rip)        # 3fd8 <__cxa_finalize@GLIBC_2.2.5>
    13e5:	00 
    13e6:	48 89 e5             	mov    %rsp,%rbp
    13e9:	74 0c                	je     13f7 <__do_global_dtors_aux+0x27>
    13eb:	48 8b 3d 16 2c 00 00 	mov    0x2c16(%rip),%rdi        # 4008 <__dso_handle>
    13f2:	e8 49 fd ff ff       	callq  1140 <__cxa_finalize@plt>
    13f7:	e8 64 ff ff ff       	callq  1360 <deregister_tm_clones>
    13fc:	c6 05 15 2c 00 00 01 	movb   $0x1,0x2c15(%rip)        # 4018 <__TMC_END__>
    1403:	5d                   	pop    %rbp
    1404:	c3                   	retq   
    1405:	0f 1f 00             	nopl   (%rax)
    1408:	c3                   	retq   
    1409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001410 <frame_dummy>:
    1410:	f3 0f 1e fa          	endbr64 
    1414:	e9 77 ff ff ff       	jmpq   1390 <register_tm_clones>
    1419:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001420 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:
    1420:	48 85 ff             	test   %rdi,%rdi
    1423:	0f 94 c0             	sete   %al
    1426:	c3                   	retq   
    1427:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    142e:	00 00 

0000000000001430 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>:
    1430:	48 89 f0             	mov    %rsi,%rax
    1433:	48 29 f8             	sub    %rdi,%rax
    1436:	c3                   	retq   
    1437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    143e:	00 00 

0000000000001440 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
    1440:	eb ee                	jmp    1430 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>
    1442:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1449:	00 00 00 00 
    144d:	0f 1f 00             	nopl   (%rax)

0000000000001450 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [clone .constprop.0]>:
    1450:	b8 00 00 00 80       	mov    $0x80000000,%eax
    1455:	48 01 c7             	add    %rax,%rdi
    1458:	48 05 ff ff ff 7f    	add    $0x7fffffff,%rax
    145e:	48 39 c7             	cmp    %rax,%rdi
    1461:	0f 97 c0             	seta   %al
    1464:	c3                   	retq   
    1465:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    146c:	00 00 00 00 

0000000000001470 <f(int, int, int, int) [clone .constprop.0]>:
    1470:	31 c0                	xor    %eax,%eax
    1472:	39 f7                	cmp    %esi,%edi
    1474:	0f 9d c0             	setge  %al
    1477:	ff c0                	inc    %eax
    1479:	c3                   	retq   
    147a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>:
    1480:	48 89 37             	mov    %rsi,(%rdi)
    1483:	c3                   	retq   
    1484:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    148b:	00 00 00 00 
    148f:	90                   	nop

0000000000001490 <std::char_traits<char>::length(char const*)>:
    1490:	e9 db fc ff ff       	jmpq   1170 <strlen@plt>
    1495:	90                   	nop
    1496:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    149d:	00 00 00 

00000000000014a0 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>:
    14a0:	53                   	push   %rbx
    14a1:	48 89 fb             	mov    %rdi,%rbx
    14a4:	e8 a7 fc ff ff       	callq  1150 <__errno_location@plt>
    14a9:	8b 10                	mov    (%rax),%edx
    14ab:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    14b1:	89 13                	mov    %edx,(%rbx)
    14b3:	5b                   	pop    %rbx
    14b4:	c3                   	retq   
    14b5:	90                   	nop
    14b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    14bd:	00 00 00 

00000000000014c0 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>:
    14c0:	53                   	push   %rbx
    14c1:	48 89 fb             	mov    %rdi,%rbx
    14c4:	e8 87 fc ff ff       	callq  1150 <__errno_location@plt>
    14c9:	8b 10                	mov    (%rax),%edx
    14cb:	85 d2                	test   %edx,%edx
    14cd:	75 04                	jne    14d3 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()+0x13>
    14cf:	8b 13                	mov    (%rbx),%edx
    14d1:	89 10                	mov    %edx,(%rax)
    14d3:	5b                   	pop    %rbx
    14d4:	c3                   	retq   
    14d5:	90                   	nop
    14d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    14dd:	00 00 00 

00000000000014e0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>:
    14e0:	41 55                	push   %r13
    14e2:	49 89 fd             	mov    %rdi,%r13
    14e5:	48 89 f7             	mov    %rsi,%rdi
    14e8:	41 54                	push   %r12
    14ea:	49 89 d4             	mov    %rdx,%r12
    14ed:	55                   	push   %rbp
    14ee:	48 89 f5             	mov    %rsi,%rbp
    14f1:	48 83 ec 10          	sub    $0x10,%rsp
    14f5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    14fc:	00 00 
    14fe:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1503:	31 c0                	xor    %eax,%eax
    1505:	e8 16 ff ff ff       	callq  1420 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
    150a:	48 39 d6             	cmp    %rdx,%rsi
    150d:	74 04                	je     1513 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x33>
    150f:	84 c0                	test   %al,%al
    1511:	75 7b                	jne    158e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xae>
    1513:	4c 89 e6             	mov    %r12,%rsi
    1516:	48 89 ef             	mov    %rbp,%rdi
    1519:	e8 22 ff ff ff       	callq  1440 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
    151e:	48 89 04 24          	mov    %rax,(%rsp)
    1522:	48 83 f8 0f          	cmp    $0xf,%rax
    1526:	77 40                	ja     1568 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x88>
    1528:	4c 89 ef             	mov    %r13,%rdi
    152b:	e8 b0 fc ff ff       	callq  11e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
    1530:	48 89 c7             	mov    %rax,%rdi
    1533:	48 89 ee             	mov    %rbp,%rsi
    1536:	4c 89 e2             	mov    %r12,%rdx
    1539:	e8 b2 fc ff ff       	callq  11f0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>
    153e:	48 8b 34 24          	mov    (%rsp),%rsi
    1542:	4c 89 ef             	mov    %r13,%rdi
    1545:	e8 56 fc ff ff       	callq  11a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
    154a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    154f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1556:	00 00 
    1558:	75 40                	jne    159a <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xba>
    155a:	48 83 c4 10          	add    $0x10,%rsp
    155e:	5d                   	pop    %rbp
    155f:	41 5c                	pop    %r12
    1561:	41 5d                	pop    %r13
    1563:	c3                   	retq   
    1564:	0f 1f 40 00          	nopl   0x0(%rax)
    1568:	48 89 e6             	mov    %rsp,%rsi
    156b:	31 d2                	xor    %edx,%edx
    156d:	4c 89 ef             	mov    %r13,%rdi
    1570:	e8 cb fc ff ff       	callq  1240 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    1575:	48 89 c6             	mov    %rax,%rsi
    1578:	4c 89 ef             	mov    %r13,%rdi
    157b:	e8 50 fc ff ff       	callq  11d0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
    1580:	48 8b 34 24          	mov    (%rsp),%rsi
    1584:	4c 89 ef             	mov    %r13,%rdi
    1587:	e8 c4 fc ff ff       	callq  1250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
    158c:	eb 9a                	jmp    1528 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x48>
    158e:	48 8d 3d 73 0a 00 00 	lea    0xa73(%rip),%rdi        # 2008 <_IO_stdin_used+0x8>
    1595:	e8 16 fc ff ff       	callq  11b0 <std::__throw_logic_error(char const*)@plt>
    159a:	e8 61 fc ff ff       	callq  1200 <__stack_chk_fail@plt>
    159f:	90                   	nop

00000000000015a0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>:
    15a0:	e9 3b ff ff ff       	jmpq   14e0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>
    15a5:	90                   	nop
    15a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    15ad:	00 00 00 

00000000000015b0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
    15b0:	eb ee                	jmp    15a0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>
    15b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    15b9:	00 00 00 00 
    15bd:	0f 1f 00             	nopl   (%rax)

00000000000015c0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]>:
    15c0:	41 54                	push   %r12
    15c2:	55                   	push   %rbp
    15c3:	53                   	push   %rbx
    15c4:	48 89 fb             	mov    %rdi,%rbx
    15c7:	48 83 ec 20          	sub    $0x20,%rsp
    15cb:	4c 8d 64 24 0c       	lea    0xc(%rsp),%r12
    15d0:	4c 89 e7             	mov    %r12,%rdi
    15d3:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    15da:	00 00 
    15dc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    15e1:	31 c0                	xor    %eax,%eax
    15e3:	e8 b8 fe ff ff       	callq  14a0 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::_Save_errno()>
    15e8:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    15ed:	ba 0a 00 00 00       	mov    $0xa,%edx
    15f2:	48 89 df             	mov    %rbx,%rdi
    15f5:	e8 16 fc ff ff       	callq  1210 <strtol@plt>
    15fa:	48 3b 5c 24 10       	cmp    0x10(%rsp),%rbx
    15ff:	74 48                	je     1649 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]+0x89>
    1601:	48 89 c5             	mov    %rax,%rbp
    1604:	e8 47 fb ff ff       	callq  1150 <__errno_location@plt>
    1609:	83 38 22             	cmpl   $0x22,(%rax)
    160c:	74 2f                	je     163d <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]+0x7d>
    160e:	48 89 ef             	mov    %rbp,%rdi
    1611:	e8 3a fe ff ff       	callq  1450 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Range_chk::_S_chk(long, std::integral_constant<bool, true>) [clone .constprop.0]>
    1616:	84 c0                	test   %al,%al
    1618:	75 23                	jne    163d <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]+0x7d>
    161a:	4c 89 e7             	mov    %r12,%rdi
    161d:	e8 9e fe ff ff       	callq  14c0 <__gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()>
    1622:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    1627:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    162e:	00 00 
    1630:	75 23                	jne    1655 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]+0x95>
    1632:	48 83 c4 20          	add    $0x20,%rsp
    1636:	5b                   	pop    %rbx
    1637:	89 e8                	mov    %ebp,%eax
    1639:	5d                   	pop    %rbp
    163a:	41 5c                	pop    %r12
    163c:	c3                   	retq   
    163d:	48 8d 3d ee 09 00 00 	lea    0x9ee(%rip),%rdi        # 2032 <_IO_stdin_used+0x32>
    1644:	e8 d7 fb ff ff       	callq  1220 <std::__throw_out_of_range(char const*)@plt>
    1649:	48 8d 3d e2 09 00 00 	lea    0x9e2(%rip),%rdi        # 2032 <_IO_stdin_used+0x32>
    1650:	e8 2b fb ff ff       	callq  1180 <std::__throw_invalid_argument(char const*)@plt>
    1655:	e8 a6 fb ff ff       	callq  1200 <__stack_chk_fail@plt>
    165a:	f3 0f 1e fa          	endbr64 
    165e:	48 89 c5             	mov    %rax,%rbp
    1661:	e9 fb fb ff ff       	jmpq   1261 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0] [clone .cold]>
    1666:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    166d:	00 00 00 

0000000000001670 <std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) [clone .constprop.0]>:
    1670:	48 83 ec 08          	sub    $0x8,%rsp
    1674:	e8 e7 fa ff ff       	callq  1160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const@plt>
    1679:	48 89 c7             	mov    %rax,%rdi
    167c:	48 83 c4 08          	add    $0x8,%rsp
    1680:	e9 3b ff ff ff       	jmpq   15c0 <int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [clone .constprop.0]>
    1685:	90                   	nop
    1686:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    168d:	00 00 00 

0000000000001690 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>:
    1690:	41 54                	push   %r12
    1692:	49 89 fc             	mov    %rdi,%r12
    1695:	55                   	push   %rbp
    1696:	48 89 f5             	mov    %rsi,%rbp
    1699:	48 83 ec 08          	sub    $0x8,%rsp
    169d:	e8 1e fb ff ff       	callq  11c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
    16a2:	48 89 c6             	mov    %rax,%rsi
    16a5:	4c 89 e7             	mov    %r12,%rdi
    16a8:	e8 d3 fd ff ff       	callq  1480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>
    16ad:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    16b1:	48 85 ed             	test   %rbp,%rbp
    16b4:	74 0d                	je     16c3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]+0x33>
    16b6:	48 89 ef             	mov    %rbp,%rdi
    16b9:	e8 d2 fd ff ff       	callq  1490 <std::char_traits<char>::length(char const*)>
    16be:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
    16c3:	48 89 ee             	mov    %rbp,%rsi
    16c6:	4c 89 e7             	mov    %r12,%rdi
    16c9:	e8 e2 fe ff ff       	callq  15b0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
    16ce:	48 83 c4 08          	add    $0x8,%rsp
    16d2:	5d                   	pop    %rbp
    16d3:	41 5c                	pop    %r12
    16d5:	c3                   	retq   
    16d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    16dd:	00 00 00 

00000000000016e0 <__libc_csu_init>:
    16e0:	f3 0f 1e fa          	endbr64 
    16e4:	41 57                	push   %r15
    16e6:	4c 8d 3d 2b 26 00 00 	lea    0x262b(%rip),%r15        # 3d18 <__frame_dummy_init_array_entry>
    16ed:	41 56                	push   %r14
    16ef:	49 89 d6             	mov    %rdx,%r14
    16f2:	41 55                	push   %r13
    16f4:	49 89 f5             	mov    %rsi,%r13
    16f7:	41 54                	push   %r12
    16f9:	41 89 fc             	mov    %edi,%r12d
    16fc:	55                   	push   %rbp
    16fd:	48 8d 2d 1c 26 00 00 	lea    0x261c(%rip),%rbp        # 3d20 <__do_global_dtors_aux_fini_array_entry>
    1704:	53                   	push   %rbx
    1705:	4c 29 fd             	sub    %r15,%rbp
    1708:	48 83 ec 08          	sub    $0x8,%rsp
    170c:	e8 ef f8 ff ff       	callq  1000 <_init>
    1711:	48 c1 fd 03          	sar    $0x3,%rbp
    1715:	74 1f                	je     1736 <__libc_csu_init+0x56>
    1717:	31 db                	xor    %ebx,%ebx
    1719:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1720:	4c 89 f2             	mov    %r14,%rdx
    1723:	4c 89 ee             	mov    %r13,%rsi
    1726:	44 89 e7             	mov    %r12d,%edi
    1729:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    172d:	48 83 c3 01          	add    $0x1,%rbx
    1731:	48 39 dd             	cmp    %rbx,%rbp
    1734:	75 ea                	jne    1720 <__libc_csu_init+0x40>
    1736:	48 83 c4 08          	add    $0x8,%rsp
    173a:	5b                   	pop    %rbx
    173b:	5d                   	pop    %rbp
    173c:	41 5c                	pop    %r12
    173e:	41 5d                	pop    %r13
    1740:	41 5e                	pop    %r14
    1742:	41 5f                	pop    %r15
    1744:	c3                   	retq   
    1745:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    174c:	00 00 00 00 

0000000000001750 <__libc_csu_fini>:
    1750:	f3 0f 1e fa          	endbr64 
    1754:	c3                   	retq   

Desensamblado de la sección .fini:

0000000000001758 <_fini>:
    1758:	f3 0f 1e fa          	endbr64 
    175c:	48 83 ec 08          	sub    $0x8,%rsp
    1760:	48 83 c4 08          	add    $0x8,%rsp
    1764:	c3                   	retq   
