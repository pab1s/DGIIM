
multiplicacion:     formato del fichero elf64-x86-64


Desensamblado de la secci贸n .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 d1 5f 00 00 	mov    0x5fd1(%rip),%rax        # 7fe0 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Desensamblado de la secci贸n .plt:

0000000000002020 <.plt>:
    2020:	ff 35 52 5e 00 00    	pushq  0x5e52(%rip)        # 7e78 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 53 5e 00 00 	bnd jmpq *0x5e53(%rip)        # 7e80 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	pushq  $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmpq 2020 <.plt>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	pushq  $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmpq 2020 <.plt>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	pushq  $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmpq 2020 <.plt>
    226f:	90                   	nop

Desensamblado de la secci贸n .plt.got:

0000000000002270 <__cxa_finalize@plt>:
    2270:	f3 0f 1e fa          	endbr64 
    2274:	f2 ff 25 2d 5d 00 00 	bnd jmpq *0x5d2d(%rip)        # 7fa8 <__cxa_finalize@GLIBC_2.2.5>
    227b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .plt.sec:

0000000000002280 <std::chrono::_V2::system_clock::now()@plt>:
    2280:	f3 0f 1e fa          	endbr64 
    2284:	f2 ff 25 fd 5b 00 00 	bnd jmpq *0x5bfd(%rip)        # 7e88 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
    228b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002290 <std::__throw_bad_alloc()@plt>:
    2290:	f3 0f 1e fa          	endbr64 
    2294:	f2 ff 25 f5 5b 00 00 	bnd jmpq *0x5bf5(%rip)        # 7e90 <std::__throw_bad_alloc()@GLIBCXX_3.4>
    229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022a0 <__cxa_begin_catch@plt>:
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	f2 ff 25 ed 5b 00 00 	bnd jmpq *0x5bed(%rip)        # 7e98 <__cxa_begin_catch@CXXABI_1.3>
    22ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022b0 <strlen@plt>:
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	f2 ff 25 e5 5b 00 00 	bnd jmpq *0x5be5(%rip)        # 7ea0 <strlen@GLIBC_2.2.5>
    22bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022c0 <std::basic_ios<char, std::char_traits<char> >::operator!() const@plt>:
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	f2 ff 25 dd 5b 00 00 	bnd jmpq *0x5bdd(%rip)        # 7ea8 <std::basic_ios<char, std::char_traits<char> >::operator!() const@GLIBCXX_3.4>
    22cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022d0 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@plt>:
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	f2 ff 25 d5 5b 00 00 	bnd jmpq *0x5bd5(%rip)        # 7eb0 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@GLIBCXX_3.4.21>
    22db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022e0 <__cxa_allocate_exception@plt>:
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	f2 ff 25 cd 5b 00 00 	bnd jmpq *0x5bcd(%rip)        # 7eb8 <__cxa_allocate_exception@CXXABI_1.3>
    22eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000022f0 <std::__throw_length_error(char const*)@plt>:
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	f2 ff 25 c5 5b 00 00 	bnd jmpq *0x5bc5(%rip)        # 7ec0 <std::__throw_length_error(char const*)@GLIBCXX_3.4>
    22fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002300 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
    2300:	f3 0f 1e fa          	endbr64 
    2304:	f2 ff 25 bd 5b 00 00 	bnd jmpq *0x5bbd(%rip)        # 7ec8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
    230b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>:
    2310:	f3 0f 1e fa          	endbr64 
    2314:	f2 ff 25 b5 5b 00 00 	bnd jmpq *0x5bb5(%rip)        # 7ed0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@GLIBCXX_3.4.21>
    231b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002320 <std::__throw_logic_error(char const*)@plt>:
    2320:	f3 0f 1e fa          	endbr64 
    2324:	f2 ff 25 ad 5b 00 00 	bnd jmpq *0x5bad(%rip)        # 7ed8 <std::__throw_logic_error(char const*)@GLIBCXX_3.4>
    232b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002330 <__cxa_free_exception@plt>:
    2330:	f3 0f 1e fa          	endbr64 
    2334:	f2 ff 25 a5 5b 00 00 	bnd jmpq *0x5ba5(%rip)        # 7ee0 <__cxa_free_exception@CXXABI_1.3>
    233b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>:
    2340:	f3 0f 1e fa          	endbr64 
    2344:	f2 ff 25 9d 5b 00 00 	bnd jmpq *0x5b9d(%rip)        # 7ee8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@GLIBCXX_3.4.21>
    234b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>:
    2350:	f3 0f 1e fa          	endbr64 
    2354:	f2 ff 25 95 5b 00 00 	bnd jmpq *0x5b95(%rip)        # 7ef0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@GLIBCXX_3.4.21>
    235b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002360 <__cxa_atexit@plt>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	f2 ff 25 8d 5b 00 00 	bnd jmpq *0x5b8d(%rip)        # 7ef8 <__cxa_atexit@GLIBC_2.2.5>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>:
    2370:	f3 0f 1e fa          	endbr64 
    2374:	f2 ff 25 85 5b 00 00 	bnd jmpq *0x5b85(%rip)        # 7f00 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@GLIBCXX_3.4>
    237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002380 <operator new(unsigned long)@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 7d 5b 00 00 	bnd jmpq *0x5b7d(%rip)        # 7f08 <operator new(unsigned long)@GLIBCXX_3.4>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002390 <operator delete(void*, unsigned long)@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 75 5b 00 00 	bnd jmpq *0x5b75(%rip)        # 7f10 <operator delete(void*, unsigned long)@CXXABI_1.3.9>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 6d 5b 00 00 	bnd jmpq *0x5b6d(%rip)        # 7f18 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 65 5b 00 00 	bnd jmpq *0x5b65(%rip)        # 7f20 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@GLIBCXX_3.4.21>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 5d 5b 00 00 	bnd jmpq *0x5b5d(%rip)        # 7f28 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@GLIBCXX_3.4.21>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <__stack_chk_fail@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 55 5b 00 00 	bnd jmpq *0x5b55(%rip)        # 7f30 <__stack_chk_fail@GLIBC_2.4>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 4d 5b 00 00 	bnd jmpq *0x5b4d(%rip)        # 7f38 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@GLIBCXX_3.4>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <std::istream::operator>>(unsigned long&)@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 45 5b 00 00 	bnd jmpq *0x5b45(%rip)        # 7f40 <std::istream::operator>>(unsigned long&)@GLIBCXX_3.4>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__cxa_rethrow@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 3d 5b 00 00 	bnd jmpq *0x5b3d(%rip)        # 7f48 <__cxa_rethrow@CXXABI_1.3>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <std::ios_base::Init::Init()@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 35 5b 00 00 	bnd jmpq *0x5b35(%rip)        # 7f50 <std::ios_base::Init::Init()@GLIBCXX_3.4>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <memmove@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 2d 5b 00 00 	bnd jmpq *0x5b2d(%rip)        # 7f58 <memmove@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <__cxa_end_catch@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 25 5b 00 00 	bnd jmpq *0x5b25(%rip)        # 7f60 <__cxa_end_catch@CXXABI_1.3>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 1d 5b 00 00 	bnd jmpq *0x5b1d(%rip)        # 7f68 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@GLIBCXX_3.4.21>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <__cxa_throw@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 15 5b 00 00 	bnd jmpq *0x5b15(%rip)        # 7f70 <__cxa_throw@CXXABI_1.3>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <std::ostream::operator<<(int)@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 0d 5b 00 00 	bnd jmpq *0x5b0d(%rip)        # 7f78 <std::ostream::operator<<(int)@GLIBCXX_3.4>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <_Unwind_Resume@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 05 5b 00 00 	bnd jmpq *0x5b05(%rip)        # 7f80 <_Unwind_Resume@GCC_3.0>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 fd 5a 00 00 	bnd jmpq *0x5afd(%rip)        # 7f88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@GLIBCXX_3.4.21>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <std::ostream::operator<<(long)@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 f5 5a 00 00 	bnd jmpq *0x5af5(%rip)        # 7f90 <std::ostream::operator<<(long)@GLIBCXX_3.4>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <std::invalid_argument::invalid_argument(char const*)@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 ed 5a 00 00 	bnd jmpq *0x5aed(%rip)        # 7f98 <std::invalid_argument::invalid_argument(char const*)@GLIBCXX_3.4.21>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 e5 5a 00 00 	bnd jmpq *0x5ae5(%rip)        # 7fa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@GLIBCXX_3.4.21>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Desensamblado de la secci贸n .text:

00000000000024c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::~_Alloc_hider()>:
    24c0:	c3                   	retq   

00000000000024c1 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&) [clone .cold]>:
    24c1:	c5 f8 77             	vzeroupper 
    24c4:	e8 d7 fd ff ff       	callq  22a0 <__cxa_begin_catch@plt>
    24c9:	4c 89 e6             	mov    %r12,%rsi
    24cc:	4c 89 ef             	mov    %r13,%rdi
    24cf:	e8 1c 1a 00 00       	callq  3ef0 <void std::_Destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)>
    24d4:	e8 27 ff ff ff       	callq  2400 <__cxa_rethrow@plt>
    24d9:	f3 0f 1e fa          	endbr64 
    24dd:	48 89 c5             	mov    %rax,%rbp
    24e0:	c5 f8 77             	vzeroupper 
    24e3:	e8 48 ff ff ff       	callq  2430 <__cxa_end_catch@plt>
    24e8:	48 89 ef             	mov    %rbp,%rdi
    24eb:	e8 80 ff ff ff       	callq  2470 <_Unwind_Resume@plt>

00000000000024f0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0] [clone .cold]>:
    24f0:	48 89 ef             	mov    %rbp,%rdi
    24f3:	c5 f8 77             	vzeroupper 
    24f6:	e8 05 19 00 00       	callq  3e00 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~_Vector_base()>
    24fb:	4c 89 e7             	mov    %r12,%rdi
    24fe:	e8 6d ff ff ff       	callq  2470 <_Unwind_Resume@plt>
    2503:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    250a:	00 00 00 
    250d:	0f 1f 00             	nopl   (%rax)

0000000000002510 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>:
    2510:	48 83 ec 08          	sub    $0x8,%rsp
    2514:	48 8d 3d 06 5b 00 00 	lea    0x5b06(%rip),%rdi        # 8021 <std::__ioinit>
    251b:	e8 f0 fe ff ff       	callq  2410 <std::ios_base::Init::Init()@plt>
    2520:	48 8b 3d d1 5a 00 00 	mov    0x5ad1(%rip),%rdi        # 7ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    2527:	48 8d 15 da 5a 00 00 	lea    0x5ada(%rip),%rdx        # 8008 <__dso_handle>
    252e:	48 8d 35 ec 5a 00 00 	lea    0x5aec(%rip),%rsi        # 8021 <std::__ioinit>
    2535:	48 83 c4 08          	add    $0x8,%rsp
    2539:	e9 22 fe ff ff       	jmpq   2360 <__cxa_atexit@plt>
    253e:	66 90                	xchg   %ax,%ax

0000000000002540 <_GLOBAL__sub_I_main>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	eb ca                	jmp    2510 <__static_initialization_and_destruction_0(int, int) [clone .constprop.0]>
    2546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    254d:	00 00 00 

0000000000002550 <main>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	41 57                	push   %r15
    2556:	41 56                	push   %r14
    2558:	41 55                	push   %r13
    255a:	41 54                	push   %r12
    255c:	55                   	push   %rbp
    255d:	53                   	push   %rbx
    255e:	48 81 ec a8 02 00 00 	sub    $0x2a8,%rsp
    2565:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    256c:	00 00 
    256e:	48 89 84 24 98 02 00 	mov    %rax,0x298(%rsp)
    2575:	00 
    2576:	31 c0                	xor    %eax,%eax
    2578:	83 ff 02             	cmp    $0x2,%edi
    257b:	0f 85 30 05 00 00    	jne    2ab1 <main+0x561>
    2581:	48 8b 76 08          	mov    0x8(%rsi),%rsi
    2585:	48 8d ac 24 f0 00 00 	lea    0xf0(%rsp),%rbp
    258c:	00 
    258d:	48 89 ef             	mov    %rbp,%rdi
    2590:	48 8d 9c 24 10 01 00 	lea    0x110(%rsp),%rbx
    2597:	00 
    2598:	e8 03 1d 00 00       	callq  42a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>
    259d:	ba 08 00 00 00       	mov    $0x8,%edx
    25a2:	48 89 ee             	mov    %rbp,%rsi
    25a5:	48 89 df             	mov    %rbx,%rdi
    25a8:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
    25ad:	e8 8e fe ff ff       	callq  2440 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::basic_istringstream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::_Ios_Openmode)@plt>
    25b2:	48 89 ef             	mov    %rbp,%rdi
    25b5:	e8 46 fd ff ff       	callq  2300 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    25ba:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    25bf:	48 89 df             	mov    %rbx,%rdi
    25c2:	e8 29 fe ff ff       	callq  23f0 <std::istream::operator>>(unsigned long&)@plt>
    25c7:	48 8d bc 24 88 01 00 	lea    0x188(%rsp),%rdi
    25ce:	00 
    25cf:	e8 ec fc ff ff       	callq  22c0 <std::basic_ios<char, std::char_traits<char> >::operator!() const@plt>
    25d4:	84 c0                	test   %al,%al
    25d6:	0f 85 88 04 00 00    	jne    2a64 <main+0x514>
    25dc:	48 8d 9c 24 b0 00 00 	lea    0xb0(%rsp),%rbx
    25e3:	00 
    25e4:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    25e9:	48 89 df             	mov    %rbx,%rdi
    25ec:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
    25f1:	e8 7a 1b 00 00       	callq  4170 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) [clone .isra.0]>
    25f6:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
    25fd:	00 
    25fe:	4c 8d ac 24 d0 00 00 	lea    0xd0(%rsp),%r13
    2605:	00 
    2606:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    260b:	4c 89 ea             	mov    %r13,%rdx
    260e:	48 89 c7             	mov    %rax,%rdi
    2611:	c7 84 24 d0 00 00 00 	movl   $0x0,0xd0(%rsp)
    2618:	00 00 00 00 
    261c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2621:	e8 0a 1b 00 00       	callq  4130 <std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) [clone .constprop.0] [clone .isra.0]>
    2626:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    262b:	4c 89 ef             	mov    %r13,%rdi
    262e:	e8 3d 1b 00 00       	callq  4170 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) [clone .isra.0]>
    2633:	48 8d 44 24 70       	lea    0x70(%rsp),%rax
    2638:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    263d:	4c 89 ea             	mov    %r13,%rdx
    2640:	48 89 c7             	mov    %rax,%rdi
    2643:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2648:	e8 03 1c 00 00       	callq  4250 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>
    264d:	4c 89 ef             	mov    %r13,%rdi
    2650:	e8 3b 18 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    2655:	4c 8d 4c 24 38       	lea    0x38(%rsp),%r9
    265a:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
    265f:	4c 89 cf             	mov    %r9,%rdi
    2662:	e8 b9 07 00 00       	callq  2e20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>
    2667:	4c 8d 44 24 68       	lea    0x68(%rsp),%r8
    266c:	4c 89 c7             	mov    %r8,%rdi
    266f:	e8 9c 09 00 00       	callq  3010 <std::uniform_int_distribution<int>::uniform_int_distribution(int, int) [clone .constprop.0]>
    2674:	4c 89 ca             	mov    %r9,%rdx
    2677:	4c 89 c6             	mov    %r8,%rsi
    267a:	4c 89 ef             	mov    %r13,%rdi
    267d:	e8 de 0e 00 00       	callq  3560 <std::_Bind_helper<std::__or_<std::is_integral<std::decay<std::uniform_int_distribution<int>&>::type>, std::is_enum<std::decay<std::uniform_int_distribution<int>&>::type> >::value, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>::type std::bind<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    2682:	48 89 df             	mov    %rbx,%rdi
    2685:	e8 06 11 00 00       	callq  3790 <std::vector<int, std::allocator<int> >::begin()>
    268a:	48 89 df             	mov    %rbx,%rdi
    268d:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    2692:	e8 39 11 00 00       	callq  37d0 <std::vector<int, std::allocator<int> >::end()>
    2697:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    269c:	4c 8d 64 24 58       	lea    0x58(%rsp),%r12
    26a1:	48 8d 6c 24 60       	lea    0x60(%rsp),%rbp
    26a6:	eb 27                	jmp    26cf <main+0x17f>
    26a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    26af:	00 
    26b0:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    26b5:	e8 c6 11 00 00       	callq  3880 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>
    26ba:	4c 89 ef             	mov    %r13,%rdi
    26bd:	48 89 c3             	mov    %rax,%rbx
    26c0:	e8 6b 0d 00 00       	callq  3430 <int std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::operator()<, int>()>
    26c5:	89 03                	mov    %eax,(%rbx)
    26c7:	48 89 ef             	mov    %rbp,%rdi
    26ca:	e8 c1 11 00 00       	callq  3890 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>
    26cf:	4c 89 e6             	mov    %r12,%rsi
    26d2:	48 89 ef             	mov    %rbp,%rdi
    26d5:	e8 a6 05 00 00       	callq  2c80 <bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)>
    26da:	84 c0                	test   %al,%al
    26dc:	75 d2                	jne    26b0 <main+0x160>
    26de:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
    26e3:	4c 8d 7c 24 48       	lea    0x48(%rsp),%r15
    26e8:	48 89 df             	mov    %rbx,%rdi
    26eb:	e8 10 10 00 00       	callq  3700 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin()>
    26f0:	4c 8d 74 24 50       	lea    0x50(%rsp),%r14
    26f5:	48 89 df             	mov    %rbx,%rdi
    26f8:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
    26fd:	e8 3e 10 00 00       	callq  3740 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end()>
    2702:	4c 89 fe             	mov    %r15,%rsi
    2705:	4c 89 f7             	mov    %r14,%rdi
    2708:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    270d:	e8 9e 05 00 00       	callq  2cb0 <bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)>
    2712:	84 c0                	test   %al,%al
    2714:	74 7f                	je     2795 <main+0x245>
    2716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    271d:	00 00 00 
    2720:	48 8b 7c 24 50       	mov    0x50(%rsp),%rdi
    2725:	e8 36 11 00 00       	callq  3860 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator*() const [clone .isra.0]>
    272a:	48 89 c3             	mov    %rax,%rbx
    272d:	48 89 c7             	mov    %rax,%rdi
    2730:	e8 5b 10 00 00       	callq  3790 <std::vector<int, std::allocator<int> >::begin()>
    2735:	48 89 df             	mov    %rbx,%rdi
    2738:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    273d:	e8 8e 10 00 00       	callq  37d0 <std::vector<int, std::allocator<int> >::end()>
    2742:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    2747:	eb 26                	jmp    276f <main+0x21f>
    2749:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2750:	48 8b 7c 24 60       	mov    0x60(%rsp),%rdi
    2755:	e8 26 11 00 00       	callq  3880 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>
    275a:	4c 89 ef             	mov    %r13,%rdi
    275d:	48 89 c3             	mov    %rax,%rbx
    2760:	e8 cb 0c 00 00       	callq  3430 <int std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::operator()<, int>()>
    2765:	89 03                	mov    %eax,(%rbx)
    2767:	48 89 ef             	mov    %rbp,%rdi
    276a:	e8 21 11 00 00       	callq  3890 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>
    276f:	4c 89 e6             	mov    %r12,%rsi
    2772:	48 89 ef             	mov    %rbp,%rdi
    2775:	e8 06 05 00 00       	callq  2c80 <bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)>
    277a:	84 c0                	test   %al,%al
    277c:	75 d2                	jne    2750 <main+0x200>
    277e:	4c 89 f7             	mov    %r14,%rdi
    2781:	e8 ea 10 00 00       	callq  3870 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator++() [clone .isra.0]>
    2786:	4c 89 fe             	mov    %r15,%rsi
    2789:	4c 89 f7             	mov    %r14,%rdi
    278c:	e8 1f 05 00 00       	callq  2cb0 <bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)>
    2791:	84 c0                	test   %al,%al
    2793:	75 8b                	jne    2720 <main+0x1d0>
    2795:	48 83 7c 24 40 09    	cmpq   $0x9,0x40(%rsp)
    279b:	0f 87 80 00 00 00    	ja     2821 <main+0x2d1>
    27a1:	48 8b 3d 48 58 00 00 	mov    0x5848(%rip),%rdi        # 7ff0 <std::cerr@GLIBCXX_3.4>
    27a8:	48 8d 35 75 28 00 00 	lea    0x2875(%rip),%rsi        # 5024 <_IO_stdin_used+0x24>
    27af:	e8 bc fb ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    27b4:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    27b9:	48 89 c7             	mov    %rax,%rdi
    27bc:	e8 5f 12 00 00       	callq  3a20 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)>
    27c1:	4c 8b 25 e8 57 00 00 	mov    0x57e8(%rip),%r12        # 7fb0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    27c8:	48 89 c7             	mov    %rax,%rdi
    27cb:	4c 89 e6             	mov    %r12,%rsi
    27ce:	e8 cd fb ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    27d3:	48 89 c7             	mov    %rax,%rdi
    27d6:	48 8d 35 4d 28 00 00 	lea    0x284d(%rip),%rsi        # 502a <_IO_stdin_used+0x2a>
    27dd:	e8 8e fb ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    27e2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
    27e7:	48 89 c7             	mov    %rax,%rdi
    27ea:	e8 31 12 00 00       	callq  3a20 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)>
    27ef:	48 89 c7             	mov    %rax,%rdi
    27f2:	4c 89 e6             	mov    %r12,%rsi
    27f5:	e8 a6 fb ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    27fa:	48 89 c7             	mov    %rax,%rdi
    27fd:	48 8d 35 2c 28 00 00 	lea    0x282c(%rip),%rsi        # 5030 <_IO_stdin_used+0x30>
    2804:	e8 67 fb ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    2809:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    280e:	48 89 c7             	mov    %rax,%rdi
    2811:	e8 ca 12 00 00       	callq  3ae0 <std::ostream& operator<< <std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)>
    2816:	48 89 c7             	mov    %rax,%rdi
    2819:	4c 89 e6             	mov    %r12,%rsi
    281c:	e8 7f fb ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    2821:	e8 5a fa ff ff       	callq  2280 <std::chrono::_V2::system_clock::now()@plt>
    2826:	4c 8b 6c 24 70       	mov    0x70(%rsp),%r13
    282b:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    2830:	4c 89 ef             	mov    %r13,%rdi
    2833:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    2838:	e8 03 10 00 00       	callq  3840 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::size() const [clone .isra.0]>
    283d:	49 89 c4             	mov    %rax,%r12
    2840:	4c 8b 9c 24 b0 00 00 	mov    0xb0(%rsp),%r11
    2847:	00 
    2848:	4c 8b b4 24 90 00 00 	mov    0x90(%rsp),%r14
    284f:	00 
    2850:	31 db                	xor    %ebx,%ebx
    2852:	45 31 c0             	xor    %r8d,%r8d
    2855:	48 85 c0             	test   %rax,%rax
    2858:	74 74                	je     28ce <main+0x37e>
    285a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2860:	4c 89 c6             	mov    %r8,%rsi
    2863:	4c 89 ef             	mov    %r13,%rdi
    2866:	e8 c5 0f 00 00       	callq  3830 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) [clone .isra.0]>
    286b:	4c 8b 10             	mov    (%rax),%r10
    286e:	48 8b 70 08          	mov    0x8(%rax),%rsi
    2872:	4c 89 d7             	mov    %r10,%rdi
    2875:	e8 a6 0f 00 00       	callq  3820 <std::vector<int, std::allocator<int> >::size() const [clone .isra.0]>
    287a:	49 89 c1             	mov    %rax,%r9
    287d:	48 85 c0             	test   %rax,%rax
    2880:	74 40                	je     28c2 <main+0x372>
    2882:	4c 89 c6             	mov    %r8,%rsi
    2885:	4c 89 f7             	mov    %r14,%rdi
    2888:	e8 83 0f 00 00       	callq  3810 <std::vector<int, std::allocator<int> >::operator[](unsigned long) [clone .isra.0]>
    288d:	48 89 c1             	mov    %rax,%rcx
    2890:	31 d2                	xor    %edx,%edx
    2892:	31 f6                	xor    %esi,%esi
    2894:	0f 1f 40 00          	nopl   0x0(%rax)
    2898:	4c 89 d7             	mov    %r10,%rdi
    289b:	e8 70 0f 00 00       	callq  3810 <std::vector<int, std::allocator<int> >::operator[](unsigned long) [clone .isra.0]>
    28a0:	4c 89 df             	mov    %r11,%rdi
    28a3:	49 89 c0             	mov    %rax,%r8
    28a6:	e8 65 0f 00 00       	callq  3810 <std::vector<int, std::allocator<int> >::operator[](unsigned long) [clone .isra.0]>
    28ab:	49 89 c7             	mov    %rax,%r15
    28ae:	41 8b 00             	mov    (%r8),%eax
    28b1:	8d 72 01             	lea    0x1(%rdx),%esi
    28b4:	41 0f af 07          	imul   (%r15),%eax
    28b8:	48 89 f2             	mov    %rsi,%rdx
    28bb:	01 01                	add    %eax,(%rcx)
    28bd:	4c 39 ce             	cmp    %r9,%rsi
    28c0:	72 d6                	jb     2898 <main+0x348>
    28c2:	44 8d 43 01          	lea    0x1(%rbx),%r8d
    28c6:	4c 89 c3             	mov    %r8,%rbx
    28c9:	4d 39 e0             	cmp    %r12,%r8
    28cc:	72 92                	jb     2860 <main+0x310>
    28ce:	e8 ad f9 ff ff       	callq  2280 <std::chrono::_V2::system_clock::now()@plt>
    28d3:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
    28d8:	48 89 ef             	mov    %rbp,%rdi
    28db:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    28e0:	e8 eb 10 00 00       	callq  39d0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>
    28e5:	48 89 c7             	mov    %rax,%rdi
    28e8:	e8 83 10 00 00       	callq  3970 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    28ed:	48 89 c7             	mov    %rax,%rdi
    28f0:	e8 1b 10 00 00       	callq  3910 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    28f5:	48 8b 3d bc 56 00 00 	mov    0x56bc(%rip),%rdi        # 7fb8 <std::cout@GLIBCXX_3.4>
    28fc:	48 89 c6             	mov    %rax,%rsi
    28ff:	e8 8c fb ff ff       	callq  2490 <std::ostream::operator<<(long)@plt>
    2904:	48 89 c7             	mov    %rax,%rdi
    2907:	48 8d 35 28 27 00 00 	lea    0x2728(%rip),%rsi        # 5036 <_IO_stdin_used+0x36>
    290e:	e8 5d fa ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    2913:	4c 8b 25 96 56 00 00 	mov    0x5696(%rip),%r12        # 7fb0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    291a:	48 89 c7             	mov    %rax,%rdi
    291d:	4c 89 e6             	mov    %r12,%rsi
    2920:	e8 7b fa ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    2925:	48 83 7c 24 40 09    	cmpq   $0x9,0x40(%rsp)
    292b:	77 73                	ja     29a0 <main+0x450>
    292d:	48 8b 3d bc 56 00 00 	mov    0x56bc(%rip),%rdi        # 7ff0 <std::cerr@GLIBCXX_3.4>
    2934:	48 8d 35 ef 26 00 00 	lea    0x26ef(%rip),%rsi        # 502a <_IO_stdin_used+0x2a>
    293b:	e8 30 fa ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    2940:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
    2945:	48 89 c7             	mov    %rax,%rdi
    2948:	48 89 de             	mov    %rbx,%rsi
    294b:	e8 d0 10 00 00       	callq  3a20 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)>
    2950:	48 89 c7             	mov    %rax,%rdi
    2953:	4c 89 e6             	mov    %r12,%rsi
    2956:	e8 45 fa ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    295b:	48 89 c7             	mov    %rax,%rdi
    295e:	48 8d 35 63 27 00 00 	lea    0x2763(%rip),%rsi        # 50c8 <_IO_stdin_used+0xc8>
    2965:	e8 06 fa ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    296a:	48 89 df             	mov    %rbx,%rdi
    296d:	48 89 c5             	mov    %rax,%rbp
    2970:	e8 5b 0e 00 00       	callq  37d0 <std::vector<int, std::allocator<int> >::end()>
    2975:	48 89 df             	mov    %rbx,%rdi
    2978:	49 89 c5             	mov    %rax,%r13
    297b:	e8 10 0e 00 00       	callq  3790 <std::vector<int, std::allocator<int> >::begin()>
    2980:	48 89 c7             	mov    %rax,%rdi
    2983:	4c 89 ee             	mov    %r13,%rsi
    2986:	e8 15 0f 00 00       	callq  38a0 <int std::accumulate<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int) [clone .constprop.0]>
    298b:	89 c6                	mov    %eax,%esi
    298d:	48 89 ef             	mov    %rbp,%rdi
    2990:	e8 cb fa ff ff       	callq  2460 <std::ostream::operator<<(int)@plt>
    2995:	48 89 c7             	mov    %rax,%rdi
    2998:	4c 89 e6             	mov    %r12,%rsi
    299b:	e8 00 fa ff ff       	callq  23a0 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
    29a0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    29a5:	e8 66 15 00 00       	callq  3f10 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>
    29aa:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    29af:	e8 dc 14 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    29b4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    29b9:	e8 d2 14 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    29be:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    29c3:	e8 08 f9 ff ff       	callq  22d0 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@plt>
    29c8:	48 8b 84 24 98 02 00 	mov    0x298(%rsp),%rax
    29cf:	00 
    29d0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    29d7:	00 00 
    29d9:	75 14                	jne    29ef <main+0x49f>
    29db:	48 81 c4 a8 02 00 00 	add    $0x2a8,%rsp
    29e2:	5b                   	pop    %rbx
    29e3:	5d                   	pop    %rbp
    29e4:	41 5c                	pop    %r12
    29e6:	41 5d                	pop    %r13
    29e8:	41 5e                	pop    %r14
    29ea:	31 c0                	xor    %eax,%eax
    29ec:	41 5f                	pop    %r15
    29ee:	c3                   	retq   
    29ef:	e8 dc f9 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    29f4:	f3 0f 1e fa          	endbr64 
    29f8:	48 89 c3             	mov    %rax,%rbx
    29fb:	eb 09                	jmp    2a06 <main+0x4b6>
    29fd:	f3 0f 1e fa          	endbr64 
    2a01:	48 89 c3             	mov    %rax,%rbx
    2a04:	eb 3f                	jmp    2a45 <main+0x4f5>
    2a06:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    2a0b:	c5 f8 77             	vzeroupper 
    2a0e:	e8 fd 14 00 00       	callq  3f10 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>
    2a13:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    2a18:	c5 f8 77             	vzeroupper 
    2a1b:	e8 70 14 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    2a20:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    2a25:	c5 f8 77             	vzeroupper 
    2a28:	e8 63 14 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    2a2d:	48 89 dd             	mov    %rbx,%rbp
    2a30:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
    2a35:	c5 f8 77             	vzeroupper 
    2a38:	e8 93 f8 ff ff       	callq  22d0 <std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@plt>
    2a3d:	48 89 ef             	mov    %rbp,%rdi
    2a40:	e8 2b fa ff ff       	callq  2470 <_Unwind_Resume@plt>
    2a45:	4c 89 ef             	mov    %r13,%rdi
    2a48:	c5 f8 77             	vzeroupper 
    2a4b:	e8 40 14 00 00       	callq  3e90 <std::vector<int, std::allocator<int> >::~vector()>
    2a50:	eb c1                	jmp    2a13 <main+0x4c3>
    2a52:	f3 0f 1e fa          	endbr64 
    2a56:	48 89 c3             	mov    %rax,%rbx
    2a59:	eb b8                	jmp    2a13 <main+0x4c3>
    2a5b:	f3 0f 1e fa          	endbr64 
    2a5f:	48 89 c3             	mov    %rax,%rbx
    2a62:	eb bc                	jmp    2a20 <main+0x4d0>
    2a64:	bf 10 00 00 00       	mov    $0x10,%edi
    2a69:	e8 72 f8 ff ff       	callq  22e0 <__cxa_allocate_exception@plt>
    2a6e:	48 89 c7             	mov    %rax,%rdi
    2a71:	48 8d 35 8f 25 00 00 	lea    0x258f(%rip),%rsi        # 5007 <_IO_stdin_used+0x7>
    2a78:	49 89 c4             	mov    %rax,%r12
    2a7b:	e8 20 fa ff ff       	callq  24a0 <std::invalid_argument::invalid_argument(char const*)@plt>
    2a80:	48 8b 15 39 55 00 00 	mov    0x5539(%rip),%rdx        # 7fc0 <std::invalid_argument::~invalid_argument()@GLIBCXX_3.4>
    2a87:	48 8b 35 42 55 00 00 	mov    0x5542(%rip),%rsi        # 7fd0 <typeinfo for std::invalid_argument@GLIBCXX_3.4>
    2a8e:	4c 89 e7             	mov    %r12,%rdi
    2a91:	e8 ba f9 ff ff       	callq  2450 <__cxa_throw@plt>
    2a96:	f3 0f 1e fa          	endbr64 
    2a9a:	48 89 c5             	mov    %rax,%rbp
    2a9d:	eb 91                	jmp    2a30 <main+0x4e0>
    2a9f:	f3 0f 1e fa          	endbr64 
    2aa3:	48 89 c5             	mov    %rax,%rbp
    2aa6:	eb 3b                	jmp    2ae3 <main+0x593>
    2aa8:	f3 0f 1e fa          	endbr64 
    2aac:	49 89 c4             	mov    %rax,%r12
    2aaf:	eb 42                	jmp    2af3 <main+0x5a3>
    2ab1:	bf 10 00 00 00       	mov    $0x10,%edi
    2ab6:	e8 25 f8 ff ff       	callq  22e0 <__cxa_allocate_exception@plt>
    2abb:	48 89 c7             	mov    %rax,%rdi
    2abe:	48 8d 35 e3 25 00 00 	lea    0x25e3(%rip),%rsi        # 50a8 <_IO_stdin_used+0xa8>
    2ac5:	48 89 c5             	mov    %rax,%rbp
    2ac8:	e8 d3 f9 ff ff       	callq  24a0 <std::invalid_argument::invalid_argument(char const*)@plt>
    2acd:	48 8b 15 ec 54 00 00 	mov    0x54ec(%rip),%rdx        # 7fc0 <std::invalid_argument::~invalid_argument()@GLIBCXX_3.4>
    2ad4:	48 8b 35 f5 54 00 00 	mov    0x54f5(%rip),%rsi        # 7fd0 <typeinfo for std::invalid_argument@GLIBCXX_3.4>
    2adb:	48 89 ef             	mov    %rbp,%rdi
    2ade:	e8 6d f9 ff ff       	callq  2450 <__cxa_throw@plt>
    2ae3:	4c 89 e7             	mov    %r12,%rdi
    2ae6:	c5 f8 77             	vzeroupper 
    2ae9:	e8 42 f8 ff ff       	callq  2330 <__cxa_free_exception@plt>
    2aee:	e9 3d ff ff ff       	jmpq   2a30 <main+0x4e0>
    2af3:	48 89 ef             	mov    %rbp,%rdi
    2af6:	c5 f8 77             	vzeroupper 
    2af9:	e8 02 f8 ff ff       	callq  2300 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    2afe:	4c 89 e7             	mov    %r12,%rdi
    2b01:	e8 6a f9 ff ff       	callq  2470 <_Unwind_Resume@plt>
    2b06:	f3 0f 1e fa          	endbr64 
    2b0a:	49 89 c4             	mov    %rax,%r12
    2b0d:	48 89 ef             	mov    %rbp,%rdi
    2b10:	c5 f8 77             	vzeroupper 
    2b13:	e8 18 f8 ff ff       	callq  2330 <__cxa_free_exception@plt>
    2b18:	4c 89 e7             	mov    %r12,%rdi
    2b1b:	e8 50 f9 ff ff       	callq  2470 <_Unwind_Resume@plt>

0000000000002b20 <_start>:
    2b20:	f3 0f 1e fa          	endbr64 
    2b24:	31 ed                	xor    %ebp,%ebp
    2b26:	49 89 d1             	mov    %rdx,%r9
    2b29:	5e                   	pop    %rsi
    2b2a:	48 89 e2             	mov    %rsp,%rdx
    2b2d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    2b31:	50                   	push   %rax
    2b32:	54                   	push   %rsp
    2b33:	4c 8d 05 26 18 00 00 	lea    0x1826(%rip),%r8        # 4360 <__libc_csu_fini>
    2b3a:	48 8d 0d af 17 00 00 	lea    0x17af(%rip),%rcx        # 42f0 <__libc_csu_init>
    2b41:	48 8d 3d 08 fa ff ff 	lea    -0x5f8(%rip),%rdi        # 2550 <main>
    2b48:	ff 15 8a 54 00 00    	callq  *0x548a(%rip)        # 7fd8 <__libc_start_main@GLIBC_2.2.5>
    2b4e:	f4                   	hlt    
    2b4f:	90                   	nop

0000000000002b50 <deregister_tm_clones>:
    2b50:	48 8d 3d c9 54 00 00 	lea    0x54c9(%rip),%rdi        # 8020 <__TMC_END__>
    2b57:	48 8d 05 c2 54 00 00 	lea    0x54c2(%rip),%rax        # 8020 <__TMC_END__>
    2b5e:	48 39 f8             	cmp    %rdi,%rax
    2b61:	74 15                	je     2b78 <deregister_tm_clones+0x28>
    2b63:	48 8b 05 5e 54 00 00 	mov    0x545e(%rip),%rax        # 7fc8 <_ITM_deregisterTMCloneTable>
    2b6a:	48 85 c0             	test   %rax,%rax
    2b6d:	74 09                	je     2b78 <deregister_tm_clones+0x28>
    2b6f:	ff e0                	jmpq   *%rax
    2b71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2b78:	c3                   	retq   
    2b79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002b80 <register_tm_clones>:
    2b80:	48 8d 3d 99 54 00 00 	lea    0x5499(%rip),%rdi        # 8020 <__TMC_END__>
    2b87:	48 8d 35 92 54 00 00 	lea    0x5492(%rip),%rsi        # 8020 <__TMC_END__>
    2b8e:	48 29 fe             	sub    %rdi,%rsi
    2b91:	48 89 f0             	mov    %rsi,%rax
    2b94:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2b98:	48 c1 f8 03          	sar    $0x3,%rax
    2b9c:	48 01 c6             	add    %rax,%rsi
    2b9f:	48 d1 fe             	sar    %rsi
    2ba2:	74 14                	je     2bb8 <register_tm_clones+0x38>
    2ba4:	48 8b 05 3d 54 00 00 	mov    0x543d(%rip),%rax        # 7fe8 <_ITM_registerTMCloneTable>
    2bab:	48 85 c0             	test   %rax,%rax
    2bae:	74 08                	je     2bb8 <register_tm_clones+0x38>
    2bb0:	ff e0                	jmpq   *%rax
    2bb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2bb8:	c3                   	retq   
    2bb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002bc0 <__do_global_dtors_aux>:
    2bc0:	f3 0f 1e fa          	endbr64 
    2bc4:	80 3d 55 54 00 00 00 	cmpb   $0x0,0x5455(%rip)        # 8020 <__TMC_END__>
    2bcb:	75 2b                	jne    2bf8 <__do_global_dtors_aux+0x38>
    2bcd:	55                   	push   %rbp
    2bce:	48 83 3d d2 53 00 00 	cmpq   $0x0,0x53d2(%rip)        # 7fa8 <__cxa_finalize@GLIBC_2.2.5>
    2bd5:	00 
    2bd6:	48 89 e5             	mov    %rsp,%rbp
    2bd9:	74 0c                	je     2be7 <__do_global_dtors_aux+0x27>
    2bdb:	48 8b 3d 26 54 00 00 	mov    0x5426(%rip),%rdi        # 8008 <__dso_handle>
    2be2:	e8 89 f6 ff ff       	callq  2270 <__cxa_finalize@plt>
    2be7:	e8 64 ff ff ff       	callq  2b50 <deregister_tm_clones>
    2bec:	c6 05 2d 54 00 00 01 	movb   $0x1,0x542d(%rip)        # 8020 <__TMC_END__>
    2bf3:	5d                   	pop    %rbp
    2bf4:	c3                   	retq   
    2bf5:	0f 1f 00             	nopl   (%rax)
    2bf8:	c3                   	retq   
    2bf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002c00 <frame_dummy>:
    2c00:	f3 0f 1e fa          	endbr64 
    2c04:	e9 77 ff ff ff       	jmpq   2b80 <register_tm_clones>
    2c09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002c10 <std::__size_to_integer(unsigned long)>:
    2c10:	48 89 f8             	mov    %rdi,%rax
    2c13:	c3                   	retq   
    2c14:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c1b:	00 00 00 00 
    2c1f:	90                   	nop

0000000000002c20 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>:
    2c20:	c3                   	retq   
    2c21:	90                   	nop
    2c22:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c29:	00 00 00 00 
    2c2d:	0f 1f 00             	nopl   (%rax)

0000000000002c30 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const>:
    2c30:	48 89 f8             	mov    %rdi,%rax
    2c33:	c3                   	retq   
    2c34:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c3b:	00 00 00 00 
    2c3f:	90                   	nop

0000000000002c40 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::~_Vector_impl()>:
    2c40:	c3                   	retq   
    2c41:	90                   	nop
    2c42:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c49:	00 00 00 00 
    2c4d:	0f 1f 00             	nopl   (%rax)

0000000000002c50 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator()>:
    2c50:	48 89 f8             	mov    %rdi,%rax
    2c53:	c3                   	retq   
    2c54:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c5b:	00 00 00 00 
    2c5f:	90                   	nop

0000000000002c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>:
    2c60:	48 89 f8             	mov    %rdi,%rax
    2c63:	c3                   	retq   
    2c64:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c6b:	00 00 00 00 
    2c6f:	90                   	nop

0000000000002c70 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const>:
    2c70:	48 89 f8             	mov    %rdi,%rax
    2c73:	c3                   	retq   
    2c74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c7b:	00 00 00 00 
    2c7f:	90                   	nop

0000000000002c80 <bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)>:
    2c80:	e8 eb ff ff ff       	callq  2c70 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const>
    2c85:	48 89 f7             	mov    %rsi,%rdi
    2c88:	48 89 c2             	mov    %rax,%rdx
    2c8b:	e8 e0 ff ff ff       	callq  2c70 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const>
    2c90:	48 8b 00             	mov    (%rax),%rax
    2c93:	48 39 02             	cmp    %rax,(%rdx)
    2c96:	0f 95 c0             	setne  %al
    2c99:	c3                   	retq   
    2c9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002ca0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>:
    2ca0:	48 89 f8             	mov    %rdi,%rax
    2ca3:	c3                   	retq   
    2ca4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2cab:	00 00 00 00 
    2caf:	90                   	nop

0000000000002cb0 <bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)>:
    2cb0:	e8 eb ff ff ff       	callq  2ca0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>
    2cb5:	48 89 f7             	mov    %rsi,%rdi
    2cb8:	48 89 c2             	mov    %rax,%rdx
    2cbb:	e8 e0 ff ff ff       	callq  2ca0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>
    2cc0:	48 8b 00             	mov    (%rax),%rax
    2cc3:	48 39 02             	cmp    %rax,(%rdx)
    2cc6:	0f 95 c0             	setne  %al
    2cc9:	c3                   	retq   
    2cca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002cd0 <std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>::_M_head(std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>&)>:
    2cd0:	48 89 f8             	mov    %rdi,%rax
    2cd3:	c3                   	retq   
    2cd4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2cdb:	00 00 00 00 
    2cdf:	90                   	nop

0000000000002ce0 <std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::_M_head(std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >&)>:
    2ce0:	eb ee                	jmp    2cd0 <std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>::_M_head(std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>&)>
    2ce2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2ce9:	00 00 00 00 
    2ced:	0f 1f 00             	nopl   (%rax)

0000000000002cf0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>:
    2cf0:	48 89 f8             	mov    %rdi,%rax
    2cf3:	c3                   	retq   
    2cf4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2cfb:	00 00 00 00 
    2cff:	90                   	nop

0000000000002d00 <bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&)>:
    2d00:	e8 eb ff ff ff       	callq  2cf0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
    2d05:	48 89 f7             	mov    %rsi,%rdi
    2d08:	48 89 c2             	mov    %rax,%rdx
    2d0b:	e8 e0 ff ff ff       	callq  2cf0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
    2d10:	48 8b 00             	mov    (%rax),%rax
    2d13:	48 39 02             	cmp    %rax,(%rdx)
    2d16:	0f 95 c0             	setne  %al
    2d19:	c3                   	retq   
    2d1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002d20 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>:
    2d20:	48 89 f8             	mov    %rdi,%rax
    2d23:	c3                   	retq   
    2d24:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2d2b:	00 00 00 00 
    2d2f:	90                   	nop

0000000000002d30 <bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)>:
    2d30:	e8 eb ff ff ff       	callq  2d20 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>
    2d35:	48 89 f7             	mov    %rsi,%rdi
    2d38:	48 89 c2             	mov    %rax,%rdx
    2d3b:	e8 e0 ff ff ff       	callq  2d20 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const>
    2d40:	48 8b 00             	mov    (%rax),%rax
    2d43:	48 39 02             	cmp    %rax,(%rdx)
    2d46:	0f 95 c0             	setne  %al
    2d49:	c3                   	retq   
    2d4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002d50 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>:
    2d50:	48 8b 07             	mov    (%rdi),%rax
    2d53:	48 39 06             	cmp    %rax,(%rsi)
    2d56:	48 89 f0             	mov    %rsi,%rax
    2d59:	48 0f 43 c7          	cmovae %rdi,%rax
    2d5d:	c3                   	retq   
    2d5e:	66 90                	xchg   %ax,%ax

0000000000002d60 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data()>:
    2d60:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    2d67:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    2d6e:	00 
    2d6f:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    2d76:	00 
    2d77:	c3                   	retq   
    2d78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2d7f:	00 

0000000000002d80 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl_data::_Vector_impl_data()>:
    2d80:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    2d87:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    2d8e:	00 
    2d8f:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    2d96:	00 
    2d97:	c3                   	retq   
    2d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2d9f:	00 

0000000000002da0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>:
    2da0:	48 89 f8             	mov    %rdi,%rax
    2da3:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    2daa:	00 00 00 
    2dad:	48 f7 e2             	mul    %rdx
    2db0:	48 89 f8             	mov    %rdi,%rax
    2db3:	48 29 d0             	sub    %rdx,%rax
    2db6:	48 d1 e8             	shr    %rax
    2db9:	48 01 d0             	add    %rdx,%rax
    2dbc:	48 c1 e8 1e          	shr    $0x1e,%rax
    2dc0:	48 89 c2             	mov    %rax,%rdx
    2dc3:	48 c1 e2 1f          	shl    $0x1f,%rdx
    2dc7:	48 29 c2             	sub    %rax,%rdx
    2dca:	48 89 f8             	mov    %rdi,%rax
    2dcd:	48 29 d0             	sub    %rdx,%rax
    2dd0:	c3                   	retq   
    2dd1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2dd8:	00 00 00 00 
    2ddc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002de0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>:
    2de0:	eb be                	jmp    2da0 <std::__detail::_Mod<unsigned long, 2147483647ul, 1ul, 0ul, true, true>::__calc(unsigned long)>
    2de2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2de9:	00 00 00 00 
    2ded:	0f 1f 00             	nopl   (%rax)

0000000000002df0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long)>:
    2df0:	48 89 f9             	mov    %rdi,%rcx
    2df3:	31 ff                	xor    %edi,%edi
    2df5:	e8 e6 ff ff ff       	callq  2de0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
    2dfa:	49 89 f0             	mov    %rsi,%r8
    2dfd:	4c 89 c7             	mov    %r8,%rdi
    2e00:	48 89 c6             	mov    %rax,%rsi
    2e03:	e8 d8 ff ff ff       	callq  2de0 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 1ul, 0ul>(unsigned long)>
    2e08:	48 85 f6             	test   %rsi,%rsi
    2e0b:	75 0c                	jne    2e19 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long)+0x29>
    2e0d:	48 85 c0             	test   %rax,%rax
    2e10:	ba 01 00 00 00       	mov    $0x1,%edx
    2e15:	48 0f 44 c2          	cmove  %rdx,%rax
    2e19:	48 89 01             	mov    %rax,(%rcx)
    2e1c:	c3                   	retq   
    2e1d:	90                   	nop
    2e1e:	66 90                	xchg   %ax,%ax

0000000000002e20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::linear_congruential_engine(unsigned long)>:
    2e20:	eb ce                	jmp    2df0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::seed(unsigned long)>
    2e22:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e29:	00 00 00 00 
    2e2d:	0f 1f 00             	nopl   (%rax)

0000000000002e30 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>& std::__get_helper<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>>(std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>>&)>:
    2e30:	e9 ab fe ff ff       	jmpq   2ce0 <std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::_M_head(std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >&)>
    2e35:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e3c:	00 00 00 00 

0000000000002e40 <std::tuple_element<0ul, std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> > >::type& std::get<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >&)>:
    2e40:	eb ee                	jmp    2e30 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>& std::__get_helper<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>>(std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>>&)>
    2e42:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e49:	00 00 00 00 
    2e4d:	0f 1f 00             	nopl   (%rax)

0000000000002e50 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>:
    2e50:	48 85 ff             	test   %rdi,%rdi
    2e53:	0f 94 c0             	sete   %al
    2e56:	c3                   	retq   
    2e57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2e5e:	00 00 

0000000000002e60 <std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&)>:
    2e60:	48 89 f8             	mov    %rdi,%rax
    2e63:	c3                   	retq   
    2e64:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e6b:	00 00 00 00 
    2e6f:	90                   	nop

0000000000002e70 <std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>::_Head_base<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    2e70:	48 89 fa             	mov    %rdi,%rdx
    2e73:	48 89 f7             	mov    %rsi,%rdi
    2e76:	e8 e5 fd ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    2e7b:	48 8b 00             	mov    (%rax),%rax
    2e7e:	48 89 02             	mov    %rax,(%rdx)
    2e81:	c3                   	retq   
    2e82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e89:	00 00 00 00 
    2e8d:	0f 1f 00             	nopl   (%rax)

0000000000002e90 <std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::_Tuple_impl<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    2e90:	49 89 f8             	mov    %rdi,%r8
    2e93:	48 89 f7             	mov    %rsi,%rdi
    2e96:	e8 c5 fd ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    2e9b:	48 89 c6             	mov    %rax,%rsi
    2e9e:	4c 89 c7             	mov    %r8,%rdi
    2ea1:	eb cd                	jmp    2e70 <std::_Head_base<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false>::_Head_base<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    2ea3:	90                   	nop
    2ea4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2eab:	00 00 00 00 
    2eaf:	90                   	nop

0000000000002eb0 <std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, true, true>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    2eb0:	49 89 f8             	mov    %rdi,%r8
    2eb3:	48 89 f7             	mov    %rsi,%rdi
    2eb6:	e8 a5 fd ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    2ebb:	48 89 c6             	mov    %rax,%rsi
    2ebe:	4c 89 c7             	mov    %r8,%rdi
    2ec1:	eb cd                	jmp    2e90 <std::_Tuple_impl<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::_Tuple_impl<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    2ec3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2eca:	00 00 00 00 
    2ece:	66 90                	xchg   %ax,%ax

0000000000002ed0 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>:
    2ed0:	48 69 ff a7 41 00 00 	imul   $0x41a7,%rdi,%rdi
    2ed7:	48 ba 05 00 00 00 02 	movabs $0x200000005,%rdx
    2ede:	00 00 00 
    2ee1:	48 89 f8             	mov    %rdi,%rax
    2ee4:	48 f7 e2             	mul    %rdx
    2ee7:	48 89 f8             	mov    %rdi,%rax
    2eea:	48 29 d0             	sub    %rdx,%rax
    2eed:	48 d1 e8             	shr    %rax
    2ef0:	48 01 d0             	add    %rdx,%rax
    2ef3:	48 c1 e8 1e          	shr    $0x1e,%rax
    2ef7:	48 89 c2             	mov    %rax,%rdx
    2efa:	48 c1 e2 1f          	shl    $0x1f,%rdx
    2efe:	48 29 c2             	sub    %rax,%rdx
    2f01:	48 89 f8             	mov    %rdi,%rax
    2f04:	48 29 d0             	sub    %rdx,%rax
    2f07:	c3                   	retq   
    2f08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2f0f:	00 

0000000000002f10 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>:
    2f10:	eb be                	jmp    2ed0 <std::__detail::_Mod<unsigned long, 2147483647ul, 16807ul, 0ul, true, true>::__calc(unsigned long)>
    2f12:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f19:	00 00 00 00 
    2f1d:	0f 1f 00             	nopl   (%rax)

0000000000002f20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>:
    2f20:	48 89 f9             	mov    %rdi,%rcx
    2f23:	48 8b 3f             	mov    (%rdi),%rdi
    2f26:	e8 e5 ff ff ff       	callq  2f10 <unsigned long std::__detail::__mod<unsigned long, 2147483647ul, 16807ul, 0ul>(unsigned long)>
    2f2b:	48 89 01             	mov    %rax,(%rcx)
    2f2e:	c3                   	retq   
    2f2f:	90                   	nop

0000000000002f30 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
    2f30:	48 89 f8             	mov    %rdi,%rax
    2f33:	c3                   	retq   
    2f34:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f3b:	00 00 00 00 
    2f3f:	90                   	nop

0000000000002f40 <int const* std::__niter_base<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>:
    2f40:	48 83 ec 08          	sub    $0x8,%rsp
    2f44:	48 89 3c 24          	mov    %rdi,(%rsp)
    2f48:	48 89 e7             	mov    %rsp,%rdi
    2f4b:	e8 a0 fd ff ff       	callq  2cf0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const>
    2f50:	48 8b 00             	mov    (%rax),%rax
    2f53:	48 83 c4 08          	add    $0x8,%rsp
    2f57:	c3                   	retq   
    2f58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2f5f:	00 

0000000000002f60 <int* std::__niter_base<int*>(int*)>:
    2f60:	48 89 f8             	mov    %rdi,%rax
    2f63:	c3                   	retq   
    2f64:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f6b:	00 00 00 00 
    2f6f:	90                   	nop

0000000000002f70 <int* std::__niter_wrap<int*>(int* const&, int*) [clone .constprop.0]>:
    2f70:	48 89 f8             	mov    %rdi,%rax
    2f73:	c3                   	retq   
    2f74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f7b:	00 00 00 00 
    2f7f:	90                   	nop

0000000000002f80 <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&) [clone .constprop.0]>:
    2f80:	48 89 f8             	mov    %rdi,%rax
    2f83:	c3                   	retq   
    2f84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2f8b:	00 00 00 00 
    2f8f:	90                   	nop

0000000000002f90 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::_M_max_size() const [clone .constprop.0]>:
    2f90:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    2f97:	55 55 05 
    2f9a:	c3                   	retq   
    2f9b:	90                   	nop
    2f9c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002fa0 <__gnu_cxx::new_allocator<int>::_M_max_size() const [clone .constprop.0]>:
    2fa0:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    2fa7:	ff ff 1f 
    2faa:	c3                   	retq   
    2fab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002fb0 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>:
    2fb0:	48 89 f0             	mov    %rsi,%rax
    2fb3:	48 29 f8             	sub    %rdi,%rax
    2fb6:	c3                   	retq   
    2fb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    2fbe:	00 00 

0000000000002fc0 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>:
    2fc0:	eb ee                	jmp    2fb0 <std::iterator_traits<char const*>::difference_type std::__distance<char const*>(char const*, char const*, std::random_access_iterator_tag) [clone .constprop.0]>
    2fc2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2fc9:	00 00 00 00 
    2fcd:	0f 1f 00             	nopl   (%rax)

0000000000002fd0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::_Vector_impl(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .constprop.0]>:
    2fd0:	e9 ab fd ff ff       	jmpq   2d80 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl_data::_Vector_impl_data()>
    2fd5:	90                   	nop
    2fd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2fdd:	00 00 00 

0000000000002fe0 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&) [clone .constprop.0]>:
    2fe0:	e9 7b fd ff ff       	jmpq   2d60 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data()>
    2fe5:	90                   	nop
    2fe6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2fed:	00 00 00 

0000000000002ff0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>& std::_Mu<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false, false>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::tuple<> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::tuple<>&) const volatile [clone .constprop.0]>:
    2ff0:	e9 6b fc ff ff       	jmpq   2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    2ff5:	90                   	nop
    2ff6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2ffd:	00 00 00 

0000000000003000 <std::uniform_int_distribution<int>::param_type::param_type(int, int) [clone .constprop.0]>:
    3000:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
    3006:	89 77 04             	mov    %esi,0x4(%rdi)
    3009:	c3                   	retq   
    300a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003010 <std::uniform_int_distribution<int>::uniform_int_distribution(int, int) [clone .constprop.0]>:
    3010:	be 09 00 00 00       	mov    $0x9,%esi
    3015:	eb e9                	jmp    3000 <std::uniform_int_distribution<int>::param_type::param_type(int, int) [clone .constprop.0]>
    3017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    301e:	00 00 

0000000000003020 <operator new(unsigned long, void*) [clone .constprop.0]>:
    3020:	48 89 f8             	mov    %rdi,%rax
    3023:	c3                   	retq   
    3024:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    302b:	00 00 00 00 
    302f:	90                   	nop

0000000000003030 <__gnu_cxx::__alloc_traits<std::allocator<int>, int>::_S_select_on_copy(std::allocator<int> const&) [clone .isra.0]>:
    3030:	48 83 ec 18          	sub    $0x18,%rsp
    3034:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    303b:	00 00 
    303d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3042:	31 c0                	xor    %eax,%eax
    3044:	e8 37 ff ff ff       	callq  2f80 <std::allocator_traits<std::allocator<int> >::select_on_container_copy_construction(std::allocator<int> const&) [clone .constprop.0]>
    3049:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    304e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    3055:	00 00 
    3057:	75 08                	jne    3061 <__gnu_cxx::__alloc_traits<std::allocator<int>, int>::_S_select_on_copy(std::allocator<int> const&) [clone .isra.0]+0x31>
    3059:	48 89 f8             	mov    %rdi,%rax
    305c:	48 83 c4 18          	add    $0x18,%rsp
    3060:	c3                   	retq   
    3061:	e8 6a f3 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3066:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    306d:	00 00 00 

0000000000003070 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]>:
    3070:	89 d1                	mov    %edx,%ecx
    3072:	48 39 fe             	cmp    %rdi,%rsi
    3075:	0f 84 a3 00 00 00    	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    307b:	48 89 f2             	mov    %rsi,%rdx
    307e:	48 29 fa             	sub    %rdi,%rdx
    3081:	48 83 ea 04          	sub    $0x4,%rdx
    3085:	49 89 d0             	mov    %rdx,%r8
    3088:	49 c1 e8 02          	shr    $0x2,%r8
    308c:	48 89 f8             	mov    %rdi,%rax
    308f:	49 ff c0             	inc    %r8
    3092:	48 83 fa 18          	cmp    $0x18,%rdx
    3096:	76 38                	jbe    30d0 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0x60>
    3098:	4c 89 c2             	mov    %r8,%rdx
    309b:	48 c1 ea 03          	shr    $0x3,%rdx
    309f:	c5 f9 6e c1          	vmovd  %ecx,%xmm0
    30a3:	48 c1 e2 05          	shl    $0x5,%rdx
    30a7:	c4 e2 7d 58 c0       	vpbroadcastd %xmm0,%ymm0
    30ac:	48 01 fa             	add    %rdi,%rdx
    30af:	90                   	nop
    30b0:	c5 fe 7f 00          	vmovdqu %ymm0,(%rax)
    30b4:	48 83 c0 20          	add    $0x20,%rax
    30b8:	48 39 d0             	cmp    %rdx,%rax
    30bb:	75 f3                	jne    30b0 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0x40>
    30bd:	4c 89 c0             	mov    %r8,%rax
    30c0:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    30c4:	48 8d 3c 87          	lea    (%rdi,%rax,4),%rdi
    30c8:	49 39 c0             	cmp    %rax,%r8
    30cb:	74 4e                	je     311b <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xab>
    30cd:	c5 f8 77             	vzeroupper 
    30d0:	48 8d 47 04          	lea    0x4(%rdi),%rax
    30d4:	89 0f                	mov    %ecx,(%rdi)
    30d6:	48 39 c6             	cmp    %rax,%rsi
    30d9:	74 43                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    30db:	48 8d 47 08          	lea    0x8(%rdi),%rax
    30df:	89 4f 04             	mov    %ecx,0x4(%rdi)
    30e2:	48 39 c6             	cmp    %rax,%rsi
    30e5:	74 37                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    30e7:	48 8d 47 0c          	lea    0xc(%rdi),%rax
    30eb:	89 4f 08             	mov    %ecx,0x8(%rdi)
    30ee:	48 39 c6             	cmp    %rax,%rsi
    30f1:	74 2b                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    30f3:	48 8d 47 10          	lea    0x10(%rdi),%rax
    30f7:	89 4f 0c             	mov    %ecx,0xc(%rdi)
    30fa:	48 39 c6             	cmp    %rax,%rsi
    30fd:	74 1f                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    30ff:	48 8d 47 14          	lea    0x14(%rdi),%rax
    3103:	89 4f 10             	mov    %ecx,0x10(%rdi)
    3106:	48 39 c6             	cmp    %rax,%rsi
    3109:	74 13                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    310b:	48 8d 47 18          	lea    0x18(%rdi),%rax
    310f:	89 4f 14             	mov    %ecx,0x14(%rdi)
    3112:	48 39 c6             	cmp    %rax,%rsi
    3115:	74 07                	je     311e <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]+0xae>
    3117:	89 4f 18             	mov    %ecx,0x18(%rdi)
    311a:	c3                   	retq   
    311b:	c5 f8 77             	vzeroupper 
    311e:	c3                   	retq   
    311f:	90                   	nop

0000000000003120 <void std::__fill_a<int*, int>(int*, int*, int const&) [clone .isra.0]>:
    3120:	e9 4b ff ff ff       	jmpq   3070 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, void>::__type std::__fill_a1<int*, int>(int*, int*, int const&) [clone .isra.0]>
    3125:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    312c:	00 00 00 00 

0000000000003130 <int* std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&, std::random_access_iterator_tag) [clone .constprop.0]>:
    3130:	48 85 f6             	test   %rsi,%rsi
    3133:	75 04                	jne    3139 <int* std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&, std::random_access_iterator_tag) [clone .constprop.0]+0x9>
    3135:	48 89 f8             	mov    %rdi,%rax
    3138:	c3                   	retq   
    3139:	50                   	push   %rax
    313a:	4c 8d 0c b7          	lea    (%rdi,%rsi,4),%r9
    313e:	4c 89 ce             	mov    %r9,%rsi
    3141:	8b 12                	mov    (%rdx),%edx
    3143:	e8 d8 ff ff ff       	callq  3120 <void std::__fill_a<int*, int>(int*, int*, int const&) [clone .isra.0]>
    3148:	4c 89 c8             	mov    %r9,%rax
    314b:	5a                   	pop    %rdx
    314c:	c3                   	retq   
    314d:	0f 1f 00             	nopl   (%rax)

0000000000003150 <int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>:
    3150:	48 83 ec 08          	sub    $0x8,%rsp
    3154:	49 89 f8             	mov    %rdi,%r8
    3157:	48 89 f7             	mov    %rsi,%rdi
    315a:	e8 b1 fa ff ff       	callq  2c10 <std::__size_to_integer(unsigned long)>
    315f:	48 89 c6             	mov    %rax,%rsi
    3162:	4c 89 c7             	mov    %r8,%rdi
    3165:	48 83 c4 08          	add    $0x8,%rsp
    3169:	eb c5                	jmp    3130 <int* std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&, std::random_access_iterator_tag) [clone .constprop.0]>
    316b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003170 <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)>:
    3170:	48 83 ec 18          	sub    $0x18,%rsp
    3174:	48 8d 54 24 04       	lea    0x4(%rsp),%rdx
    3179:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3180:	00 00 
    3182:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3187:	31 c0                	xor    %eax,%eax
    3189:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    3190:	00 
    3191:	e8 ba ff ff ff       	callq  3150 <int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>
    3196:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
    319b:	64 48 2b 0c 25 28 00 	sub    %fs:0x28,%rcx
    31a2:	00 00 
    31a4:	75 05                	jne    31ab <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)+0x3b>
    31a6:	48 83 c4 18          	add    $0x18,%rsp
    31aa:	c3                   	retq   
    31ab:	e8 20 f2 ff ff       	callq  23d0 <__stack_chk_fail@plt>

00000000000031b0 <int* std::__uninitialized_default_n<int*, unsigned long>(int*, unsigned long)>:
    31b0:	eb be                	jmp    3170 <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)>
    31b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    31b9:	00 00 00 00 
    31bd:	0f 1f 00             	nopl   (%rax)

00000000000031c0 <int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&) [clone .constprop.0]>:
    31c0:	eb ee                	jmp    31b0 <int* std::__uninitialized_default_n<int*, unsigned long>(int*, unsigned long)>
    31c2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    31c9:	00 00 00 00 
    31cd:	0f 1f 00             	nopl   (%rax)

00000000000031d0 <std::vector<int, std::allocator<int> >::_M_default_initialize(unsigned long)>:
    31d0:	53                   	push   %rbx
    31d1:	48 89 fb             	mov    %rdi,%rbx
    31d4:	48 8b 3f             	mov    (%rdi),%rdi
    31d7:	e8 e4 ff ff ff       	callq  31c0 <int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&) [clone .constprop.0]>
    31dc:	48 89 43 08          	mov    %rax,0x8(%rbx)
    31e0:	5b                   	pop    %rbx
    31e1:	c3                   	retq   
    31e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    31e9:	00 00 00 00 
    31ed:	0f 1f 00             	nopl   (%rax)

00000000000031f0 <int* std::__uninitialized_fill_n<true>::__uninit_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>:
    31f0:	e9 5b ff ff ff       	jmpq   3150 <int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>
    31f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    31fc:	00 00 00 00 

0000000000003200 <int* std::uninitialized_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>:
    3200:	eb ee                	jmp    31f0 <int* std::__uninitialized_fill_n<true>::__uninit_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>
    3202:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3209:	00 00 00 00 
    320d:	0f 1f 00             	nopl   (%rax)

0000000000003210 <int* std::__uninitialized_fill_n_a<int*, unsigned long, int, int>(int*, unsigned long, int const&, std::allocator<int>&) [clone .constprop.0]>:
    3210:	eb ee                	jmp    3200 <int* std::uninitialized_fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>
    3212:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3219:	00 00 00 00 
    321d:	0f 1f 00             	nopl   (%rax)

0000000000003220 <std::vector<int, std::allocator<int> >::_M_fill_initialize(unsigned long, int const&)>:
    3220:	48 83 ec 08          	sub    $0x8,%rsp
    3224:	49 89 fa             	mov    %rdi,%r10
    3227:	48 8b 3f             	mov    (%rdi),%rdi
    322a:	e8 e1 ff ff ff       	callq  3210 <int* std::__uninitialized_fill_n_a<int*, unsigned long, int, int>(int*, unsigned long, int const&, std::allocator<int>&) [clone .constprop.0]>
    322f:	49 89 42 08          	mov    %rax,0x8(%r10)
    3233:	48 83 c4 08          	add    $0x8,%rsp
    3237:	c3                   	retq   
    3238:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    323f:	00 

0000000000003240 <std::uniform_int_distribution<int>::param_type::a() const [clone .isra.0]>:
    3240:	89 f8                	mov    %edi,%eax
    3242:	c3                   	retq   
    3243:	90                   	nop
    3244:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    324b:	00 00 00 00 
    324f:	90                   	nop

0000000000003250 <std::uniform_int_distribution<int>::param_type::b() const [clone .isra.0]>:
    3250:	89 f8                	mov    %edi,%eax
    3252:	c3                   	retq   
    3253:	90                   	nop
    3254:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    325b:	00 00 00 00 
    325f:	90                   	nop

0000000000003260 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]>:
    3260:	41 56                	push   %r14
    3262:	41 55                	push   %r13
    3264:	41 54                	push   %r12
    3266:	49 89 f4             	mov    %rsi,%r12
    3269:	55                   	push   %rbp
    326a:	48 89 fd             	mov    %rdi,%rbp
    326d:	53                   	push   %rbx
    326e:	48 83 ec 10          	sub    $0x10,%rsp
    3272:	8b 7e 04             	mov    0x4(%rsi),%edi
    3275:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    327c:	00 00 
    327e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3283:	31 c0                	xor    %eax,%eax
    3285:	e8 c6 ff ff ff       	callq  3250 <std::uniform_int_distribution<int>::param_type::b() const [clone .isra.0]>
    328a:	8b 3e                	mov    (%rsi),%edi
    328c:	48 63 d8             	movslq %eax,%rbx
    328f:	e8 ac ff ff ff       	callq  3240 <std::uniform_int_distribution<int>::param_type::a() const [clone .isra.0]>
    3294:	48 98                	cltq   
    3296:	48 29 c3             	sub    %rax,%rbx
    3299:	48 81 fb fc ff ff 7f 	cmp    $0x7ffffffc,%rbx
    32a0:	77 66                	ja     3308 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0xa8>
    32a2:	48 ff c3             	inc    %rbx
    32a5:	b8 fd ff ff 7f       	mov    $0x7ffffffd,%eax
    32aa:	31 d2                	xor    %edx,%edx
    32ac:	48 f7 f3             	div    %rbx
    32af:	48 0f af d8          	imul   %rax,%rbx
    32b3:	48 89 c6             	mov    %rax,%rsi
    32b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    32bd:	00 00 00 
    32c0:	48 89 ef             	mov    %rbp,%rdi
    32c3:	e8 58 fc ff ff       	callq  2f20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    32c8:	48 ff c8             	dec    %rax
    32cb:	48 39 c3             	cmp    %rax,%rbx
    32ce:	76 f0                	jbe    32c0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0x60>
    32d0:	31 d2                	xor    %edx,%edx
    32d2:	48 f7 f6             	div    %rsi
    32d5:	48 89 c1             	mov    %rax,%rcx
    32d8:	41 8b 3c 24          	mov    (%r12),%edi
    32dc:	e8 5f ff ff ff       	callq  3240 <std::uniform_int_distribution<int>::param_type::a() const [clone .isra.0]>
    32e1:	01 c8                	add    %ecx,%eax
    32e3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    32e8:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    32ef:	00 00 
    32f1:	0f 85 9a 00 00 00    	jne    3391 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0x131>
    32f7:	48 83 c4 10          	add    $0x10,%rsp
    32fb:	5b                   	pop    %rbx
    32fc:	5d                   	pop    %rbp
    32fd:	41 5c                	pop    %r12
    32ff:	41 5d                	pop    %r13
    3301:	41 5e                	pop    %r14
    3303:	c3                   	retq   
    3304:	0f 1f 40 00          	nopl   0x0(%rax)
    3308:	48 81 fb fd ff ff 7f 	cmp    $0x7ffffffd,%rbx
    330f:	74 6f                	je     3380 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0x120>
    3311:	48 89 da             	mov    %rbx,%rdx
    3314:	48 d1 ea             	shr    %rdx
    3317:	49 bd 09 00 00 00 02 	movabs $0x8000000200000009,%r13
    331e:	00 00 80 
    3321:	48 89 d0             	mov    %rdx,%rax
    3324:	49 f7 e5             	mul    %r13
    3327:	49 89 e6             	mov    %rsp,%r14
    332a:	48 c1 ea 1d          	shr    $0x1d,%rdx
    332e:	41 89 d5             	mov    %edx,%r13d
    3331:	44 89 ee             	mov    %r13d,%esi
    3334:	4c 89 f7             	mov    %r14,%rdi
    3337:	e8 c4 fc ff ff       	callq  3000 <std::uniform_int_distribution<int>::param_type::param_type(int, int) [clone .constprop.0]>
    333c:	4c 89 f6             	mov    %r14,%rsi
    333f:	48 89 ef             	mov    %rbp,%rdi
    3342:	e8 19 ff ff ff       	callq  3260 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]>
    3347:	89 c6                	mov    %eax,%esi
    3349:	48 89 ef             	mov    %rbp,%rdi
    334c:	e8 cf fb ff ff       	callq  2f20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    3351:	48 63 ce             	movslq %esi,%rcx
    3354:	48 69 c9 fe ff ff 7f 	imul   $0x7ffffffe,%rcx,%rcx
    335b:	48 ff c8             	dec    %rax
    335e:	31 d2                	xor    %edx,%edx
    3360:	48 01 c8             	add    %rcx,%rax
    3363:	0f 92 c2             	setb   %dl
    3366:	48 89 c1             	mov    %rax,%rcx
    3369:	48 39 c3             	cmp    %rax,%rbx
    336c:	72 c3                	jb     3331 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0xd1>
    336e:	48 85 d2             	test   %rdx,%rdx
    3371:	75 be                	jne    3331 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0xd1>
    3373:	e9 60 ff ff ff       	jmpq   32d8 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0x78>
    3378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    337f:	00 
    3380:	48 89 ef             	mov    %rbp,%rdi
    3383:	e8 98 fb ff ff       	callq  2f20 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>::operator()()>
    3388:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
    338c:	e9 47 ff ff ff       	jmpq   32d8 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]+0x78>
    3391:	e8 3a f0 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    339d:	00 00 00 

00000000000033a0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    33a0:	49 89 f8             	mov    %rdi,%r8
    33a3:	48 89 f7             	mov    %rsi,%rdi
    33a6:	4c 89 c6             	mov    %r8,%rsi
    33a9:	e9 b2 fe ff ff       	jmpq   3260 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<int>::param_type const&) [clone .isra.0]>
    33ae:	66 90                	xchg   %ax,%ax

00000000000033b0 <int std::__invoke_impl<int, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::__invoke_other, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&) [clone .constprop.0]>:
    33b0:	48 83 ec 08          	sub    $0x8,%rsp
    33b4:	e8 a7 f8 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    33b9:	48 89 f7             	mov    %rsi,%rdi
    33bc:	49 89 c0             	mov    %rax,%r8
    33bf:	e8 9c f8 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    33c4:	48 89 c6             	mov    %rax,%rsi
    33c7:	4c 89 c7             	mov    %r8,%rdi
    33ca:	48 83 c4 08          	add    $0x8,%rsp
    33ce:	eb d0                	jmp    33a0 <int std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>

00000000000033d0 <std::__invoke_result<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>::type std::__invoke<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    33d0:	48 83 ec 08          	sub    $0x8,%rsp
    33d4:	49 89 f8             	mov    %rdi,%r8
    33d7:	48 89 f7             	mov    %rsi,%rdi
    33da:	e8 81 f8 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    33df:	4c 89 c7             	mov    %r8,%rdi
    33e2:	48 89 c6             	mov    %rax,%rsi
    33e5:	e8 76 f8 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    33ea:	48 89 c7             	mov    %rax,%rdi
    33ed:	48 83 c4 08          	add    $0x8,%rsp
    33f1:	eb bd                	jmp    33b0 <int std::__invoke_impl<int, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::__invoke_other, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&) [clone .constprop.0]>
    33f3:	90                   	nop
    33f4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    33fb:	00 00 00 00 
    33ff:	90                   	nop

0000000000003400 <int std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::__call<int, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) [clone .constprop.0] [clone .isra.0]>:
    3400:	48 83 ec 08          	sub    $0x8,%rsp
    3404:	49 89 f8             	mov    %rdi,%r8
    3407:	48 8d 7f 08          	lea    0x8(%rdi),%rdi
    340b:	e8 30 fa ff ff       	callq  2e40 <std::tuple_element<0ul, std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> > >::type& std::get<0ul, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >&)>
    3410:	48 89 c7             	mov    %rax,%rdi
    3413:	e8 d8 fb ff ff       	callq  2ff0 <std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>& std::_Mu<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>, false, false>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::tuple<> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::tuple<>&) const volatile [clone .constprop.0]>
    3418:	48 89 c6             	mov    %rax,%rsi
    341b:	4c 89 c7             	mov    %r8,%rdi
    341e:	48 83 c4 08          	add    $0x8,%rsp
    3422:	eb ac                	jmp    33d0 <std::__invoke_result<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>::type std::__invoke<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    3424:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    342b:	00 00 00 00 
    342f:	90                   	nop

0000000000003430 <int std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::operator()<, int>()>:
    3430:	eb ce                	jmp    3400 <int std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::__call<int, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) [clone .constprop.0] [clone .isra.0]>
    3432:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3439:	00 00 00 00 
    343d:	0f 1f 00             	nopl   (%rax)

0000000000003440 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::max_size() const [clone .isra.0]>:
    3440:	e9 4b fb ff ff       	jmpq   2f90 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::_M_max_size() const [clone .constprop.0]>
    3445:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    344c:	00 00 00 00 

0000000000003450 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>:
    3450:	eb ee                	jmp    3440 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::max_size() const [clone .isra.0]>
    3452:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3459:	00 00 00 00 
    345d:	0f 1f 00             	nopl   (%rax)

0000000000003460 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>:
    3460:	48 83 ec 28          	sub    $0x28,%rsp
    3464:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    346b:	00 00 
    346d:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3472:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
    3479:	55 55 05 
    347c:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    3481:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    3486:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    348b:	e8 c0 ff ff ff       	callq  3450 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>
    3490:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    3495:	e8 b6 f8 ff ff       	callq  2d50 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    349a:	48 8b 00             	mov    (%rax),%rax
    349d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    34a2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    34a9:	00 00 
    34ab:	75 05                	jne    34b2 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]+0x52>
    34ad:	48 83 c4 28          	add    $0x28,%rsp
    34b1:	c3                   	retq   
    34b2:	e8 19 ef ff ff       	callq  23d0 <__stack_chk_fail@plt>
    34b7:	90                   	nop
    34b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    34bf:	00 

00000000000034c0 <__gnu_cxx::new_allocator<int>::max_size() const [clone .isra.0]>:
    34c0:	e9 db fa ff ff       	jmpq   2fa0 <__gnu_cxx::new_allocator<int>::_M_max_size() const [clone .constprop.0]>
    34c5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    34cc:	00 00 00 00 

00000000000034d0 <std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) [clone .isra.0]>:
    34d0:	eb ee                	jmp    34c0 <__gnu_cxx::new_allocator<int>::max_size() const [clone .isra.0]>
    34d2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    34d9:	00 00 00 00 
    34dd:	0f 1f 00             	nopl   (%rax)

00000000000034e0 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) [clone .isra.0]>:
    34e0:	48 83 ec 28          	sub    $0x28,%rsp
    34e4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    34eb:	00 00 
    34ed:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    34f2:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    34f9:	ff ff 1f 
    34fc:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    3501:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
    3506:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    350b:	e8 c0 ff ff ff       	callq  34d0 <std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&) [clone .isra.0]>
    3510:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    3515:	e8 36 f8 ff ff       	callq  2d50 <unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&)>
    351a:	48 8b 00             	mov    (%rax),%rax
    351d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    3522:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3529:	00 00 
    352b:	75 05                	jne    3532 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) [clone .isra.0]+0x52>
    352d:	48 83 c4 28          	add    $0x28,%rsp
    3531:	c3                   	retq   
    3532:	e8 99 ee ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3537:	90                   	nop
    3538:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    353f:	00 

0000000000003540 <std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::_Bind<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int> const&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&) [clone .isra.0]>:
    3540:	48 89 f9             	mov    %rdi,%rcx
    3543:	48 89 31             	mov    %rsi,(%rcx)
    3546:	48 89 d7             	mov    %rdx,%rdi
    3549:	e8 12 f7 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    354e:	48 89 c6             	mov    %rax,%rsi
    3551:	48 8d 79 08          	lea    0x8(%rcx),%rdi
    3555:	e9 56 f9 ff ff       	jmpq   2eb0 <std::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >::tuple<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, true, true>(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>
    355a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003560 <std::_Bind_helper<std::__or_<std::is_integral<std::decay<std::uniform_int_distribution<int>&>::type>, std::is_enum<std::decay<std::uniform_int_distribution<int>&>::type> >::value, std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>::type std::bind<std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int>&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&)>:
    3560:	49 89 f9             	mov    %rdi,%r9
    3563:	48 89 d7             	mov    %rdx,%rdi
    3566:	e8 f5 f6 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    356b:	48 89 f7             	mov    %rsi,%rdi
    356e:	48 89 c2             	mov    %rax,%rdx
    3571:	e8 ea f6 ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    3576:	48 8b 30             	mov    (%rax),%rsi
    3579:	4c 89 cf             	mov    %r9,%rdi
    357c:	e8 bf ff ff ff       	callq  3540 <std::_Bind<std::uniform_int_distribution<int> (std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>)>::_Bind<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&>(std::uniform_int_distribution<int> const&, std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&) [clone .isra.0]>
    3581:	4c 89 c8             	mov    %r9,%rax
    3584:	c3                   	retq   
    3585:	90                   	nop
    3586:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    358d:	00 00 00 

0000000000003590 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&) [clone .isra.0]>:
    3590:	48 89 37             	mov    %rsi,(%rdi)
    3593:	c3                   	retq   
    3594:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    359b:	00 00 00 00 
    359f:	90                   	nop

00000000000035a0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin() const>:
    35a0:	48 83 ec 18          	sub    $0x18,%rsp
    35a4:	49 89 f8             	mov    %rdi,%r8
    35a7:	49 8b 30             	mov    (%r8),%rsi
    35aa:	48 89 e7             	mov    %rsp,%rdi
    35ad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    35b4:	00 00 
    35b6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    35bb:	31 c0                	xor    %eax,%eax
    35bd:	e8 ce ff ff ff       	callq  3590 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&) [clone .isra.0]>
    35c2:	48 8b 04 24          	mov    (%rsp),%rax
    35c6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    35cb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    35d2:	00 00 
    35d4:	75 05                	jne    35db <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin() const+0x3b>
    35d6:	48 83 c4 18          	add    $0x18,%rsp
    35da:	c3                   	retq   
    35db:	e8 f0 ed ff ff       	callq  23d0 <__stack_chk_fail@plt>

00000000000035e0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end() const>:
    35e0:	48 83 ec 18          	sub    $0x18,%rsp
    35e4:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    35e8:	48 89 e7             	mov    %rsp,%rdi
    35eb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    35f2:	00 00 
    35f4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    35f9:	31 c0                	xor    %eax,%eax
    35fb:	e8 90 ff ff ff       	callq  3590 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&) [clone .isra.0]>
    3600:	48 8b 04 24          	mov    (%rsp),%rax
    3604:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    3609:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3610:	00 00 
    3612:	75 05                	jne    3619 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end() const+0x39>
    3614:	48 83 c4 18          	add    $0x18,%rsp
    3618:	c3                   	retq   
    3619:	e8 b2 ed ff ff       	callq  23d0 <__stack_chk_fail@plt>
    361e:	66 90                	xchg   %ax,%ax

0000000000003620 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) [clone .isra.0]>:
    3620:	48 89 37             	mov    %rsi,(%rdi)
    3623:	c3                   	retq   
    3624:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    362b:	00 00 00 00 
    362f:	90                   	nop

0000000000003630 <std::vector<int, std::allocator<int> >::begin() const>:
    3630:	48 83 ec 18          	sub    $0x18,%rsp
    3634:	49 89 f8             	mov    %rdi,%r8
    3637:	49 8b 30             	mov    (%r8),%rsi
    363a:	48 89 e7             	mov    %rsp,%rdi
    363d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3644:	00 00 
    3646:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    364b:	31 c0                	xor    %eax,%eax
    364d:	e8 ce ff ff ff       	callq  3620 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) [clone .isra.0]>
    3652:	48 8b 04 24          	mov    (%rsp),%rax
    3656:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    365b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3662:	00 00 
    3664:	75 05                	jne    366b <std::vector<int, std::allocator<int> >::begin() const+0x3b>
    3666:	48 83 c4 18          	add    $0x18,%rsp
    366a:	c3                   	retq   
    366b:	e8 60 ed ff ff       	callq  23d0 <__stack_chk_fail@plt>

0000000000003670 <std::vector<int, std::allocator<int> >::end() const>:
    3670:	48 83 ec 18          	sub    $0x18,%rsp
    3674:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    3678:	48 89 e7             	mov    %rsp,%rdi
    367b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3682:	00 00 
    3684:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3689:	31 c0                	xor    %eax,%eax
    368b:	e8 90 ff ff ff       	callq  3620 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) [clone .isra.0]>
    3690:	48 8b 04 24          	mov    (%rsp),%rax
    3694:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    3699:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    36a0:	00 00 
    36a2:	75 05                	jne    36a9 <std::vector<int, std::allocator<int> >::end() const+0x39>
    36a4:	48 83 c4 18          	add    $0x18,%rsp
    36a8:	c3                   	retq   
    36a9:	e8 22 ed ff ff       	callq  23d0 <__stack_chk_fail@plt>
    36ae:	66 90                	xchg   %ax,%ax

00000000000036b0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator*() const [clone .isra.0]>:
    36b0:	48 89 f8             	mov    %rdi,%rax
    36b3:	c3                   	retq   
    36b4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    36bb:	00 00 00 00 
    36bf:	90                   	nop

00000000000036c0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator++() [clone .isra.0]>:
    36c0:	48 83 07 18          	addq   $0x18,(%rdi)
    36c4:	c3                   	retq   
    36c5:	90                   	nop
    36c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36cd:	00 00 00 

00000000000036d0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>:
    36d0:	48 89 f8             	mov    %rdi,%rax
    36d3:	c3                   	retq   
    36d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    36db:	00 00 00 00 
    36df:	90                   	nop

00000000000036e0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>:
    36e0:	48 83 07 04          	addq   $0x4,(%rdi)
    36e4:	c3                   	retq   
    36e5:	90                   	nop
    36e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    36ed:	00 00 00 

00000000000036f0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> >* const&) [clone .isra.0]>:
    36f0:	48 89 37             	mov    %rsi,(%rdi)
    36f3:	c3                   	retq   
    36f4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    36fb:	00 00 00 00 
    36ff:	90                   	nop

0000000000003700 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin()>:
    3700:	48 83 ec 18          	sub    $0x18,%rsp
    3704:	49 89 f8             	mov    %rdi,%r8
    3707:	49 8b 30             	mov    (%r8),%rsi
    370a:	48 89 e7             	mov    %rsp,%rdi
    370d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3714:	00 00 
    3716:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    371b:	31 c0                	xor    %eax,%eax
    371d:	e8 ce ff ff ff       	callq  36f0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> >* const&) [clone .isra.0]>
    3722:	48 8b 04 24          	mov    (%rsp),%rax
    3726:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    372b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3732:	00 00 
    3734:	75 05                	jne    373b <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin()+0x3b>
    3736:	48 83 c4 18          	add    $0x18,%rsp
    373a:	c3                   	retq   
    373b:	e8 90 ec ff ff       	callq  23d0 <__stack_chk_fail@plt>

0000000000003740 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end()>:
    3740:	48 83 ec 18          	sub    $0x18,%rsp
    3744:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    3748:	48 89 e7             	mov    %rsp,%rdi
    374b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3752:	00 00 
    3754:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3759:	31 c0                	xor    %eax,%eax
    375b:	e8 90 ff ff ff       	callq  36f0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> >* const&) [clone .isra.0]>
    3760:	48 8b 04 24          	mov    (%rsp),%rax
    3764:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    3769:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3770:	00 00 
    3772:	75 05                	jne    3779 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end()+0x39>
    3774:	48 83 c4 18          	add    $0x18,%rsp
    3778:	c3                   	retq   
    3779:	e8 52 ec ff ff       	callq  23d0 <__stack_chk_fail@plt>
    377e:	66 90                	xchg   %ax,%ax

0000000000003780 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [clone .isra.0]>:
    3780:	48 89 37             	mov    %rsi,(%rdi)
    3783:	c3                   	retq   
    3784:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    378b:	00 00 00 00 
    378f:	90                   	nop

0000000000003790 <std::vector<int, std::allocator<int> >::begin()>:
    3790:	48 83 ec 18          	sub    $0x18,%rsp
    3794:	49 89 f8             	mov    %rdi,%r8
    3797:	49 8b 30             	mov    (%r8),%rsi
    379a:	48 89 e7             	mov    %rsp,%rdi
    379d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    37a4:	00 00 
    37a6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    37ab:	31 c0                	xor    %eax,%eax
    37ad:	e8 ce ff ff ff       	callq  3780 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [clone .isra.0]>
    37b2:	48 8b 04 24          	mov    (%rsp),%rax
    37b6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    37bb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    37c2:	00 00 
    37c4:	75 05                	jne    37cb <std::vector<int, std::allocator<int> >::begin()+0x3b>
    37c6:	48 83 c4 18          	add    $0x18,%rsp
    37ca:	c3                   	retq   
    37cb:	e8 00 ec ff ff       	callq  23d0 <__stack_chk_fail@plt>

00000000000037d0 <std::vector<int, std::allocator<int> >::end()>:
    37d0:	48 83 ec 18          	sub    $0x18,%rsp
    37d4:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    37d8:	48 89 e7             	mov    %rsp,%rdi
    37db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    37e2:	00 00 
    37e4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    37e9:	31 c0                	xor    %eax,%eax
    37eb:	e8 90 ff ff ff       	callq  3780 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [clone .isra.0]>
    37f0:	48 8b 04 24          	mov    (%rsp),%rax
    37f4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    37f9:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3800:	00 00 
    3802:	75 05                	jne    3809 <std::vector<int, std::allocator<int> >::end()+0x39>
    3804:	48 83 c4 18          	add    $0x18,%rsp
    3808:	c3                   	retq   
    3809:	e8 c2 eb ff ff       	callq  23d0 <__stack_chk_fail@plt>
    380e:	66 90                	xchg   %ax,%ax

0000000000003810 <std::vector<int, std::allocator<int> >::operator[](unsigned long) [clone .isra.0]>:
    3810:	48 8d 04 b7          	lea    (%rdi,%rsi,4),%rax
    3814:	c3                   	retq   
    3815:	90                   	nop
    3816:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    381d:	00 00 00 

0000000000003820 <std::vector<int, std::allocator<int> >::size() const [clone .isra.0]>:
    3820:	48 89 f0             	mov    %rsi,%rax
    3823:	48 29 f8             	sub    %rdi,%rax
    3826:	48 c1 f8 02          	sar    $0x2,%rax
    382a:	c3                   	retq   
    382b:	90                   	nop
    382c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003830 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) [clone .isra.0]>:
    3830:	48 8d 04 76          	lea    (%rsi,%rsi,2),%rax
    3834:	48 8d 04 c7          	lea    (%rdi,%rax,8),%rax
    3838:	c3                   	retq   
    3839:	90                   	nop
    383a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003840 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::size() const [clone .isra.0]>:
    3840:	48 29 fe             	sub    %rdi,%rsi
    3843:	48 c1 fe 03          	sar    $0x3,%rsi
    3847:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    384e:	aa aa aa 
    3851:	48 0f af c6          	imul   %rsi,%rax
    3855:	c3                   	retq   
    3856:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    385d:	00 00 00 

0000000000003860 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator*() const [clone .isra.0]>:
    3860:	48 89 f8             	mov    %rdi,%rax
    3863:	c3                   	retq   
    3864:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    386b:	00 00 00 00 
    386f:	90                   	nop

0000000000003870 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator++() [clone .isra.0]>:
    3870:	48 83 07 18          	addq   $0x18,(%rdi)
    3874:	c3                   	retq   
    3875:	90                   	nop
    3876:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    387d:	00 00 00 

0000000000003880 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>:
    3880:	48 89 f8             	mov    %rdi,%rax
    3883:	c3                   	retq   
    3884:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    388b:	00 00 00 00 
    388f:	90                   	nop

0000000000003890 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>:
    3890:	48 83 07 04          	addq   $0x4,(%rdi)
    3894:	c3                   	retq   
    3895:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    389c:	00 00 00 00 

00000000000038a0 <int std::accumulate<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int) [clone .constprop.0]>:
    38a0:	48 83 ec 10          	sub    $0x10,%rsp
    38a4:	48 89 34 24          	mov    %rsi,(%rsp)
    38a8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    38ad:	45 31 c0             	xor    %r8d,%r8d
    38b0:	48 89 e6             	mov    %rsp,%rsi
    38b3:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
    38b8:	eb 1b                	jmp    38d5 <int std::accumulate<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int) [clone .constprop.0]+0x35>
    38ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    38c0:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    38c5:	e8 b6 ff ff ff       	callq  3880 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>
    38ca:	48 89 cf             	mov    %rcx,%rdi
    38cd:	44 03 00             	add    (%rax),%r8d
    38d0:	e8 bb ff ff ff       	callq  3890 <__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>
    38d5:	48 89 cf             	mov    %rcx,%rdi
    38d8:	e8 a3 f3 ff ff       	callq  2c80 <bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)>
    38dd:	84 c0                	test   %al,%al
    38df:	75 df                	jne    38c0 <int std::accumulate<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int) [clone .constprop.0]+0x20>
    38e1:	44 89 c0             	mov    %r8d,%eax
    38e4:	48 83 c4 10          	add    $0x10,%rsp
    38e8:	c3                   	retq   
    38e9:	90                   	nop
    38ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000038f0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>:
    38f0:	48 89 f8             	mov    %rdi,%rax
    38f3:	c3                   	retq   
    38f4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    38fb:	00 00 00 00 
    38ff:	90                   	nop

0000000000003900 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>:
    3900:	48 89 37             	mov    %rsi,(%rdi)
    3903:	c3                   	retq   
    3904:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    390b:	00 00 00 00 
    390f:	90                   	nop

0000000000003910 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>:
    3910:	48 89 f8             	mov    %rdi,%rax
    3913:	c3                   	retq   
    3914:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    391b:	00 00 00 00 
    391f:	90                   	nop

0000000000003920 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    3920:	48 83 ec 18          	sub    $0x18,%rsp
    3924:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    392b:	00 00 
    392d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3932:	31 c0                	xor    %eax,%eax
    3934:	e8 d7 ff ff ff       	callq  3910 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    3939:	48 89 c6             	mov    %rax,%rsi
    393c:	48 89 e7             	mov    %rsp,%rdi
    393f:	e8 bc ff ff ff       	callq  3900 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
    3944:	48 8b 04 24          	mov    (%rsp),%rax
    3948:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    394d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    3954:	00 00 
    3956:	75 05                	jne    395d <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x3d>
    3958:	48 83 c4 18          	add    $0x18,%rsp
    395c:	c3                   	retq   
    395d:	e8 6e ea ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3962:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3969:	00 00 00 00 
    396d:	0f 1f 00             	nopl   (%rax)

0000000000003970 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::value, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::duration_cast<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    3970:	eb ae                	jmp    3920 <std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1l, 1l>, long, true, true>::__cast<long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    3972:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3979:	00 00 00 00 
    397d:	0f 1f 00             	nopl   (%rax)

0000000000003980 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>:
    3980:	48 83 ec 18          	sub    $0x18,%rsp
    3984:	49 89 f0             	mov    %rsi,%r8
    3987:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    398e:	00 00 
    3990:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3995:	31 c0                	xor    %eax,%eax
    3997:	e8 74 ff ff ff       	callq  3910 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    399c:	4c 89 c7             	mov    %r8,%rdi
    399f:	48 89 c6             	mov    %rax,%rsi
    39a2:	e8 69 ff ff ff       	callq  3910 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::count() const [clone .isra.0]>
    39a7:	48 29 c6             	sub    %rax,%rsi
    39aa:	48 89 e7             	mov    %rsp,%rdi
    39ad:	e8 4e ff ff ff       	callq  3900 <std::chrono::duration<long, std::ratio<1l, 1000000000l> >::duration<long, void>(long const&) [clone .isra.0]>
    39b2:	48 8b 04 24          	mov    (%rsp),%rax
    39b6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    39bb:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    39c2:	00 00 
    39c4:	75 05                	jne    39cb <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]+0x4b>
    39c6:	48 83 c4 18          	add    $0x18,%rsp
    39ca:	c3                   	retq   
    39cb:	e8 00 ea ff ff       	callq  23d0 <__stack_chk_fail@plt>

00000000000039d0 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [clone .isra.0]>:
    39d0:	48 83 ec 08          	sub    $0x8,%rsp
    39d4:	48 89 fa             	mov    %rdi,%rdx
    39d7:	48 89 f7             	mov    %rsi,%rdi
    39da:	e8 11 ff ff ff       	callq  38f0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    39df:	48 8b 3a             	mov    (%rdx),%rdi
    39e2:	48 89 c6             	mov    %rax,%rsi
    39e5:	e8 06 ff ff ff       	callq  38f0 <std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::time_since_epoch() const [clone .isra.0]>
    39ea:	48 89 c7             	mov    %rax,%rdi
    39ed:	48 83 c4 08          	add    $0x8,%rsp
    39f1:	eb 8d                	jmp    3980 <std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<long, std::ratio<1l, 1000000000l>, long, std::ratio<1l, 1000000000l> >(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&, std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [clone .isra.0]>
    39f3:	90                   	nop
    39f4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    39fb:	00 00 00 00 
    39ff:	90                   	nop

0000000000003a00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>:
    3a00:	48 89 37             	mov    %rsi,(%rdi)
    3a03:	c3                   	retq   
    3a04:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3a0b:	00 00 00 00 
    3a0f:	90                   	nop

0000000000003a10 <std::char_traits<char>::length(char const*)>:
    3a10:	e9 9b e8 ff ff       	jmpq   22b0 <strlen@plt>
    3a15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3a1c:	00 00 00 00 

0000000000003a20 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)>:
    3a20:	41 54                	push   %r12
    3a22:	49 89 f4             	mov    %rsi,%r12
    3a25:	48 8d 35 d8 15 00 00 	lea    0x15d8(%rip),%rsi        # 5004 <_IO_stdin_used+0x4>
    3a2c:	55                   	push   %rbp
    3a2d:	48 89 fd             	mov    %rdi,%rbp
    3a30:	53                   	push   %rbx
    3a31:	48 83 ec 20          	sub    $0x20,%rsp
    3a35:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a3c:	00 00 
    3a3e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3a43:	31 c0                	xor    %eax,%eax
    3a45:	e8 26 e9 ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    3a4a:	4c 89 e7             	mov    %r12,%rdi
    3a4d:	e8 de fb ff ff       	callq  3630 <std::vector<int, std::allocator<int> >::begin() const>
    3a52:	4c 89 e7             	mov    %r12,%rdi
    3a55:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    3a5a:	e8 11 fc ff ff       	callq  3670 <std::vector<int, std::allocator<int> >::end() const>
    3a5f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3a64:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
    3a69:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
    3a6e:	eb 29                	jmp    3a99 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)+0x79>
    3a70:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    3a75:	e8 56 fc ff ff       	callq  36d0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const [clone .isra.0]>
    3a7a:	8b 30                	mov    (%rax),%esi
    3a7c:	48 89 ef             	mov    %rbp,%rdi
    3a7f:	e8 dc e9 ff ff       	callq  2460 <std::ostream::operator<<(int)@plt>
    3a84:	48 89 c7             	mov    %rax,%rdi
    3a87:	be 20 00 00 00       	mov    $0x20,%esi
    3a8c:	e8 4f e9 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
    3a91:	48 89 df             	mov    %rbx,%rdi
    3a94:	e8 47 fc ff ff       	callq  36e0 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() [clone .isra.0]>
    3a99:	4c 89 e6             	mov    %r12,%rsi
    3a9c:	48 89 df             	mov    %rbx,%rdi
    3a9f:	e8 5c f2 ff ff       	callq  2d00 <bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&)>
    3aa4:	84 c0                	test   %al,%al
    3aa6:	75 c8                	jne    3a70 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)+0x50>
    3aa8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    3aad:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    3ab4:	00 00 
    3ab6:	75 15                	jne    3acd <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)+0xad>
    3ab8:	48 83 c4 20          	add    $0x20,%rsp
    3abc:	5b                   	pop    %rbx
    3abd:	48 89 ef             	mov    %rbp,%rdi
    3ac0:	5d                   	pop    %rbp
    3ac1:	be 3e 00 00 00       	mov    $0x3e,%esi
    3ac6:	41 5c                	pop    %r12
    3ac8:	e9 13 e9 ff ff       	jmpq   23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
    3acd:	e8 fe e8 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3ad2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3ad9:	00 00 00 00 
    3add:	0f 1f 00             	nopl   (%rax)

0000000000003ae0 <std::ostream& operator<< <std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)>:
    3ae0:	41 54                	push   %r12
    3ae2:	49 89 f4             	mov    %rsi,%r12
    3ae5:	48 8d 35 18 15 00 00 	lea    0x1518(%rip),%rsi        # 5004 <_IO_stdin_used+0x4>
    3aec:	55                   	push   %rbp
    3aed:	48 89 fd             	mov    %rdi,%rbp
    3af0:	53                   	push   %rbx
    3af1:	48 83 ec 20          	sub    $0x20,%rsp
    3af5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3afc:	00 00 
    3afe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3b03:	31 c0                	xor    %eax,%eax
    3b05:	e8 66 e8 ff ff       	callq  2370 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)@plt>
    3b0a:	4c 89 e7             	mov    %r12,%rdi
    3b0d:	e8 8e fa ff ff       	callq  35a0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin() const>
    3b12:	4c 89 e7             	mov    %r12,%rdi
    3b15:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    3b1a:	e8 c1 fa ff ff       	callq  35e0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end() const>
    3b1f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3b24:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
    3b29:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
    3b2e:	eb 2a                	jmp    3b5a <std::ostream& operator<< <std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)+0x7a>
    3b30:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    3b35:	e8 76 fb ff ff       	callq  36b0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator*() const [clone .isra.0]>
    3b3a:	48 89 c6             	mov    %rax,%rsi
    3b3d:	48 89 ef             	mov    %rbp,%rdi
    3b40:	e8 db fe ff ff       	callq  3a20 <std::ostream& operator<< <int>(std::ostream&, std::vector<int, std::allocator<int> > const&)>
    3b45:	48 89 c7             	mov    %rax,%rdi
    3b48:	be 20 00 00 00       	mov    $0x20,%esi
    3b4d:	e8 8e e8 ff ff       	callq  23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
    3b52:	48 89 df             	mov    %rbx,%rdi
    3b55:	e8 66 fb ff ff       	callq  36c0 <__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator++() [clone .isra.0]>
    3b5a:	4c 89 e6             	mov    %r12,%rsi
    3b5d:	48 89 df             	mov    %rbx,%rdi
    3b60:	e8 cb f1 ff ff       	callq  2d30 <bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)>
    3b65:	84 c0                	test   %al,%al
    3b67:	75 c7                	jne    3b30 <std::ostream& operator<< <std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)+0x50>
    3b69:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    3b6e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    3b75:	00 00 
    3b77:	75 15                	jne    3b8e <std::ostream& operator<< <std::vector<int, std::allocator<int> > >(std::ostream&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)+0xae>
    3b79:	48 83 c4 20          	add    $0x20,%rsp
    3b7d:	5b                   	pop    %rbx
    3b7e:	48 89 ef             	mov    %rbp,%rdi
    3b81:	5d                   	pop    %rbp
    3b82:	be 3e 00 00 00       	mov    $0x3e,%esi
    3b87:	41 5c                	pop    %r12
    3b89:	e9 52 e8 ff ff       	jmpq   23e0 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)@plt>
    3b8e:	e8 3d e8 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3b93:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3b9a:	00 00 00 00 
    3b9e:	66 90                	xchg   %ax,%ax

0000000000003ba0 <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)>:
    3ba0:	53                   	push   %rbx
    3ba1:	48 89 f3             	mov    %rsi,%rbx
    3ba4:	48 89 d1             	mov    %rdx,%rcx
    3ba7:	48 29 fb             	sub    %rdi,%rbx
    3baa:	48 39 fe             	cmp    %rdi,%rsi
    3bad:	74 11                	je     3bc0 <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)+0x20>
    3baf:	48 89 fe             	mov    %rdi,%rsi
    3bb2:	48 89 da             	mov    %rbx,%rdx
    3bb5:	48 89 cf             	mov    %rcx,%rdi
    3bb8:	e8 63 e8 ff ff       	callq  2420 <memmove@plt>
    3bbd:	48 89 c1             	mov    %rax,%rcx
    3bc0:	48 8d 04 19          	lea    (%rcx,%rbx,1),%rax
    3bc4:	5b                   	pop    %rbx
    3bc5:	c3                   	retq   
    3bc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3bcd:	00 00 00 

0000000000003bd0 <int* std::__copy_move_a2<false, int const*, int*>(int const*, int const*, int*)>:
    3bd0:	eb ce                	jmp    3ba0 <int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)>
    3bd2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3bd9:	00 00 00 00 
    3bdd:	0f 1f 00             	nopl   (%rax)

0000000000003be0 <int* std::__copy_move_a1<false, int const*, int*>(int const*, int const*, int*)>:
    3be0:	eb ee                	jmp    3bd0 <int* std::__copy_move_a2<false, int const*, int*>(int const*, int const*, int*)>
    3be2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3be9:	00 00 00 00 
    3bed:	0f 1f 00             	nopl   (%rax)

0000000000003bf0 <int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
    3bf0:	48 83 ec 08          	sub    $0x8,%rsp
    3bf4:	49 89 f8             	mov    %rdi,%r8
    3bf7:	48 89 d7             	mov    %rdx,%rdi
    3bfa:	e8 61 f3 ff ff       	callq  2f60 <int* std::__niter_base<int*>(int*)>
    3bff:	48 89 f7             	mov    %rsi,%rdi
    3c02:	48 89 c2             	mov    %rax,%rdx
    3c05:	e8 36 f3 ff ff       	callq  2f40 <int const* std::__niter_base<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    3c0a:	4c 89 c7             	mov    %r8,%rdi
    3c0d:	48 89 c6             	mov    %rax,%rsi
    3c10:	e8 2b f3 ff ff       	callq  2f40 <int const* std::__niter_base<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    3c15:	48 89 c7             	mov    %rax,%rdi
    3c18:	e8 c3 ff ff ff       	callq  3be0 <int* std::__copy_move_a1<false, int const*, int*>(int const*, int const*, int*)>
    3c1d:	48 89 c7             	mov    %rax,%rdi
    3c20:	48 83 c4 08          	add    $0x8,%rsp
    3c24:	e9 47 f3 ff ff       	jmpq   2f70 <int* std::__niter_wrap<int*>(int* const&, int*) [clone .constprop.0]>
    3c29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003c30 <int* std::copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
    3c30:	48 83 ec 08          	sub    $0x8,%rsp
    3c34:	49 89 f8             	mov    %rdi,%r8
    3c37:	48 89 f7             	mov    %rsi,%rdi
    3c3a:	e8 f1 f2 ff ff       	callq  2f30 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    3c3f:	4c 89 c7             	mov    %r8,%rdi
    3c42:	48 89 c6             	mov    %rax,%rsi
    3c45:	e8 e6 f2 ff ff       	callq  2f30 <__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >)>
    3c4a:	48 89 c7             	mov    %rax,%rdi
    3c4d:	48 83 c4 08          	add    $0x8,%rsp
    3c51:	eb 9d                	jmp    3bf0 <int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    3c53:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3c5a:	00 00 00 00 
    3c5e:	66 90                	xchg   %ax,%ax

0000000000003c60 <int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
    3c60:	eb ce                	jmp    3c30 <int* std::copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    3c62:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3c69:	00 00 00 00 
    3c6d:	0f 1f 00             	nopl   (%rax)

0000000000003c70 <int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>:
    3c70:	eb ee                	jmp    3c60 <int* std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    3c72:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3c79:	00 00 00 00 
    3c7d:	0f 1f 00             	nopl   (%rax)

0000000000003c80 <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&) [clone .constprop.0]>:
    3c80:	eb ee                	jmp    3c70 <int* std::uninitialized_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*)>
    3c82:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3c89:	00 00 00 00 
    3c8d:	0f 1f 00             	nopl   (%rax)

0000000000003c90 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .constprop.0]>:
    3c90:	41 54                	push   %r12
    3c92:	49 89 fc             	mov    %rdi,%r12
    3c95:	e8 c6 f7 ff ff       	callq  3460 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>
    3c9a:	4c 39 e0             	cmp    %r12,%rax
    3c9d:	72 06                	jb     3ca5 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .constprop.0]+0x15>
    3c9f:	4c 89 e0             	mov    %r12,%rax
    3ca2:	41 5c                	pop    %r12
    3ca4:	c3                   	retq   
    3ca5:	48 8d 3d 94 13 00 00 	lea    0x1394(%rip),%rdi        # 5040 <_IO_stdin_used+0x40>
    3cac:	e8 3f e6 ff ff       	callq  22f0 <std::__throw_length_error(char const*)@plt>
    3cb1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3cb8:	00 00 00 00 
    3cbc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000003cc0 <std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) [clone .constprop.0]>:
    3cc0:	41 54                	push   %r12
    3cc2:	49 89 fc             	mov    %rdi,%r12
    3cc5:	e8 16 f8 ff ff       	callq  34e0 <std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) [clone .isra.0]>
    3cca:	4c 39 e0             	cmp    %r12,%rax
    3ccd:	72 06                	jb     3cd5 <std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) [clone .constprop.0]+0x15>
    3ccf:	4c 89 e0             	mov    %r12,%rax
    3cd2:	41 5c                	pop    %r12
    3cd4:	c3                   	retq   
    3cd5:	48 8d 3d 64 13 00 00 	lea    0x1364(%rip),%rdi        # 5040 <_IO_stdin_used+0x40>
    3cdc:	e8 0f e6 ff ff       	callq  22f0 <std::__throw_length_error(char const*)@plt>
    3ce1:	90                   	nop
    3ce2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3ce9:	00 00 00 00 
    3ced:	0f 1f 00             	nopl   (%rax)

0000000000003cf0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>:
    3cf0:	41 55                	push   %r13
    3cf2:	49 89 fd             	mov    %rdi,%r13
    3cf5:	48 89 f7             	mov    %rsi,%rdi
    3cf8:	41 54                	push   %r12
    3cfa:	49 89 d4             	mov    %rdx,%r12
    3cfd:	55                   	push   %rbp
    3cfe:	48 89 f5             	mov    %rsi,%rbp
    3d01:	48 83 ec 10          	sub    $0x10,%rsp
    3d05:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3d0c:	00 00 
    3d0e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3d13:	31 c0                	xor    %eax,%eax
    3d15:	e8 36 f1 ff ff       	callq  2e50 <bool __gnu_cxx::__is_null_pointer<char const>(char const*)>
    3d1a:	48 39 d6             	cmp    %rdx,%rsi
    3d1d:	74 04                	je     3d23 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x33>
    3d1f:	84 c0                	test   %al,%al
    3d21:	75 7b                	jne    3d9e <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xae>
    3d23:	4c 89 e6             	mov    %r12,%rsi
    3d26:	48 89 ef             	mov    %rbp,%rdi
    3d29:	e8 92 f2 ff ff       	callq  2fc0 <std::iterator_traits<char const*>::difference_type std::distance<char const*>(char const*, char const*)>
    3d2e:	48 89 04 24          	mov    %rax,(%rsp)
    3d32:	48 83 f8 0f          	cmp    $0xf,%rax
    3d36:	77 40                	ja     3d78 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x88>
    3d38:	4c 89 ef             	mov    %r13,%rdi
    3d3b:	e8 70 e6 ff ff       	callq  23b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data() const@plt>
    3d40:	48 89 c7             	mov    %rax,%rdi
    3d43:	48 89 ee             	mov    %rbp,%rsi
    3d46:	4c 89 e2             	mov    %r12,%rdx
    3d49:	e8 72 e6 ff ff       	callq  23c0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy_chars(char*, char const*, char const*)@plt>
    3d4e:	48 8b 34 24          	mov    (%rsp),%rsi
    3d52:	4c 89 ef             	mov    %r13,%rdi
    3d55:	e8 b6 e5 ff ff       	callq  2310 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_set_length(unsigned long)@plt>
    3d5a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    3d5f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    3d66:	00 00 
    3d68:	75 40                	jne    3daa <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0xba>
    3d6a:	48 83 c4 10          	add    $0x10,%rsp
    3d6e:	5d                   	pop    %rbp
    3d6f:	41 5c                	pop    %r12
    3d71:	41 5d                	pop    %r13
    3d73:	c3                   	retq   
    3d74:	0f 1f 40 00          	nopl   0x0(%rax)
    3d78:	48 89 e6             	mov    %rsp,%rsi
    3d7b:	31 d2                	xor    %edx,%edx
    3d7d:	4c 89 ef             	mov    %r13,%rdi
    3d80:	e8 fb e6 ff ff       	callq  2480 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long)@plt>
    3d85:	48 89 c6             	mov    %rax,%rsi
    3d88:	4c 89 ef             	mov    %r13,%rdi
    3d8b:	e8 c0 e5 ff ff       	callq  2350 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_data(char*)@plt>
    3d90:	48 8b 34 24          	mov    (%rsp),%rsi
    3d94:	4c 89 ef             	mov    %r13,%rdi
    3d97:	e8 14 e7 ff ff       	callq  24b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_capacity(unsigned long)@plt>
    3d9c:	eb 9a                	jmp    3d38 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]+0x48>
    3d9e:	48 8d 3d d3 12 00 00 	lea    0x12d3(%rip),%rdi        # 5078 <_IO_stdin_used+0x78>
    3da5:	e8 76 e5 ff ff       	callq  2320 <std::__throw_logic_error(char const*)@plt>
    3daa:	e8 21 e6 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    3daf:	90                   	nop

0000000000003db0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>:
    3db0:	e9 3b ff ff ff       	jmpq   3cf0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [clone .constprop.0]>
    3db5:	90                   	nop
    3db6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    3dbd:	00 00 00 

0000000000003dc0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>:
    3dc0:	eb ee                	jmp    3db0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char const*>(char const*, char const*, std::__false_type) [clone .constprop.0]>
    3dc2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3dc9:	00 00 00 00 
    3dcd:	0f 1f 00             	nopl   (%rax)

0000000000003dd0 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::deallocate(std::vector<int, std::allocator<int> >*, unsigned long) [clone .constprop.0]>:
    3dd0:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
    3dd4:	48 c1 e6 03          	shl    $0x3,%rsi
    3dd8:	e9 b3 e5 ff ff       	jmpq   2390 <operator delete(void*, unsigned long)@plt>
    3ddd:	0f 1f 00             	nopl   (%rax)

0000000000003de0 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::deallocate(std::allocator<std::vector<int, std::allocator<int> > >&, std::vector<int, std::allocator<int> >*, unsigned long) [clone .isra.0]>:
    3de0:	eb ee                	jmp    3dd0 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::deallocate(std::vector<int, std::allocator<int> >*, unsigned long) [clone .constprop.0]>
    3de2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3de9:	00 00 00 00 
    3ded:	0f 1f 00             	nopl   (%rax)

0000000000003df0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_deallocate(std::vector<int, std::allocator<int> >*, unsigned long) [clone .isra.0]>:
    3df0:	48 85 ff             	test   %rdi,%rdi
    3df3:	74 02                	je     3df7 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_deallocate(std::vector<int, std::allocator<int> >*, unsigned long) [clone .isra.0]+0x7>
    3df5:	eb e9                	jmp    3de0 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::deallocate(std::allocator<std::vector<int, std::allocator<int> > >&, std::vector<int, std::allocator<int> >*, unsigned long) [clone .isra.0]>
    3df7:	c3                   	retq   
    3df8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    3dff:	00 

0000000000003e00 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~_Vector_base()>:
    3e00:	4c 8b 07             	mov    (%rdi),%r8
    3e03:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    3e07:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
    3e0e:	aa aa aa 
    3e11:	4c 29 c6             	sub    %r8,%rsi
    3e14:	48 c1 fe 03          	sar    $0x3,%rsi
    3e18:	48 0f af f0          	imul   %rax,%rsi
    3e1c:	4c 89 c7             	mov    %r8,%rdi
    3e1f:	eb cf                	jmp    3df0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_deallocate(std::vector<int, std::allocator<int> >*, unsigned long) [clone .isra.0]>
    3e21:	90                   	nop
    3e22:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e29:	00 00 00 00 
    3e2d:	0f 1f 00             	nopl   (%rax)

0000000000003e30 <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long) [clone .constprop.0]>:
    3e30:	48 c1 e6 02          	shl    $0x2,%rsi
    3e34:	e9 57 e5 ff ff       	jmpq   2390 <operator delete(void*, unsigned long)@plt>
    3e39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003e40 <std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long) [clone .isra.0]>:
    3e40:	eb ee                	jmp    3e30 <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long) [clone .constprop.0]>
    3e42:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e49:	00 00 00 00 
    3e4d:	0f 1f 00             	nopl   (%rax)

0000000000003e50 <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [clone .isra.0]>:
    3e50:	48 85 ff             	test   %rdi,%rdi
    3e53:	74 0b                	je     3e60 <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [clone .isra.0]+0x10>
    3e55:	eb e9                	jmp    3e40 <std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long) [clone .isra.0]>
    3e57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3e5e:	00 00 
    3e60:	c3                   	retq   
    3e61:	90                   	nop
    3e62:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e69:	00 00 00 00 
    3e6d:	0f 1f 00             	nopl   (%rax)

0000000000003e70 <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>:
    3e70:	4c 8b 07             	mov    (%rdi),%r8
    3e73:	48 8b 77 10          	mov    0x10(%rdi),%rsi
    3e77:	4c 89 c7             	mov    %r8,%rdi
    3e7a:	4c 29 c6             	sub    %r8,%rsi
    3e7d:	48 c1 fe 02          	sar    $0x2,%rsi
    3e81:	eb cd                	jmp    3e50 <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [clone .isra.0]>
    3e83:	90                   	nop
    3e84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e8b:	00 00 00 00 
    3e8f:	90                   	nop

0000000000003e90 <std::vector<int, std::allocator<int> >::~vector()>:
    3e90:	eb de                	jmp    3e70 <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    3e92:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3e99:	00 00 00 00 
    3e9d:	0f 1f 00             	nopl   (%rax)

0000000000003ea0 <void std::_Destroy<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*)>:
    3ea0:	eb ee                	jmp    3e90 <std::vector<int, std::allocator<int> >::~vector()>
    3ea2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3ea9:	00 00 00 00 
    3ead:	0f 1f 00             	nopl   (%rax)

0000000000003eb0 <void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)>:
    3eb0:	48 39 f7             	cmp    %rsi,%rdi
    3eb3:	74 33                	je     3ee8 <void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)+0x38>
    3eb5:	55                   	push   %rbp
    3eb6:	48 89 f5             	mov    %rsi,%rbp
    3eb9:	53                   	push   %rbx
    3eba:	48 89 fb             	mov    %rdi,%rbx
    3ebd:	48 83 ec 08          	sub    $0x8,%rsp
    3ec1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    3ec8:	48 89 df             	mov    %rbx,%rdi
    3ecb:	e8 90 ef ff ff       	callq  2e60 <std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&)>
    3ed0:	48 89 c7             	mov    %rax,%rdi
    3ed3:	48 83 c3 18          	add    $0x18,%rbx
    3ed7:	e8 c4 ff ff ff       	callq  3ea0 <void std::_Destroy<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*)>
    3edc:	48 39 dd             	cmp    %rbx,%rbp
    3edf:	75 e7                	jne    3ec8 <void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)+0x18>
    3ee1:	48 83 c4 08          	add    $0x8,%rsp
    3ee5:	5b                   	pop    %rbx
    3ee6:	5d                   	pop    %rbp
    3ee7:	c3                   	retq   
    3ee8:	c3                   	retq   
    3ee9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003ef0 <void std::_Destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)>:
    3ef0:	eb be                	jmp    3eb0 <void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)>
    3ef2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3ef9:	00 00 00 00 
    3efd:	0f 1f 00             	nopl   (%rax)

0000000000003f00 <void std::_Destroy<std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&) [clone .constprop.0]>:
    3f00:	eb ee                	jmp    3ef0 <void std::_Destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)>
    3f02:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f09:	00 00 00 00 
    3f0d:	0f 1f 00             	nopl   (%rax)

0000000000003f10 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()>:
    3f10:	55                   	push   %rbp
    3f11:	48 89 fd             	mov    %rdi,%rbp
    3f14:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    3f18:	48 8b 3f             	mov    (%rdi),%rdi
    3f1b:	e8 e0 ff ff ff       	callq  3f00 <void std::_Destroy<std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&) [clone .constprop.0]>
    3f20:	48 89 ef             	mov    %rbp,%rdi
    3f23:	5d                   	pop    %rbp
    3f24:	e9 d7 fe ff ff       	jmpq   3e00 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~_Vector_base()>
    3f29:	90                   	nop
    3f2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003f30 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]>:
    3f30:	48 83 ec 08          	sub    $0x8,%rsp
    3f34:	e8 67 f0 ff ff       	callq  2fa0 <__gnu_cxx::new_allocator<int>::_M_max_size() const [clone .constprop.0]>
    3f39:	48 39 f8             	cmp    %rdi,%rax
    3f3c:	72 0d                	jb     3f4b <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]+0x1b>
    3f3e:	48 c1 e7 02          	shl    $0x2,%rdi
    3f42:	48 83 c4 08          	add    $0x8,%rsp
    3f46:	e9 35 e4 ff ff       	jmpq   2380 <operator new(unsigned long)@plt>
    3f4b:	e8 40 e3 ff ff       	callq  2290 <std::__throw_bad_alloc()@plt>

0000000000003f50 <std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) [clone .isra.0]>:
    3f50:	eb de                	jmp    3f30 <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]>
    3f52:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f59:	00 00 00 00 
    3f5d:	0f 1f 00             	nopl   (%rax)

0000000000003f60 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) [clone .isra.0]>:
    3f60:	48 85 ff             	test   %rdi,%rdi
    3f63:	74 0b                	je     3f70 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) [clone .isra.0]+0x10>
    3f65:	eb e9                	jmp    3f50 <std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) [clone .isra.0]>
    3f67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3f6e:	00 00 
    3f70:	31 c0                	xor    %eax,%eax
    3f72:	c3                   	retq   
    3f73:	90                   	nop
    3f74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3f7b:	00 00 00 00 
    3f7f:	90                   	nop

0000000000003f80 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>:
    3f80:	55                   	push   %rbp
    3f81:	48 89 f5             	mov    %rsi,%rbp
    3f84:	53                   	push   %rbx
    3f85:	48 89 fb             	mov    %rdi,%rbx
    3f88:	48 89 f7             	mov    %rsi,%rdi
    3f8b:	48 83 ec 08          	sub    $0x8,%rsp
    3f8f:	e8 cc ff ff ff       	callq  3f60 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) [clone .isra.0]>
    3f94:	48 89 03             	mov    %rax,(%rbx)
    3f97:	48 89 43 08          	mov    %rax,0x8(%rbx)
    3f9b:	48 8d 04 a8          	lea    (%rax,%rbp,4),%rax
    3f9f:	48 89 43 10          	mov    %rax,0x10(%rbx)
    3fa3:	48 83 c4 08          	add    $0x8,%rsp
    3fa7:	5b                   	pop    %rbx
    3fa8:	5d                   	pop    %rbp
    3fa9:	c3                   	retq   
    3faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003fb0 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) [clone .isra.0]>:
    3fb0:	48 83 ec 08          	sub    $0x8,%rsp
    3fb4:	e8 27 f0 ff ff       	callq  2fe0 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&) [clone .constprop.0]>
    3fb9:	e8 c2 ff ff ff       	callq  3f80 <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>
    3fbe:	48 83 c4 08          	add    $0x8,%rsp
    3fc2:	c3                   	retq   
    3fc3:	90                   	nop
    3fc4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    3fcb:	00 00 00 00 
    3fcf:	90                   	nop

0000000000003fd0 <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>:
    3fd0:	41 55                	push   %r13
    3fd2:	41 54                	push   %r12
    3fd4:	55                   	push   %rbp
    3fd5:	48 89 f5             	mov    %rsi,%rbp
    3fd8:	53                   	push   %rbx
    3fd9:	48 89 fb             	mov    %rdi,%rbx
    3fdc:	48 83 ec 18          	sub    $0x18,%rsp
    3fe0:	48 8d 7c 24 07       	lea    0x7(%rsp),%rdi
    3fe5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3fec:	00 00 
    3fee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    3ff3:	31 c0                	xor    %eax,%eax
    3ff5:	e8 36 f0 ff ff       	callq  3030 <__gnu_cxx::__alloc_traits<std::allocator<int>, int>::_S_select_on_copy(std::allocator<int> const&) [clone .isra.0]>
    3ffa:	48 8b 75 08          	mov    0x8(%rbp),%rsi
    3ffe:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
    4002:	e8 19 f8 ff ff       	callq  3820 <std::vector<int, std::allocator<int> >::size() const [clone .isra.0]>
    4007:	48 89 c6             	mov    %rax,%rsi
    400a:	48 89 df             	mov    %rbx,%rdi
    400d:	e8 9e ff ff ff       	callq  3fb0 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) [clone .isra.0]>
    4012:	48 89 ef             	mov    %rbp,%rdi
    4015:	4c 8b 2b             	mov    (%rbx),%r13
    4018:	e8 53 f6 ff ff       	callq  3670 <std::vector<int, std::allocator<int> >::end() const>
    401d:	48 89 ef             	mov    %rbp,%rdi
    4020:	49 89 c4             	mov    %rax,%r12
    4023:	e8 08 f6 ff ff       	callq  3630 <std::vector<int, std::allocator<int> >::begin() const>
    4028:	48 89 c7             	mov    %rax,%rdi
    402b:	4c 89 ea             	mov    %r13,%rdx
    402e:	4c 89 e6             	mov    %r12,%rsi
    4031:	e8 4a fc ff ff       	callq  3c80 <int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&) [clone .constprop.0]>
    4036:	48 89 43 08          	mov    %rax,0x8(%rbx)
    403a:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    403f:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    4046:	00 00 
    4048:	75 0b                	jne    4055 <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)+0x85>
    404a:	48 83 c4 18          	add    $0x18,%rsp
    404e:	5b                   	pop    %rbx
    404f:	5d                   	pop    %rbp
    4050:	41 5c                	pop    %r12
    4052:	41 5d                	pop    %r13
    4054:	c3                   	retq   
    4055:	e8 76 e3 ff ff       	callq  23d0 <__stack_chk_fail@plt>
    405a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004060 <void std::_Construct<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > const&>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > const&)>:
    4060:	48 83 ec 08          	sub    $0x8,%rsp
    4064:	49 89 f8             	mov    %rdi,%r8
    4067:	48 89 f7             	mov    %rsi,%rdi
    406a:	e8 f1 eb ff ff       	callq  2c60 <std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)>
    406f:	4c 89 c7             	mov    %r8,%rdi
    4072:	48 89 c6             	mov    %rax,%rsi
    4075:	e8 a6 ef ff ff       	callq  3020 <operator new(unsigned long, void*) [clone .constprop.0]>
    407a:	48 89 c7             	mov    %rax,%rdi
    407d:	48 83 c4 08          	add    $0x8,%rsp
    4081:	e9 4a ff ff ff       	jmpq   3fd0 <std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)>
    4086:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    408d:	00 00 00 

0000000000004090 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)>:
    4090:	41 55                	push   %r13
    4092:	49 89 fd             	mov    %rdi,%r13
    4095:	41 54                	push   %r12
    4097:	55                   	push   %rbp
    4098:	53                   	push   %rbx
    4099:	48 83 ec 08          	sub    $0x8,%rsp
    409d:	48 85 f6             	test   %rsi,%rsi
    40a0:	74 38                	je     40da <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)+0x4a>
    40a2:	48 89 f3             	mov    %rsi,%rbx
    40a5:	48 89 d5             	mov    %rdx,%rbp
    40a8:	49 89 fc             	mov    %rdi,%r12
    40ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    40b0:	4c 89 e7             	mov    %r12,%rdi
    40b3:	e8 a8 ed ff ff       	callq  2e60 <std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&)>
    40b8:	48 89 c7             	mov    %rax,%rdi
    40bb:	48 89 ee             	mov    %rbp,%rsi
    40be:	e8 9d ff ff ff       	callq  4060 <void std::_Construct<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > const&>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > const&)>
    40c3:	49 83 c4 18          	add    $0x18,%r12
    40c7:	48 ff cb             	dec    %rbx
    40ca:	75 e4                	jne    40b0 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)+0x20>
    40cc:	48 83 c4 08          	add    $0x8,%rsp
    40d0:	5b                   	pop    %rbx
    40d1:	5d                   	pop    %rbp
    40d2:	4c 89 e0             	mov    %r12,%rax
    40d5:	41 5c                	pop    %r12
    40d7:	41 5d                	pop    %r13
    40d9:	c3                   	retq   
    40da:	49 89 fc             	mov    %rdi,%r12
    40dd:	eb ed                	jmp    40cc <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)+0x3c>
    40df:	f3 0f 1e fa          	endbr64 
    40e3:	48 89 c7             	mov    %rax,%rdi
    40e6:	e9 d6 e3 ff ff       	jmpq   24c1 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&) [clone .cold]>
    40eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000040f0 <std::vector<int, std::allocator<int> >* std::uninitialized_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)>:
    40f0:	eb 9e                	jmp    4090 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n<false>::__uninit_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)>
    40f2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    40f9:	00 00 00 00 
    40fd:	0f 1f 00             	nopl   (%rax)

0000000000004100 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n_a<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > >&) [clone .constprop.0]>:
    4100:	eb ee                	jmp    40f0 <std::vector<int, std::allocator<int> >* std::uninitialized_fill_n<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&)>
    4102:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4109:	00 00 00 00 
    410d:	0f 1f 00             	nopl   (%rax)

0000000000004110 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_fill_initialize(unsigned long, std::vector<int, std::allocator<int> > const&)>:
    4110:	53                   	push   %rbx
    4111:	48 89 fb             	mov    %rdi,%rbx
    4114:	48 8b 3f             	mov    (%rdi),%rdi
    4117:	e8 e4 ff ff ff       	callq  4100 <std::vector<int, std::allocator<int> >* std::__uninitialized_fill_n_a<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > >&) [clone .constprop.0]>
    411c:	48 89 43 08          	mov    %rax,0x8(%rbx)
    4120:	5b                   	pop    %rbx
    4121:	c3                   	retq   
    4122:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4129:	00 00 00 00 
    412d:	0f 1f 00             	nopl   (%rax)

0000000000004130 <std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) [clone .constprop.0] [clone .isra.0]>:
    4130:	41 55                	push   %r13
    4132:	49 89 d5             	mov    %rdx,%r13
    4135:	41 54                	push   %r12
    4137:	49 89 f4             	mov    %rsi,%r12
    413a:	55                   	push   %rbp
    413b:	48 89 fd             	mov    %rdi,%rbp
    413e:	48 89 f7             	mov    %rsi,%rdi
    4141:	e8 7a fb ff ff       	callq  3cc0 <std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) [clone .constprop.0]>
    4146:	48 89 c6             	mov    %rax,%rsi
    4149:	48 89 ef             	mov    %rbp,%rdi
    414c:	e8 5f fe ff ff       	callq  3fb0 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) [clone .isra.0]>
    4151:	48 89 ef             	mov    %rbp,%rdi
    4154:	5d                   	pop    %rbp
    4155:	4c 89 e6             	mov    %r12,%rsi
    4158:	41 5c                	pop    %r12
    415a:	4c 89 ea             	mov    %r13,%rdx
    415d:	41 5d                	pop    %r13
    415f:	e9 bc f0 ff ff       	jmpq   3220 <std::vector<int, std::allocator<int> >::_M_fill_initialize(unsigned long, int const&)>
    4164:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    416b:	00 00 00 00 
    416f:	90                   	nop

0000000000004170 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) [clone .isra.0]>:
    4170:	41 54                	push   %r12
    4172:	49 89 f4             	mov    %rsi,%r12
    4175:	55                   	push   %rbp
    4176:	48 89 fd             	mov    %rdi,%rbp
    4179:	48 89 f7             	mov    %rsi,%rdi
    417c:	48 83 ec 08          	sub    $0x8,%rsp
    4180:	e8 3b fb ff ff       	callq  3cc0 <std::vector<int, std::allocator<int> >::_S_check_init_len(unsigned long, std::allocator<int> const&) [clone .constprop.0]>
    4185:	48 89 c6             	mov    %rax,%rsi
    4188:	48 89 ef             	mov    %rbp,%rdi
    418b:	e8 20 fe ff ff       	callq  3fb0 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) [clone .isra.0]>
    4190:	48 83 c4 08          	add    $0x8,%rsp
    4194:	48 89 ef             	mov    %rbp,%rdi
    4197:	5d                   	pop    %rbp
    4198:	4c 89 e6             	mov    %r12,%rsi
    419b:	41 5c                	pop    %r12
    419d:	e9 2e f0 ff ff       	jmpq   31d0 <std::vector<int, std::allocator<int> >::_M_default_initialize(unsigned long)>
    41a2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    41a9:	00 00 00 00 
    41ad:	0f 1f 00             	nopl   (%rax)

00000000000041b0 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]>:
    41b0:	48 83 ec 08          	sub    $0x8,%rsp
    41b4:	e8 d7 ed ff ff       	callq  2f90 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::_M_max_size() const [clone .constprop.0]>
    41b9:	48 39 f8             	cmp    %rdi,%rax
    41bc:	72 11                	jb     41cf <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]+0x1f>
    41be:	48 8d 3c 7f          	lea    (%rdi,%rdi,2),%rdi
    41c2:	48 c1 e7 03          	shl    $0x3,%rdi
    41c6:	48 83 c4 08          	add    $0x8,%rsp
    41ca:	e9 b1 e1 ff ff       	jmpq   2380 <operator new(unsigned long)@plt>
    41cf:	e8 bc e0 ff ff       	callq  2290 <std::__throw_bad_alloc()@plt>
    41d4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    41db:	00 00 00 00 
    41df:	90                   	nop

00000000000041e0 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::allocate(std::allocator<std::vector<int, std::allocator<int> > >&, unsigned long) [clone .isra.0]>:
    41e0:	eb ce                	jmp    41b0 <__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*) [clone .constprop.0] [clone .isra.0]>
    41e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    41e9:	00 00 00 00 
    41ed:	0f 1f 00             	nopl   (%rax)

00000000000041f0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long) [clone .isra.0]>:
    41f0:	48 85 ff             	test   %rdi,%rdi
    41f3:	74 02                	je     41f7 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long) [clone .isra.0]+0x7>
    41f5:	eb e9                	jmp    41e0 <std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::allocate(std::allocator<std::vector<int, std::allocator<int> > >&, unsigned long) [clone .isra.0]>
    41f7:	31 c0                	xor    %eax,%eax
    41f9:	c3                   	retq   
    41fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004200 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_create_storage(unsigned long)>:
    4200:	55                   	push   %rbp
    4201:	48 89 f5             	mov    %rsi,%rbp
    4204:	53                   	push   %rbx
    4205:	48 89 fb             	mov    %rdi,%rbx
    4208:	48 89 f7             	mov    %rsi,%rdi
    420b:	48 83 ec 08          	sub    $0x8,%rsp
    420f:	e8 dc ff ff ff       	callq  41f0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long) [clone .isra.0]>
    4214:	48 8d 54 6d 00       	lea    0x0(%rbp,%rbp,2),%rdx
    4219:	48 89 03             	mov    %rax,(%rbx)
    421c:	48 89 43 08          	mov    %rax,0x8(%rbx)
    4220:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
    4224:	48 89 43 10          	mov    %rax,0x10(%rbx)
    4228:	48 83 c4 08          	add    $0x8,%rsp
    422c:	5b                   	pop    %rbx
    422d:	5d                   	pop    %rbp
    422e:	c3                   	retq   
    422f:	90                   	nop

0000000000004230 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>:
    4230:	48 83 ec 08          	sub    $0x8,%rsp
    4234:	e8 97 ed ff ff       	callq  2fd0 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::_Vector_impl(std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .constprop.0]>
    4239:	e8 c2 ff ff ff       	callq  4200 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_create_storage(unsigned long)>
    423e:	48 83 c4 08          	add    $0x8,%rsp
    4242:	c3                   	retq   
    4243:	90                   	nop
    4244:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    424b:	00 00 00 00 
    424f:	90                   	nop

0000000000004250 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>:
    4250:	41 55                	push   %r13
    4252:	49 89 d5             	mov    %rdx,%r13
    4255:	41 54                	push   %r12
    4257:	49 89 f4             	mov    %rsi,%r12
    425a:	55                   	push   %rbp
    425b:	48 89 fd             	mov    %rdi,%rbp
    425e:	48 89 f7             	mov    %rsi,%rdi
    4261:	e8 2a fa ff ff       	callq  3c90 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .constprop.0]>
    4266:	48 89 c6             	mov    %rax,%rsi
    4269:	48 89 ef             	mov    %rbp,%rdi
    426c:	e8 bf ff ff ff       	callq  4230 <std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0]>
    4271:	4c 89 ea             	mov    %r13,%rdx
    4274:	4c 89 e6             	mov    %r12,%rsi
    4277:	48 89 ef             	mov    %rbp,%rdi
    427a:	e8 91 fe ff ff       	callq  4110 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_fill_initialize(unsigned long, std::vector<int, std::allocator<int> > const&)>
    427f:	5d                   	pop    %rbp
    4280:	41 5c                	pop    %r12
    4282:	41 5d                	pop    %r13
    4284:	c3                   	retq   
    4285:	f3 0f 1e fa          	endbr64 
    4289:	49 89 c4             	mov    %rax,%r12
    428c:	e9 5f e2 ff ff       	jmpq   24f0 <std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::vector<int, std::allocator<int> > const&, std::allocator<std::vector<int, std::allocator<int> > > const&) [clone .isra.0] [clone .cold]>
    4291:	90                   	nop
    4292:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4299:	00 00 00 00 
    429d:	0f 1f 00             	nopl   (%rax)

00000000000042a0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]>:
    42a0:	41 54                	push   %r12
    42a2:	49 89 fc             	mov    %rdi,%r12
    42a5:	55                   	push   %rbp
    42a6:	48 89 f5             	mov    %rsi,%rbp
    42a9:	48 83 ec 08          	sub    $0x8,%rsp
    42ad:	e8 8e e0 ff ff       	callq  2340 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_local_data()@plt>
    42b2:	48 89 c6             	mov    %rax,%rsi
    42b5:	4c 89 e7             	mov    %r12,%rdi
    42b8:	e8 43 f7 ff ff       	callq  3a00 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&) [clone .isra.0]>
    42bd:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    42c1:	48 85 ed             	test   %rbp,%rbp
    42c4:	74 0d                	je     42d3 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&) [clone .isra.0]+0x33>
    42c6:	48 89 ef             	mov    %rbp,%rdi
    42c9:	e8 42 f7 ff ff       	callq  3a10 <std::char_traits<char>::length(char const*)>
    42ce:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
    42d3:	48 89 ee             	mov    %rbp,%rsi
    42d6:	4c 89 e7             	mov    %r12,%rdi
    42d9:	e8 e2 fa ff ff       	callq  3dc0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*)>
    42de:	48 83 c4 08          	add    $0x8,%rsp
    42e2:	5d                   	pop    %rbp
    42e3:	41 5c                	pop    %r12
    42e5:	c3                   	retq   
    42e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    42ed:	00 00 00 

00000000000042f0 <__libc_csu_init>:
    42f0:	f3 0f 1e fa          	endbr64 
    42f4:	41 57                	push   %r15
    42f6:	4c 8d 3d 4b 39 00 00 	lea    0x394b(%rip),%r15        # 7c48 <__frame_dummy_init_array_entry>
    42fd:	41 56                	push   %r14
    42ff:	49 89 d6             	mov    %rdx,%r14
    4302:	41 55                	push   %r13
    4304:	49 89 f5             	mov    %rsi,%r13
    4307:	41 54                	push   %r12
    4309:	41 89 fc             	mov    %edi,%r12d
    430c:	55                   	push   %rbp
    430d:	48 8d 2d 44 39 00 00 	lea    0x3944(%rip),%rbp        # 7c58 <__do_global_dtors_aux_fini_array_entry>
    4314:	53                   	push   %rbx
    4315:	4c 29 fd             	sub    %r15,%rbp
    4318:	48 83 ec 08          	sub    $0x8,%rsp
    431c:	e8 df dc ff ff       	callq  2000 <_init>
    4321:	48 c1 fd 03          	sar    $0x3,%rbp
    4325:	74 1f                	je     4346 <__libc_csu_init+0x56>
    4327:	31 db                	xor    %ebx,%ebx
    4329:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    4330:	4c 89 f2             	mov    %r14,%rdx
    4333:	4c 89 ee             	mov    %r13,%rsi
    4336:	44 89 e7             	mov    %r12d,%edi
    4339:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    433d:	48 83 c3 01          	add    $0x1,%rbx
    4341:	48 39 dd             	cmp    %rbx,%rbp
    4344:	75 ea                	jne    4330 <__libc_csu_init+0x40>
    4346:	48 83 c4 08          	add    $0x8,%rsp
    434a:	5b                   	pop    %rbx
    434b:	5d                   	pop    %rbp
    434c:	41 5c                	pop    %r12
    434e:	41 5d                	pop    %r13
    4350:	41 5e                	pop    %r14
    4352:	41 5f                	pop    %r15
    4354:	c3                   	retq   
    4355:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    435c:	00 00 00 00 

0000000000004360 <__libc_csu_fini>:
    4360:	f3 0f 1e fa          	endbr64 
    4364:	c3                   	retq   

Desensamblado de la secci贸n .fini:

0000000000004368 <_fini>:
    4368:	f3 0f 1e fa          	endbr64 
    436c:	48 83 ec 08          	sub    $0x8,%rsp
    4370:	48 83 c4 08          	add    $0x8,%rsp
    4374:	c3                   	retq   
